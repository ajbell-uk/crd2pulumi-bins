"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonorepoJavaProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const fs = require("fs");
const path = require("path");
const projen_1 = require("projen");
const java_1 = require("projen/lib/java");
const nx_configurator_1 = require("../../components/nx-configurator");
const projen_dependency_1 = require("../../components/projen-dependency");
const utils_1 = require("../../utils");
const MVN_PLUGIN_PATH = "./.nx/plugins/nx_plugin.js";
/**
 * This project type will bootstrap a NX based monorepo with support for polygot
 * builds, build caching, dependency graph visualization and much more.
 *
 * @pjid monorepo-java
 */
class MonorepoJavaProject extends java_1.JavaProject {
    constructor(options) {
        // Pin default projen version for java
        const projenVersion = options.projenrcJavaOptions?.projenVersion ??
            projen_dependency_1.DEFAULT_PROJEN_VERSION.replace(/^\^/, "");
        super({
            ...options,
            sample: false,
            junit: false,
            version: options.version ?? "0.0.0",
            groupId: options.groupId ?? "com.aws",
            artifactId: options.artifactId ?? "monorepo",
            projenrcJavaOptions: {
                ...options.projenrcJavaOptions,
                projenVersion,
            },
        });
        this.projenVersion = projenVersion;
        // Pin constructs version
        this.deps.removeDependency("software.constructs/constructs", projen_1.DependencyType.BUILD);
        this.addDependency("software.constructs/constructs@10.3.0");
        this.addTestDependency(`software.aws/pdk@${utils_1.ProjectUtils.getPdkVersion()}`);
        this.nxConfigurator = new nx_configurator_1.NxConfigurator(this, {
            defaultReleaseBranch: options.defaultReleaseBranch ?? "main",
            licenseOptions: options.disableDefaultLicenses
                ? {
                    disableDefaultLicenses: options.disableDefaultLicenses,
                }
                : undefined,
        });
        // Setup maven nx plugin
        new projen_1.TextFile(this, MVN_PLUGIN_PATH, {
            readonly: true,
            lines: fs
                .readFileSync(path.join(__dirname, "plugin/mvn_plugin.js"))
                .toString("utf-8")
                .split("\n"),
        });
        this.nx.plugins.push("@jnxplus/nx-maven", MVN_PLUGIN_PATH);
        this.installTask = this.nxConfigurator.ensureNxInstallTask({
            "@jnxplus/nx-maven": "^1.x",
        });
        // Map tasks to nx run-many
        this.nxConfigurator._overrideNxBuildTask(this.buildTask, { target: "build" }, { force: true });
        this.nxConfigurator._overrideNxBuildTask(this.preCompileTask, {
            target: "pre-compile",
        });
        this.nxConfigurator._overrideNxBuildTask(this.compileTask, {
            target: "compile",
        });
        this.nxConfigurator._overrideNxBuildTask(this.postCompileTask, {
            target: "post-compile",
        });
        this.nxConfigurator._overrideNxBuildTask(this.testTask, {
            target: "test",
        });
        this.nxConfigurator._overrideNxBuildTask(this.packageTask, {
            target: "package",
        });
    }
    /**
     * @inheritdoc
     */
    get nx() {
        return this.nxConfigurator.nx;
    }
    /**
     * @inheritdoc
     */
    execNxRunManyCommand(options) {
        return this.nxConfigurator.execNxRunManyCommand(options);
    }
    /**
     * @inheritdoc
     */
    composeNxRunManyCommand(options) {
        return this.nxConfigurator.composeNxRunManyCommand(options);
    }
    /**
     * @inheritdoc
     */
    addNxRunManyTask(name, options) {
        return this.nxConfigurator.addNxRunManyTask(name, options);
    }
    /**
     * @inheritdoc
     */
    addImplicitDependency(dependent, dependee) {
        this.nxConfigurator.addImplicitDependency(dependent, dependee);
    }
    /**
     * @inheritdoc
     */
    addJavaDependency(dependent, dependee) {
        this.nxConfigurator.addJavaDependency(dependent, dependee);
    }
    /**
     * @inheritdoc
     */
    addPythonPoetryDependency(dependent, dependee) {
        this.nxConfigurator.addPythonPoetryDependency(dependent, dependee);
    }
    addUpgradeDepsTask() {
        const upgradeDepsTask = new projen_1.Task("upgrade-deps", {
            description: "Upgrade dependencies in the monorepo",
        });
        this.nxConfigurator._overrideNxBuildTask(upgradeDepsTask, {
            target: "upgrade",
        });
        this.nxConfigurator._configurePythonSubprojectUpgradeDeps(this, upgradeDepsTask);
    }
    /**
     * @inheritdoc
     */
    preSynthesize() {
        // Calling before super() to ensure proper pre-synth of NxProject component and its nested components
        this.nxConfigurator.preSynthesize();
        this.addUpgradeDepsTask();
        super.preSynthesize();
        (0, projen_dependency_1.syncProjenVersions)(this.subprojects, this.projenVersion);
    }
    /**
     * @inheritDoc
     */
    synth() {
        this.nxConfigurator.synth();
        super.synth();
    }
    postSynthesize() {
        super.postSynthesize();
        this.installNx();
    }
    /**
     * Run the install task which will install nx locally
     */
    installNx() {
        this.logger.info("Installing dependencies...");
        const runtime = new projen_1.TaskRuntime(this.outdir);
        runtime.runTask(this.installTask.name);
    }
}
exports.MonorepoJavaProject = MonorepoJavaProject;
_a = JSII_RTTI_SYMBOL_1;
MonorepoJavaProject[_a] = { fqn: "@aws/pdk.monorepo.MonorepoJavaProject", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,