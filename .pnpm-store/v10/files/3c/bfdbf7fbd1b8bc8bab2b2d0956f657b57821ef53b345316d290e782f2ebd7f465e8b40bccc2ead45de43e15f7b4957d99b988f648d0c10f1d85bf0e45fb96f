"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmithyAsyncModelProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const type_safe_api_command_environment_1 = require("../../codegen/components/type-safe-api-command-environment");
const types_1 = require("../../types");
const model_readme_1 = require("../model-readme");
const type_safe_api_async_model_build_1 = require("../type-safe-api-async-model-build");
const type_safe_api_model_build_1 = require("../type-safe-api-model-build");
const smithy_async_sample_code_1 = require("./components/smithy-async-sample-code");
const smithy_aws_pdk_async_prelude_1 = require("./components/smithy-aws-pdk-async-prelude");
const smithy_base_project_1 = require("./smithy-base-project");
const smithy_service_project_definition_1 = require("./smithy-service-project-definition");
const generate_task_1 = require("../../codegen/components/generate-task");
const utils_1 = require("../../codegen/components/utils");
/**
 * Smithy model project for a WebSocket API
 */
class SmithyAsyncModelProject extends smithy_base_project_1.SmithyBaseProject {
    constructor(options) {
        super(options);
        type_safe_api_command_environment_1.TypeSafeApiCommandEnvironment.ensure(this);
        this.definition = new smithy_service_project_definition_1.SmithyServiceProjectDefinition(this, {
            ...options,
            smithyOptions: {
                ...options.smithyOptions,
                smithyBuildOptions: {
                    ...options.smithyOptions.smithyBuildOptions,
                    projections: {
                        ...options.smithyOptions.smithyBuildOptions?.projections,
                        openapi: {
                            ...options.smithyOptions.smithyBuildOptions?.projections?.openapi,
                            transforms: [
                                // Add the async transform to the openapi projection
                                { name: "aws-pdk-async-transformer", args: {} },
                            ],
                        },
                    },
                },
            },
        });
        this.apiName = options.smithyOptions.serviceName.serviceName;
        const { namespace: serviceNamespace, serviceName } = options.smithyOptions.serviceName;
        const firstHandlerLanguage = options.handlerLanguages?.[0];
        // Create the default smithy model
        new smithy_async_sample_code_1.SmithyAsyncSampleCode(this, {
            modelDir: this.definition.modelDir,
            serviceName,
            serviceNamespace,
            firstHandlerLanguage,
        });
        // Add the additional async prelude
        new smithy_aws_pdk_async_prelude_1.SmithyAwsPdkAsyncPrelude(this, {
            generatedModelDir: this.definition.generatedModelDir,
            serviceNamespace,
            handlerLanguages: options.handlerLanguages,
        });
        const generateTask = generate_task_1.GenerateTask.ensure(this);
        // Copy the async transformer jar
        generateTask.prependExec((0, utils_1.buildTypeSafeApiExecCommand)(utils_1.TypeSafeApiScript.COPY_ASYNC_SMITHY_TRANSFORMER));
        this.definition.addDeps(`file://.smithy-async/aws-pdk-smithy-async-transformer.jar`);
        this.gitignore.addPatterns(".smithy-async");
        new type_safe_api_model_build_1.TypeSafeApiModelBuild(this, {
            openApiSpecificationPath: this.definition.openApiSpecificationPath,
            smithyJsonModelPath: this.definition.smithyJsonModelPath,
            parsedSpecFile: options.parsedSpecFile,
        });
        new type_safe_api_async_model_build_1.TypeSafeApiAsyncModelBuild(this, {
            parsedSpecFile: options.parsedSpecFile,
            asyncApiSpecFile: options.asyncApiSpecFile,
        });
        new model_readme_1.ModelReadme(this, {
            modelLanguage: types_1.ModelLanguage.SMITHY,
            apiType: "async",
        });
    }
    smithyProjectDefinition() {
        return this.definition;
    }
}
exports.SmithyAsyncModelProject = SmithyAsyncModelProject;
_a = JSII_RTTI_SYMBOL_1;
SmithyAsyncModelProject[_a] = { fqn: "@aws/pdk.type_safe_api.SmithyAsyncModelProject", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,