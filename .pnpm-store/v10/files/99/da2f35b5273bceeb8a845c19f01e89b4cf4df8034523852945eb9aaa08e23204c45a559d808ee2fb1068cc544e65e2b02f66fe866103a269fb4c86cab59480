"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bump = bump;
const fs_1 = require("fs");
const path_1 = require("path");
const semver_1 = require("semver");
const logging = require("../logging");
const util_1 = require("../util");
const version_1 = require("../version");
const bump_type_1 = require("./bump-type");
const commit_tag_version_1 = require("./commit-tag-version");
/**
 * Resolves the latest version from git tags and uses `commit-and-tag-version` to bump
 * to the next version based on commits.
 *
 * This expects `commit-and-tag-version` to be installed in the path.
 *
 * @param cwd working directory (git repository)
 * @param options options
 */
async function bump(cwd, options) {
    const versionFile = (0, path_1.join)(cwd, options.versionFile);
    const prerelease = options.prerelease;
    const major = options.majorVersion;
    const minor = options.minorVersion;
    const minMajorVersion = options.minMajorVersion;
    const tagPrefix = options.tagPrefix ?? "";
    const bumpFile = (0, path_1.join)(cwd, options.bumpFile);
    const changelogFile = (0, path_1.join)(cwd, options.changelog);
    const releaseTagFile = (0, path_1.join)(cwd, options.releaseTagFile);
    if (major && minMajorVersion) {
        throw new Error(`minMajorVersion and majorVersion cannot be used together.`);
    }
    if (options.nextVersionCommand && minMajorVersion) {
        throw new Error(`minMajorVersion and nextVersionCommand cannot be used together.`);
    }
    if (minor && !major) {
        throw new Error(`minorVersion and majorVersion must be used together.`);
    }
    await fs_1.promises.mkdir((0, path_1.dirname)(bumpFile), { recursive: true });
    await fs_1.promises.mkdir((0, path_1.dirname)(changelogFile), { recursive: true });
    await fs_1.promises.mkdir((0, path_1.dirname)(releaseTagFile), { recursive: true });
    const { latestVersion, latestTag, isFirstRelease } = determineLatestTag({
        cwd,
        major,
        minor,
        prerelease,
        prefix: tagPrefix,
    });
    // Write the current version into the version file so that CATV will know the current version
    const { contents, newline } = await tryReadVersionFile(versionFile);
    contents.version = latestVersion;
    logging.info(`Update ${versionFile} to latest resolved version: ${latestVersion}`);
    await fs_1.promises.writeFile(versionFile, JSON.stringify(contents, undefined, 2) + (newline ? "\n" : ""));
    // Determine the initial bump status. CATV will always do a patch even if
    // there are no commits, so look at commits ourselves first to decide
    // if we even should do nothing at all.
    const shouldRelease = isFirstRelease
        ? true
        : hasNewInterestingCommits({
            cwd,
            latestTag,
            releasableCommits: options.releasableCommits,
        });
    const catv = new commit_tag_version_1.CommitAndTagVersion(options.bumpPackage, cwd, {
        versionFile,
        changelogFile,
        prerelease,
        configOptions: options.versionrcOptions,
        tagPrefix,
    });
    // We used to translate `isFirstRelease` to the `--first-release` flag of CATV.
    // What that does is skip a bump, only generate the changelog.
    //
    // Our `{ bump: none }` does the same, so we don't need to carry over this
    // flag anymore.
    let bumpType = shouldRelease && !isFirstRelease
        ? (0, bump_type_1.relativeBumpType)(latestVersion, await catv.dryRun())
        : { bump: "none" };
    logging.info(`Bump from commits: ${(0, bump_type_1.renderBumpType)(bumpType)}`);
    if (options.nextVersionCommand) {
        const nextVersion = (0, util_1.execCapture)(options.nextVersionCommand, {
            cwd,
            modEnv: {
                VERSION: latestVersion,
                SUGGESTED_BUMP: (0, bump_type_1.renderBumpType)(bumpType),
                ...(latestTag ? { LATEST_TAG: latestTag } : {}),
            },
        })
            .toString()
            .trim();
        if (nextVersion) {
            try {
                bumpType = (0, bump_type_1.parseBumpType)(nextVersion);
                logging.info(`Bump from nextVersionCommand: ${(0, bump_type_1.renderBumpType)(bumpType)}`);
            }
            catch (e) {
                throw new Error(`nextVersionCommand "${options.nextVersionCommand}" returned invalid output: ${e}`);
            }
        }
    }
    // Respect minMajorVersion to correct the result of the nextVersionCommand
    if (minMajorVersion) {
        const bumpedVersion = (0, bump_type_1.performBump)(latestVersion, bumpType);
        const [majorVersion] = bumpedVersion.split(".");
        const majorVersionNumber = parseInt(majorVersion, 10);
        if (majorVersionNumber < minMajorVersion) {
            bumpType = { bump: "absolute", absolute: `${minMajorVersion}.0.0` };
        }
    }
    // Invoke CATV with the options we landed on. If we decided not to do a bump,
    // we will use this to regenerate the changelog of the most recent version.
    const newRelease = bumpType.bump !== "none";
    // If we're not doing a new release and this is not the
    // first release, we're just regenerating the previous changelog again.
    if (!newRelease && !isFirstRelease) {
        await catv.regeneratePreviousChangeLog(latestVersion, latestTag);
    }
    else {
        // Otherwise we're either doing a bump + release, or we're releasing the
        // first version as 0.0.0 (which is already the number in the file so we
        // skip bumping).
        await catv.invoke({
            releaseAs: newRelease ? (0, bump_type_1.renderBumpType)(bumpType) : undefined,
            skipBump: !newRelease,
        });
    }
    // Validate the version that we ended up with
    const newVersion = (await tryReadVersionFile(versionFile)).version;
    if (!newVersion) {
        throw new Error(`bump failed: ${versionFile} does not have a version set`);
    }
    if (major) {
        if (!newVersion.startsWith(`${major}.`)) {
            throw new Error(`bump failed: this branch is configured to only publish v${major} releases - bump resulted in ${newVersion}`);
        }
    }
    if (minor) {
        if (!newVersion.startsWith(`${major}.${minor}`)) {
            throw new Error(`bump failed: this branch is configured to only publish v${major}.${minor} releases - bump resulted in ${newVersion}`);
        }
    }
    // Report curent status into the dist/ directory
    const newTag = `${tagPrefix}v${newVersion}`;
    await fs_1.promises.writeFile(bumpFile, newVersion);
    await fs_1.promises.writeFile(releaseTagFile, newTag);
}
/**
 * Determine based on releaseable commits whether we should release or not
 */
function hasNewInterestingCommits(options) {
    const findCommits = (options.releasableCommits ?? version_1.ReleasableCommits.everyCommit().cmd).replace("$LATEST_TAG", options.latestTag);
    const commitsSinceLastTag = (0, util_1.execOrUndefined)(findCommits, {
        cwd: options.cwd,
    })?.split("\n");
    const numCommitsSinceLastTag = commitsSinceLastTag?.length ?? 0;
    logging.info(`Number of commits since ${options.latestTag}: ${numCommitsSinceLastTag}`);
    // Nothing to release right now
    if (numCommitsSinceLastTag === 0) {
        logging.info("No new interesting commits.");
        return false;
    }
    return true;
}
async function tryReadVersionFile(versionFile) {
    if (!(0, fs_1.existsSync)(versionFile)) {
        return { contents: {}, newline: true };
    }
    const raw = await fs_1.promises.readFile(versionFile, "utf-8");
    const contents = JSON.parse(raw);
    return {
        contents,
        version: contents.version,
        newline: raw.endsWith("\n"),
    };
}
/**
 * Determines the latest release tag.
 * @param major (optional) A major version line to select from
 * @param prerelease (optional) A pre-release suffix.
 * @returns the latest tag, and whether it is the first release or not
 */
function determineLatestTag(options) {
    const { cwd, major, minor, prerelease, prefix } = options;
    // filter only tags for this prefix and major version if specified (start with "vNN.").
    let prefixFilter;
    if (major !== undefined && minor !== undefined) {
        prefixFilter = `${prefix}v${major}.${minor}.*`;
    }
    else if (major !== undefined) {
        prefixFilter = `${prefix}v${major}.*`;
    }
    else {
        prefixFilter = `${prefix}v*`;
    }
    const listGitTags = [
        "git",
        '-c "versionsort.suffix=-"', // makes sure pre-release versions are listed after the primary version
        "tag",
        '--sort="-version:refname"', // sort as versions and not lexicographically
        "--list",
        `"${prefixFilter}"`,
    ].join(" ");
    const stdout = (0, util_1.execCapture)(listGitTags, { cwd }).toString("utf8");
    let tags = stdout?.split("\n");
    // if prerelease is set and there are existing prerelease tags, filter versions that end with "-PRE.ddd".
    const prereleaseTags = tags.filter((x) => new RegExp(`-${prerelease}\.[0-9]+$`).test(x));
    if (prerelease && prereleaseTags.length > 0) {
        /**
         * Cover the following case specifically
         * 1 - v1.0.0
         * 2 - v1.0.1-beta.0
         * 3 - v1.0.1-beta.1
         * 4 - v1.0.1
         * 5 - now publish a new release on the prerelease branch
         *    by setting the latestTag as v1.0.1 instead of v1.0.1-beta.1
         */
        const releaseTags = tags.filter((x) => new RegExp(`^v([0-9]+)\.([0-9]+)\.([0-9]+)$`).test(x));
        if (releaseTags.length > 0 &&
            (0, semver_1.compare)(releaseTags[0], prereleaseTags[0]) === 1) {
            tags = releaseTags;
        }
        else {
            tags = prereleaseTags;
        }
    }
    tags = tags.filter((x) => x);
    // if a pre-release tag is used, then add it to the initial version
    let isFirstRelease = false;
    let latestTag;
    if (tags.length > 0) {
        latestTag = tags[0];
    }
    else {
        const initial = `${prefix}v${major ?? 0}.${minor ?? 0}.0`;
        latestTag = prerelease ? `${initial}-${prerelease}.0` : initial;
        isFirstRelease = true;
    }
    // remove tag prefix (if exists)
    let latestVersion = latestTag;
    if (prefix && latestVersion.startsWith(prefix)) {
        latestVersion = latestVersion.substr(prefix.length);
    }
    // remove "v" prefix (if exists)
    if (latestVersion.startsWith("v")) {
        latestVersion = latestVersion.substring(1);
    }
    return { latestVersion, latestTag, isFirstRelease };
}
//# sourceMappingURL=data:application/json;base64,