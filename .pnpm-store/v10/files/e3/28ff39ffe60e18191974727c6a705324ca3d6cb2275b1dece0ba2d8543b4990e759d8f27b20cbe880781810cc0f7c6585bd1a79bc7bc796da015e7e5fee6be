"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const logging_1 = require("./logging");
/**
 * A task that can be performed on the project. Modeled as a series of shell
 * commands and subtasks.
 */
class Task {
    constructor(name, props = {}) {
        this.name = name;
        this._description = props.description;
        this._conditions = props.condition ? [props.condition] : [];
        this._cwd = props.cwd;
        this._locked = false;
        this._env = props.env ?? {};
        this._steps = props.steps ?? [];
        this.requiredEnv = props.requiredEnv;
        if (props.exec && props.steps) {
            throw new Error("cannot specify both exec and steps");
        }
        if (props.exec) {
            this.exec(props.exec, { receiveArgs: props.receiveArgs });
        }
    }
    /**
     * Forbid additional changes to this task.
     */
    lock() {
        this._locked = true;
    }
    /**
     * Returns the working directory for this task.
     */
    get cwd() {
        return this._cwd;
    }
    /**
     * Sets the working directory for this task.
     */
    set cwd(cwd) {
        this._cwd = cwd;
    }
    /**
     * Returns the description of this task.
     */
    get description() {
        return this._description;
    }
    /**
     * Sets the description of this task.
     */
    set description(desc) {
        this._description = desc;
    }
    /**
     * A command to execute which determines if the task should be skipped. If it
     * returns a zero exit code, the task will not be executed.
     */
    get condition() {
        if (this._conditions?.length) {
            return this._conditions.join(" && ");
        }
        return undefined;
    }
    /**
     * Add a command to execute which determines if the task should be skipped.
     *
     * If a condition already exists, the new condition will be appended with ` && ` delimiter.
     * @param condition The command to execute.
     * @see {@link Task.condition}
     */
    addCondition(...condition) {
        this._conditions.push(...condition);
    }
    /**
     * Reset the task so it no longer has any commands.
     * @param command the first command to add to the task after it was cleared.
     */
    reset(command, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("reset");
            return;
        }
        while (this._steps.length) {
            this._steps.shift();
        }
        if (command) {
            this.exec(command, options);
        }
    }
    /**
     * Executes a shell command
     * @param command Shell command
     * @param options Options
     */
    exec(command, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("add exec to");
            return;
        }
        this._steps.push({ exec: command, ...options });
    }
    /**
     * Execute a builtin task.
     *
     * Builtin tasks are programs bundled as part of projen itself and used as
     * helpers for various components.
     *
     * In the future we should support built-in tasks from external modules.
     *
     * @param name The name of the builtin task to execute (e.g.
     * `release/resolve-version`).
     */
    builtin(name) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("add builtin to");
            return;
        }
        this._steps.push({ builtin: name });
    }
    /**
     * Say something.
     * @param message Your message
     * @param options Options
     */
    say(message, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("add say to");
            return;
        }
        this._steps.push({ say: message, ...options });
    }
    /**
     * Adds a command at the beginning of the task.
     * @param shell The command to add.
     *
     * @deprecated use `prependExec()`
     */
    prepend(shell, options = {}) {
        this.assertUnlocked();
        this.prependExec(shell, options);
    }
    /**
     * Spawns a sub-task.
     * @param subtask The subtask to execute.
     */
    spawn(subtask, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("add spawn to");
            return;
        }
        this._steps.push({ spawn: subtask.name, ...options });
    }
    /**
     * Adds a command at the beginning of the task.
     * @param shell The command to add.
     */
    prependExec(shell, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("prependExec to");
            return;
        }
        this._steps.unshift({
            exec: shell,
            ...options,
        });
    }
    /**
     * Adds a spawn instruction at the beginning of the task.
     * @param subtask The subtask to execute.
     */
    prependSpawn(subtask, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("prependSpawn to");
            return;
        }
        this._steps.unshift({
            spawn: subtask.name,
            ...options,
        });
    }
    /**
     * Says something at the beginning of the task.
     * @param message Your message
     */
    prependSay(message, options = {}) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("prependSay to");
            return;
        }
        this._steps.unshift({
            say: message,
            ...options,
        });
    }
    /**
     * Adds an environment variable to this task.
     * @param name The name of the variable
     * @param value The value. If the value is surrounded by `$()`, we will
     * evaluate it within a subshell and use the result as the value of the
     * environment variable.
     */
    env(name, value) {
        this.assertUnlocked();
        this._env[name] = value;
    }
    /**
     * Returns all environment variables in the task level
     */
    get envVars() {
        return this._env;
    }
    /**
     * Returns an immutable copy of all the step specifications of the task.
     */
    get steps() {
        // If the list of steps is a Lazy value, we can't know what the steps
        // are until synthesis occurs, so just return an empty array.
        if (!Array.isArray(this._steps)) {
            return [];
        }
        return [...this._steps];
    }
    /**
     * Insert one or more steps at a given index
     *
     * @param index Steps will be inserted before this index. May be negative to
     * count backwards from the end, or may be `== steps().length` to insert at the end.
     * @param steps The steps to insert
     */
    insertStep(index, ...steps) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("insert steps into");
            return;
        }
        if (index < -this._steps.length || index > this.steps.length) {
            throw new Error(`Cannot insert steps at index ${index} for task ${this.name} because the index is out of bounds for size ${this.steps.length}`);
        }
        this._steps.splice(index, 0, ...steps);
    }
    /**
     *
     * @param index The index of the step to edit
     * @param step The new step to replace the old one entirely, it is not merged with the old step
     */
    updateStep(index, step) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("update step for");
            return;
        }
        const existingStep = this._steps[index];
        if (!existingStep) {
            throw new Error(`Cannot update step at index ${index} for task ${this.name} because it does not exist`);
        }
        this._steps[index] = step;
    }
    /**
     *
     * @param index The index of the step to remove
     */
    removeStep(index) {
        this.assertUnlocked();
        if (!Array.isArray(this._steps)) {
            this.warnForLazyValue("remove step from");
            return;
        }
        const existingStep = this._steps[index];
        if (!existingStep) {
            throw new Error(`Cannot remove step at index ${index} for task ${this.name} because it does not exist`);
        }
        this._steps.splice(index, 1);
    }
    /**
     * Renders a task spec into the manifest.
     *
     * @internal
     */
    _renderSpec() {
        // Ensure task-level env vars are strings
        const env = Object.keys(this._env).reduce((prev, curr) => ({
            ...prev,
            [curr]: this.getEnvString(curr, this._env[curr]),
        }), {});
        // Ensure step-level env vars are strings
        const steps = Array.isArray(this._steps)
            ? [...this._steps].map((s) => {
                return s.env
                    ? {
                        ...s,
                        env: Object.keys(s.env).reduce((prev, curr) => ({
                            ...prev,
                            [curr]: this.getEnvString(curr, s.env[curr]),
                        }), {}),
                    }
                    : s;
            })
            : this._steps;
        return {
            name: this.name,
            description: this.description,
            env: env,
            requiredEnv: this.requiredEnv,
            steps: steps,
            condition: this.condition,
            cwd: this._cwd,
        };
    }
    assertUnlocked() {
        if (this._locked) {
            throw new Error(`Task "${this.name}" is locked for changes`);
        }
    }
    warnForLazyValue(actionBeingUndertaken) {
        (0, logging_1.warn)(`Cannot ${actionBeingUndertaken} task "${this.name}" because it is a lazy value, try using the preSynthesize phase.`);
    }
    /**
     * Ensure that environment variables are persisted as strings
     * to prevent type errors when parsing from tasks.json in future
     */
    getEnvString(name, value) {
        if (typeof value !== "string" && value !== undefined) {
            (0, logging_1.warn)(`Received non-string value for environment variable ${name}. Value will be stringified.`);
            return String(value);
        }
        else {
            return value;
        }
    }
}
exports.Task = Task;
_a = JSII_RTTI_SYMBOL_1;
Task[_a] = { fqn: "projen.Task", version: "0.95.4" };
//# sourceMappingURL=data:application/json;base64,