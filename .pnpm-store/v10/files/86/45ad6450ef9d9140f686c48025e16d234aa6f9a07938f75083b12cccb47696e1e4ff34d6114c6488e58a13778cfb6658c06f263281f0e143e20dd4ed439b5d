"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomResourceNode = exports.ResourceNode = exports.CfnResourceNode = exports.ImageNode = exports.Node = void 0;
const startCase = require("lodash.startcase"); // eslint-disable-line @typescript-eslint/no-require-imports
const words = require("lodash.words"); // eslint-disable-line @typescript-eslint/no-require-imports
const Dot = require("ts-graphviz");
const wordWrap = require("word-wrap"); // eslint-disable-line @typescript-eslint/no-require-imports
const resource_images_1 = require("../../utils/resource-images");
const theme_1 = require("../theme");
/** Diagram label line height */
const LABEL_LINE_HEIGHT = 0.23;
/** Diagram label line max chars */
const LABEL_LINE_MAX_CHARS = 15;
/** Diagram label max number of lines */
const LABEL_MAX_LINES = 5;
/** Marshalls a label to contain length, output multi-line, etc for better rendering */
function marshallLabelForRendering(original) {
    let label = words(original).join(" ");
    label = wordWrap(label, {
        width: LABEL_LINE_MAX_CHARS,
        trim: true,
        indent: "",
    });
    const splitLabel = label.split("\n");
    const lines = splitLabel.slice(0, LABEL_MAX_LINES);
    // Ellipse last line if dropped lines
    if (splitLabel.length > lines.length) {
        lines[lines.length - 1] = lines[lines.length - 1] + "...";
    }
    label = lines
        .map((line) => {
        line = startCase(line).replace(/ /g, "");
        if (line.length > LABEL_LINE_MAX_CHARS) {
            return line.substring(0, LABEL_LINE_MAX_CHARS) + "...";
        }
        return line;
    })
        .join("\n");
    return { original, label, lines: lines.length };
}
/**
 * Node class defines a {@link Graph.Node} based diagram {@link Dot.Node}
 * @internal
 */
class Node extends Dot.Node {
    /** Get the label attribute for this node */
    get label() {
        return this.attributes.get("label");
    }
    set position(pos) {
        this.attributes.set("pos", `${pos.x},${pos.y}!`);
    }
    /** @internal */
    constructor(node) {
        super(`node_${node.uuid}`);
        this.graphNode = node;
        this.attributes.set("label", marshallLabelForRendering(node.id).label);
        this.attributes.set("comment", `nodeType:${node.nodeType}` + (node.cfnType ? `(${node.cfnType})` : ""));
    }
}
exports.Node = Node;
/**
 * ImageNode class extends {@link Node} with support for rendering diagram images.
 * @internal
 */
class ImageNode extends Node {
    /** @internal */
    constructor(node, image) {
        super(node);
        // If image not defined, treat as regular node
        if (image) {
            this.attributes.apply(theme_1.GraphTheme.instance.imageNode);
            this.attributes.set("image", image);
            this.resize();
        }
    }
    /** Get `image` attribute */
    get image() {
        return this.attributes.get("image");
    }
    /** Resizes the node based on image and label dimensions */
    resize(baseHeight) {
        if (baseHeight == null) {
            baseHeight = (this.attributes.get("height") || 1);
        }
        const image = this.image;
        if (image) {
            const labelLines = this.label.split("\n").length;
            this.attributes.set("labelloc", "b");
            this.attributes.set("height", baseHeight + labelLines * LABEL_LINE_HEIGHT);
        }
        else {
            this.attributes.set("labelloc", "c");
            this.attributes.set("penwidth", 0.25);
            this.attributes.set("height", baseHeight);
        }
    }
}
exports.ImageNode = ImageNode;
/**
 * CfnResourceNode class defines a {@link Dot.Node} based on a {@link Graph.CfnResourceNode}
 * @internal
 */
class CfnResourceNode extends ImageNode {
    /** @internal */
    constructor(node) {
        super(node, (0, resource_images_1.resolveCfnResourceImage)(node));
        this.attributes.apply(theme_1.GraphTheme.instance.cfnResourceNode);
        this.resize(theme_1.GraphTheme.instance.cfnResourceNode.height === ""
            ? undefined
            : theme_1.GraphTheme.instance.cfnResourceNode.height);
        if (node.isImport) {
            this.attributes.apply({
                style: "filled,dotted",
                penwidth: 1,
                fontcolor: (theme_1.GraphTheme.instance.awsTheme?.text.tertiary ||
                    "#55555"),
                color: ((theme_1.GraphTheme.instance.awsTheme?.text.tertiary || "#55555") +
                    "33"), // 20%
                fillcolor: ((theme_1.GraphTheme.instance.awsTheme?.text.tertiary || "#55555") +
                    "1A"), // 10%
            });
        }
    }
}
exports.CfnResourceNode = CfnResourceNode;
/**
 * ResourceNode class defines a {@link Dot.Node} based on a {@link Graph.ResourceNode}
 * @internal
 */
class ResourceNode extends ImageNode {
    /** @internal */
    constructor(node) {
        const image = (0, resource_images_1.resolveResourceImage)(node);
        super(node, image);
        this.attributes.apply(theme_1.GraphTheme.instance.resourceNode);
        this.resize(theme_1.GraphTheme.instance.resourceNode.height === ""
            ? undefined
            : theme_1.GraphTheme.instance.resourceNode.height);
    }
}
exports.ResourceNode = ResourceNode;
/**
 * CustomResourceNode class defines a {@link Dot.Node} based on a {@link Graph.Node} for a *custom resource*
 * @internal
 */
class CustomResourceNode extends ImageNode {
    /** @internal */
    constructor(node) {
        super(node, (0, resource_images_1.resolveCustomResourceImage)(node));
    }
}
exports.CustomResourceNode = CustomResourceNode;
//# sourceMappingURL=data:application/json;base64,