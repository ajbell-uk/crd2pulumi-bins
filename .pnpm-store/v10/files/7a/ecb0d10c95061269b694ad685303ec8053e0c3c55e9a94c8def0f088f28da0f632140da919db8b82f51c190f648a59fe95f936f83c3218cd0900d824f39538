"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Eslint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const prettier_1 = require("./prettier");
const common_1 = require("../common");
const component_1 = require("../component");
const json_1 = require("../json");
const yaml_1 = require("../yaml");
/**
 * Represents eslint configuration.
 */
class Eslint extends component_1.Component {
    /**
     * Returns the singleton Eslint component of a project or undefined if there is none.
     */
    static of(project) {
        const isEslint = (c) => c instanceof Eslint;
        return project.components.find(isEslint);
    }
    constructor(project, options) {
        super(project);
        /**
         * eslint overrides.
         */
        this.overrides = [];
        this._plugins = new Set();
        this._extends = new Set();
        this.nodeProject = project;
        project.addDevDeps("eslint@^9", "@typescript-eslint/eslint-plugin@^8", "@typescript-eslint/parser@^8", "eslint-import-resolver-typescript", "eslint-plugin-import");
        if (options.aliasMap) {
            project.addDevDeps("eslint-import-resolver-alias");
        }
        const lintProjenRc = options.lintProjenRc ?? true;
        const lintProjenRcFile = options.lintProjenRcFile ?? common_1.DEFAULT_PROJEN_RC_JS_FILENAME;
        const devdirs = options.devdirs ?? [];
        this._lintPatterns = new Set([
            ...options.dirs,
            ...devdirs,
            ...(lintProjenRc && lintProjenRcFile ? [lintProjenRcFile] : []),
        ]);
        this._fileExtensions = new Set(options.fileExtensions ?? [".ts"]);
        this._allowDevDeps = new Set((devdirs ?? []).map((dir) => `**/${dir}/**`));
        const commandOptions = options.commandOptions ?? {};
        const { fix = true, extraArgs: extraFlagArgs = [] } = commandOptions;
        this._flagArgs = new Set(extraFlagArgs);
        if (fix) {
            this._flagArgs.add("--fix");
        }
        this._flagArgs.add("--no-error-on-unmatched-pattern");
        this.sortExtends = options.sortExtends ?? new ExtendsDefaultOrder();
        this.eslintTask = project.addTask("eslint", {
            description: "Runs eslint against the codebase",
            env: {
                ESLINT_USE_FLAT_CONFIG: "false",
            },
        });
        this.updateTask();
        project.testTask.spawn(this.eslintTask);
        // exclude some files
        project.npmignore?.exclude("/.eslintrc.json");
        this._formattingRules = {
            // Style
            "@stylistic/indent": ["error", 2],
            "@stylistic/quotes": ["error", "single", { avoidEscape: true }],
            "@stylistic/comma-dangle": ["error", "always-multiline"], // ensures clean diffs, see https://medium.com/@nikgraf/why-you-should-enforce-dangling-commas-for-multiline-statements-d034c98e36f8
            "@stylistic/comma-spacing": ["error", { before: false, after: true }], // space after, no space before
            "@stylistic/no-multi-spaces": ["error", { ignoreEOLComments: false }], // no multi spaces
            "@stylistic/array-bracket-spacing": ["error", "never"], // [1, 2, 3]
            "@stylistic/array-bracket-newline": ["error", "consistent"], // enforce consistent line breaks between brackets
            "@stylistic/object-curly-spacing": ["error", "always"], // { key: 'value' }
            "@stylistic/object-curly-newline": [
                "error",
                { multiline: true, consistent: true },
            ], // enforce consistent line breaks between braces
            "@stylistic/object-property-newline": [
                "error",
                { allowAllPropertiesOnSameLine: true },
            ], // enforce "same line" or "multiple line" on object properties
            "@stylistic/keyword-spacing": ["error"], // require a space before & after keywords
            "@stylistic/brace-style": ["error", "1tbs", { allowSingleLine: true }], // enforce one true brace style
            "@stylistic/space-before-blocks": ["error"], // require space before blocks
            // @see https://github.com/typescript-eslint/typescript-eslint/issues/8072
            "@stylistic/member-delimiter-style": ["error"],
            // Require semicolons
            "@stylistic/semi": ["error", "always"],
            // Max line lengths
            "@stylistic/max-len": [
                "error",
                {
                    code: 150,
                    ignoreUrls: true, // Most common reason to disable it
                    ignoreStrings: true, // These are not fantastic but necessary for error messages
                    ignoreTemplateLiterals: true,
                    ignoreComments: true,
                    ignoreRegExpLiterals: true,
                },
            ],
            // Don't unnecessarily quote properties
            "@stylistic/quote-props": ["error", "consistent-as-needed"],
            // Required spacing in property declarations (copied from TSLint, defaults are good)
            "@stylistic/key-spacing": ["error"],
            // No multiple empty lines
            "@stylistic/no-multiple-empty-lines": ["error"],
            // Useless diff results
            "@stylistic/no-trailing-spaces": ["error"],
        };
        this.rules = {
            // require curly braces for multiline control statements
            curly: ["error", "multi-line", "consistent"],
            // Require use of the `import { foo } from 'bar';` form instead of `import foo = require('bar');`
            "@typescript-eslint/no-require-imports": "error",
            // Require all imported dependencies are actually declared in package.json
            "import/no-extraneous-dependencies": [
                "error",
                {
                    // Only allow importing devDependencies from "devdirs".
                    devDependencies: () => this.renderDevDepsAllowList(),
                    optionalDependencies: false, // Disallow importing optional dependencies (those shouldn't be in use in the project)
                    peerDependencies: true, // Allow importing peer dependencies (that aren't also direct dependencies)
                },
            ],
            // Require all imported libraries actually resolve (!!required for import/no-extraneous-dependencies to work!!)
            "import/no-unresolved": ["error"],
            // Require an ordering on all imports
            "import/order": [
                "warn",
                {
                    groups: ["builtin", "external"],
                    alphabetize: { order: "asc", caseInsensitive: true },
                },
            ],
            // Cannot import from the same module twice
            "import/no-duplicates": ["error"],
            // Cannot shadow names
            "no-shadow": ["off"],
            "@typescript-eslint/no-shadow": "error",
            // One of the easiest mistakes to make
            "@typescript-eslint/no-floating-promises": "error",
            // Make sure that inside try/catch blocks, promises are 'return await'ed
            // (must disable the base rule as it can report incorrect errors)
            "no-return-await": ["off"],
            "@typescript-eslint/return-await": "error",
            // Must use foo.bar instead of foo['bar'] if possible
            "dot-notation": ["error"],
            // Are you sure | is not a typo for || ?
            "no-bitwise": ["error"],
            // Member ordering
            "@typescript-eslint/member-ordering": [
                "error",
                {
                    default: [
                        "public-static-field",
                        "public-static-method",
                        "protected-static-field",
                        "protected-static-method",
                        "private-static-field",
                        "private-static-method",
                        "field",
                        // Constructors
                        "constructor", // = ["public-constructor", "protected-constructor", "private-constructor"]
                        // Methods
                        "method",
                    ],
                },
            ],
        };
        // Overrides for .projenrc.js
        // @deprecated
        if (lintProjenRc) {
            this.overrides = [
                {
                    files: [lintProjenRcFile || common_1.DEFAULT_PROJEN_RC_JS_FILENAME],
                    rules: {
                        "@typescript-eslint/no-require-imports": "off",
                        "import/no-extraneous-dependencies": "off",
                    },
                },
            ];
        }
        this.ignorePatterns = options.ignorePatterns ?? [
            "*.js",
            // @deprecated
            ...(lintProjenRc
                ? [`!${lintProjenRcFile || common_1.DEFAULT_PROJEN_RC_JS_FILENAME}`]
                : []),
            "*.d.ts",
            "node_modules/",
            "*.generated.ts",
            "coverage",
        ];
        const tsconfig = options.tsconfigPath ?? "./tsconfig.json";
        this.addPlugins("@typescript-eslint");
        this.addPlugins("import");
        this.addExtends("plugin:import/typescript");
        this.config = {
            env: {
                jest: true,
                node: true,
            },
            root: true,
            plugins: this._plugins,
            parser: "@typescript-eslint/parser",
            parserOptions: {
                ecmaVersion: 2018,
                sourceType: "module",
                project: tsconfig,
            },
            extends: () => Array.from(this._extends).sort((a, b) => this.sortExtends.compare(a, b)),
            settings: {
                "import/parsers": {
                    "@typescript-eslint/parser": [".ts", ".tsx"],
                },
                "import/resolver": {
                    ...(options.aliasMap && {
                        alias: {
                            map: Object.entries(options.aliasMap).map(([k, v]) => [k, v]),
                            extensions: options.aliasExtensions,
                        },
                    }),
                    node: {},
                    typescript: {
                        project: tsconfig,
                        ...(options.tsAlwaysTryTypes !== false && { alwaysTryTypes: true }),
                    },
                },
            },
            ignorePatterns: this.ignorePatterns,
            rules: () => ({ ...this._formattingRules, ...this.rules }),
            overrides: this.overrides,
        };
        if (options.yaml) {
            this.file = new yaml_1.YamlFile(project, ".eslintrc.yml", {
                obj: this.config,
                marker: true,
            });
        }
        else {
            this.file = new json_1.JsonFile(project, ".eslintrc.json", {
                obj: this.config,
                // https://eslint.org/docs/latest/user-guide/configuring/configuration-files#comments-in-configuration-files
                marker: true,
                allowComments: true,
            });
        }
        // if the user enabled prettier explicitly _or_ if the project has a
        // `Prettier` component, we shall tweak our configuration accordingly.
        if (options.prettier || prettier_1.Prettier.of(project)) {
            this.enablePrettier();
        }
        else {
            this.nodeProject.addDevDeps("@stylistic/eslint-plugin@^2");
            this.addPlugins("@stylistic");
        }
    }
    /**
     * Returns an immutable copy of the lintPatterns being used by this eslint configuration.
     */
    get lintPatterns() {
        if (this._lintPatterns && this._lintPatterns.size > 0) {
            return [...this._lintPatterns];
        }
        return [];
    }
    /**
     * Add a file, glob pattern or directory with source files to lint (e.g. [ "src" ])
     */
    addLintPattern(pattern) {
        this._lintPatterns.add(pattern);
        this.updateTask();
    }
    /**
     * Add an eslint rule.
     */
    addRules(rules) {
        for (const [k, v] of Object.entries(rules)) {
            this.rules[k] = v;
        }
    }
    /**
     * Adds an eslint plugin
     * @param plugins The names of plugins to add
     */
    addPlugins(...plugins) {
        for (const plugin of plugins) {
            this._plugins.add(plugin);
        }
    }
    /**
     * Add an eslint override.
     */
    addOverride(override) {
        this.overrides.push(override);
    }
    /**
     * Do not lint these files.
     */
    addIgnorePattern(pattern) {
        this.ignorePatterns.push(pattern);
    }
    /**
     * Adds an `extends` item to the eslint configuration.
     * @param extendList The list of "extends" to add.
     */
    addExtends(...extendList) {
        for (const extend of extendList) {
            this._extends.add(extend);
        }
    }
    /**
     * Add a glob file pattern which allows importing dev dependencies.
     * @param pattern glob pattern.
     */
    allowDevDeps(pattern) {
        this._allowDevDeps.add(pattern);
    }
    /**
     * Enables prettier for code formatting.
     */
    enablePrettier() {
        this.nodeProject.addDevDeps("prettier", "eslint-plugin-prettier", "eslint-config-prettier");
        this._formattingRules = {};
        this.addExtends("plugin:prettier/recommended");
    }
    renderDevDepsAllowList() {
        return Array.from(this._allowDevDeps);
    }
    /**
     * Update the task with the current list of lint patterns and file extensions
     */
    updateTask() {
        const taskExecCommand = "eslint";
        const argsSet = new Set();
        if (this._fileExtensions.size > 0) {
            argsSet.add(`--ext ${[...this._fileExtensions].join(",")}`);
        }
        argsSet.add(`${[...this._flagArgs].join(" ")}`);
        argsSet.add("$@"); // External args go here
        for (const pattern of this._lintPatterns) {
            argsSet.add(pattern);
        }
        this.eslintTask.reset([taskExecCommand, ...argsSet].join(" "), this.buildTaskStepOptions(taskExecCommand));
    }
    /**
     * In case of external editing of the eslint task step, we preserve those changes.
     * Otherwise, we return the default task step options.
     *
     * @param taskExecCommand The command that the ESLint tasks executes
     * @returns Either the externally edited, or the default task step options
     */
    buildTaskStepOptions(taskExecCommand) {
        const currentEslintTaskStep = this.eslintTask?.steps?.find((step) => step?.exec?.startsWith?.(taskExecCommand));
        if (currentEslintTaskStep) {
            const { args, condition, cwd, env, name, receiveArgs } = currentEslintTaskStep;
            return {
                args,
                condition,
                cwd,
                env,
                name,
                receiveArgs,
            };
        }
        return {
            receiveArgs: true,
        };
    }
}
exports.Eslint = Eslint;
_a = JSII_RTTI_SYMBOL_1;
Eslint[_a] = { fqn: "projen.javascript.Eslint", version: "0.95.4" };
/**
 * A compare protocol tp sort the extends array in eslint config using known ESLint best practices.
 *
 * Places "prettier" plugins at the end of the array
 */
class ExtendsDefaultOrder {
    compare(a, b) {
        return (ExtendsDefaultOrder.ORDER.indexOf(a) -
            ExtendsDefaultOrder.ORDER.indexOf(b));
    }
}
// This is the order that ESLint best practices suggest
ExtendsDefaultOrder.ORDER = ["plugin:prettier/recommended", "prettier"];
//# sourceMappingURL=data:application/json;base64,