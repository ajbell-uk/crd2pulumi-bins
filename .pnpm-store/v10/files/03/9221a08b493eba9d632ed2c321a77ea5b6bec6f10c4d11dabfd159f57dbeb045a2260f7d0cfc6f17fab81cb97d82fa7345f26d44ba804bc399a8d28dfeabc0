"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PDKPipelineWithCodeConnection = exports.PDKPipeline = exports.DEFAULT_BRANCH_NAME = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codecommit_1 = require("aws-cdk-lib/aws-codecommit");
const aws_codepipeline_1 = require("aws-cdk-lib/aws-codepipeline");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const pipelines_1 = require("aws-cdk-lib/pipelines");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const sonar_code_scanner_1 = require("./code_scanner/sonar-code-scanner");
const feature_branches_1 = require("./feature-branches");
__exportStar(require("./code_scanner/sonar-code-scanner"), exports);
exports.DEFAULT_BRANCH_NAME = "mainline";
/**
 * An extension to CodePipeline which configures sane defaults for a NX Monorepo
 * codebase. In addition to this, it also creates a CodeCommit repository with
 * automated PR builds and approvals.
 */
class BasePDKPipeline extends constructs_1.Construct {
    /**
     * A helper function to normalize the branch name with only alphanumeric characters and hypens ('-').
     * @param branchName The name of the branch to normalize.
     * @returns The normalized branch name.
     */
    static normalizeBranchName(branchName) {
        return branchName.replace(/[^a-zA-Z0-9-]/g, "-");
    }
    /**
     * A helper function to determine if the current branch is the default branch.
     *
     * If there is no BRANCH environment variable, then assume this is the default
     * branch. Otherwise, check that BRANCH matches the default branch name.
     *
     * The default branch name is determined in the following priority:
     *
     * 1. defaultBranchName property
     * 2. defaultBranchName context
     * 3. PDKPipeline.defaultBranchName constant
     *
     * @param props? {
     *    defaultBranchName? Specify the default branch name without context.
     *    node? The current app to fetch defaultBranchName from context.
     * }
     * @returns True if the current branch is the default branch.
     */
    static isDefaultBranch(props = {
        defaultBranchName: undefined,
        node: undefined,
    }) {
        if (!process.env.BRANCH) {
            return true;
        }
        const defaultBranchName = props.defaultBranchName ||
            (props.node && props.node.tryGetContext("defaultBranchName")) ||
            BasePDKPipeline.defaultBranchName;
        return defaultBranchName === process.env.BRANCH;
    }
    /**
     * A helper function to create a branch prefix. The prefix is empty on the default branch.
     * @param props? {
     *    defaultBranchName? Specify the default branch name without context.
     *    node? The current app to fetch defaultBranchName from context.
     * }
     * @returns The branch prefix.
     */
    static getBranchPrefix(props = {
        defaultBranchName: undefined,
        node: undefined,
    }) {
        return BasePDKPipeline.isDefaultBranch(props)
            ? ""
            : BasePDKPipeline.normalizeBranchName(process.env.BRANCH) + "-";
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.node.setContext("@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy", true);
        let source;
        const branch = process.env.BRANCH || props.defaultBranchName || exports.DEFAULT_BRANCH_NAME;
        if (props.useCodeCommit) {
            let codeRepository;
            const repositoryName = props.repositoryName || "";
            if (BasePDKPipeline.isDefaultBranch({
                node: this.node,
                defaultBranchName: props.defaultBranchName,
            })) {
                // In the default branch, create a CodeCommit repository
                codeRepository = new aws_codecommit_1.Repository(this, "CodeRepository", {
                    repositoryName,
                });
                codeRepository.applyRemovalPolicy(props.codeCommitRemovalPolicy ?? aws_cdk_lib_1.RemovalPolicy.RETAIN);
            }
            else {
                // In a non-default branch, use an existing CodeCommit repository
                codeRepository = aws_codecommit_1.Repository.fromRepositoryName(scope, "CodeRepository", repositoryName);
            }
            source = pipelines_1.CodePipelineSource.codeCommit(codeRepository, branch);
            this.codeRepository = codeRepository;
        }
        else {
            const repositoryOwnerAndName = props.repositoryOwnerAndName || "";
            const codeConnectionArn = props.codeConnectionArn || "";
            source = pipelines_1.CodePipelineSource.connection(repositoryOwnerAndName, props.defaultBranchName || exports.DEFAULT_BRANCH_NAME, {
                connectionArn: codeConnectionArn,
            });
        }
        const accessLogsBucket = new aws_s3_1.Bucket(this, "AccessLogsBucket", {
            versioned: false,
            enforceSSL: true,
            autoDeleteObjects: true,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            encryption: aws_s3_1.BucketEncryption.S3_MANAGED,
            objectOwnership: aws_s3_1.ObjectOwnership.OBJECT_WRITER,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
        });
        const artifactBucket = new aws_s3_1.Bucket(this, "ArtifactsBucket", {
            enforceSSL: true,
            autoDeleteObjects: true,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            encryption: props.crossAccountKeys
                ? aws_s3_1.BucketEncryption.KMS
                : aws_s3_1.BucketEncryption.S3_MANAGED,
            encryptionKey: props.crossAccountKeys
                ? new aws_kms_1.Key(this, "ArtifactKey", {
                    enableKeyRotation: true,
                    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                })
                : undefined,
            objectOwnership: aws_s3_1.ObjectOwnership.BUCKET_OWNER_ENFORCED,
            publicReadAccess: false,
            blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            serverAccessLogsPrefix: "access-logs",
            serverAccessLogsBucket: accessLogsBucket,
        });
        const codePipeline = new aws_codepipeline_1.Pipeline(this, "CodePipeline", {
            enableKeyRotation: props.crossAccountKeys,
            restartExecutionOnUpdate: true,
            crossAccountKeys: props.crossAccountKeys,
            artifactBucket,
            pipelineType: aws_codepipeline_1.PipelineType.V1,
        });
        const { input, primaryOutputDirectory, commands, ...synthShellStepPartialProps } = props.synthShellStepPartialProps || {};
        const synthShellStep = new pipelines_1.ShellStep("Synth", {
            input: source,
            env: props.branchNamePrefixes && props.branchNamePrefixes.length > 0
                ? {
                    BRANCH: branch,
                }
                : undefined,
            installCommands: ["npm install -g aws-cdk pnpm", "npx projen install"],
            commands: commands && commands.length > 0 ? commands : ["npx projen build"],
            primaryOutputDirectory: props.primarySynthDirectory,
            ...(synthShellStepPartialProps || {}),
        });
        synthShellStep.addOutputDirectory(".");
        const codePipelineProps = {
            codePipeline,
            ...props,
            crossAccountKeys: undefined,
            synth: synthShellStep,
        };
        this.codePipeline = new pipelines_1.CodePipeline(this, id, codePipelineProps);
        this.sonarCodeScannerConfig = props.sonarCodeScannerConfig
            ? {
                cdkOutDir: props.primarySynthDirectory,
                ...props.sonarCodeScannerConfig,
            }
            : undefined;
        this.branchNamePrefixes = props.branchNamePrefixes;
        this.defaultBranchName = props.defaultBranchName;
        this.repositoryName =
            (props.useCodeCommit
                ? props.repositoryName
                : props.repositoryOwnerAndName) || "";
        if (this.codeRepository && props.branchNamePrefixes) {
            if (PDKPipeline.isDefaultBranch({
                node: this.node,
                defaultBranchName: props.defaultBranchName,
            })) {
                new feature_branches_1.FeatureBranches(this, "FeatureBranchPipelines", {
                    codeRepository: this.codeRepository,
                    cdkSrcDir: props.cdkSrcDir || path.dirname(props.primarySynthDirectory),
                    synthShellStepPartialProps: props.synthShellStepPartialProps,
                    cdkCommand: props.cdkCommand,
                    branchNamePrefixes: props.branchNamePrefixes,
                    defaultBranchName: props.defaultBranchName || exports.DEFAULT_BRANCH_NAME,
                    codeBuildDefaults: props.codeBuildDefaults,
                    dockerEnabledForSynth: props.dockerEnabledForSynth,
                });
            }
            else {
                aws_cdk_lib_1.Tags.of(aws_cdk_lib_1.Stack.of(this)).add("FeatureBranch", branch);
                aws_cdk_lib_1.Tags.of(aws_cdk_lib_1.Stack.of(this)).add("RepoName", this.repositoryName);
            }
        }
        if (props.useCodeCommit && this.codeRepository) {
            new aws_cdk_lib_1.CfnOutput(this, "CodeRepositoryGRCUrl", {
                value: this.codeRepository.repositoryCloneUrlGrc,
            });
        }
    }
    /**
     * @inheritDoc
     */
    addStage(stage, options) {
        if (this.branchNamePrefixes &&
            !PDKPipeline.isDefaultBranch({
                node: stage.node,
                defaultBranchName: this.defaultBranchName,
            })) {
            aws_cdk_lib_1.Tags.of(stage).add("FeatureBranch", process.env.BRANCH);
            aws_cdk_lib_1.Tags.of(stage).add("RepoName", this.repositoryName);
        }
        // Add any root Aspects to the stage level as currently this doesn't happen automatically
        aws_cdk_lib_1.Aspects.of(stage.node.root).all.forEach((aspect) => aws_cdk_lib_1.Aspects.of(stage).add(aspect));
        return this.codePipeline.addStage(stage, options);
    }
    buildPipeline() {
        this.codePipeline.buildPipeline();
        this.sonarCodeScannerConfig &&
            new sonar_code_scanner_1.SonarCodeScanner(this, "SonarCodeScanner", {
                artifactBucketArn: this.codePipeline.pipeline.artifactBucket.bucketArn,
                artifactBucketKeyArn: this.codePipeline.pipeline.artifactBucket.encryptionKey?.keyArn,
                synthBuildArn: this.codePipeline.synthProject.projectArn,
                ...this.sonarCodeScannerConfig,
            });
        this.suppressCDKViolations();
    }
    suppressCDKViolations() {
        this.suppressRules(["AwsSolutions-IAM5", "AwsPrototyping-IAMNoWildcardPermissions"], "Wildcards are needed for dynamically created resources.");
        this.suppressRules([
            "AwsSolutions-CB4",
            "AwsPrototyping-CodeBuildProjectKMSEncryptedArtifacts",
        ], "Encryption of Codebuild is not required.");
        this.suppressRules(["AwsSolutions-S1", "AwsPrototyping-S3BucketLoggingEnabled"], "Access Log buckets should not have s3 bucket logging");
    }
    suppressRules(rules, reason) {
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this, rules.map((r) => ({
            id: r,
            reason,
        })), true);
    }
}
BasePDKPipeline.ALL_BRANCHES = [""];
BasePDKPipeline.defaultBranchName = exports.DEFAULT_BRANCH_NAME;
/**
 * An extension to CodePipeline which configures same defaults for a NX Monorepo
 * codebase. In addition to this, it also creates a CodeCommit repository with
 * automated PR builds and approvals.
 */
class PDKPipeline extends BasePDKPipeline {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            useCodeCommit: true,
            codeConnectionArn: undefined,
            repositoryOwnerAndName: undefined,
        });
    }
}
exports.PDKPipeline = PDKPipeline;
_a = JSII_RTTI_SYMBOL_1;
PDKPipeline[_a] = { fqn: "@aws/pdk.pipeline.PDKPipeline", version: "0.26.14" };
/**
 * An extension to CodePipeline which configures same defaults for a NX Monorepo and using a AWS CodeConnections as source.
 */
class PDKPipelineWithCodeConnection extends BasePDKPipeline {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            useCodeCommit: false,
        });
    }
}
exports.PDKPipelineWithCodeConnection = PDKPipelineWithCodeConnection;
_b = JSII_RTTI_SYMBOL_1;
PDKPipelineWithCodeConnection[_b] = { fqn: "@aws/pdk.pipeline.PDKPipelineWithCodeConnection", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,