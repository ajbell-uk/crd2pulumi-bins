"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeVersionUtils = void 0;
const languages_1 = require("../languages");
/**
 * Utilities for java runtime versions
 */
class JavaRuntimeVersionUtils {
}
/**
 * Get the maven compile options for the given java runtime
 */
JavaRuntimeVersionUtils.getMavenCompileOptions = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.JavaVersion.JAVA_21:
            return { source: "21", target: "21" };
        case languages_1.JavaVersion.JAVA_17:
            return { source: "17", target: "17" };
        case languages_1.JavaVersion.JAVA_11:
            return { source: "11", target: "11" };
        case languages_1.JavaVersion.JAVA_8:
        case undefined: // For backwards compatibility the default source and compile target version is Java 8, running on the Java 17 runtime
            return { source: "1.8", target: "1.8" };
        default:
            throw new Error(`Unsupported runtime version ${runtimeVersion}`);
    }
};
/**
 * Return the CDK lambda runtime constant for the given java version
 * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.Runtime.html
 */
JavaRuntimeVersionUtils.getLambdaRuntime = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.JavaVersion.JAVA_8:
            return "JAVA_8_CORRETTO";
        case languages_1.JavaVersion.JAVA_11:
            return "JAVA_11";
        case languages_1.JavaVersion.JAVA_17:
            return "JAVA_17";
        case languages_1.JavaVersion.JAVA_21:
            return "JAVA_21";
        default:
            throw new Error(`Unsupported java runtime ${runtimeVersion}`);
    }
};
/**
 * Utilities for node runtime versions
 */
class NodeRuntimeVersionUtils {
}
/**
 * Return the CDK lambda runtime constant for the given node version
 * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.Runtime.html
 */
NodeRuntimeVersionUtils.getLambdaRuntime = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.NodeVersion.NODE_18:
            return "NODEJS_18_X";
        case languages_1.NodeVersion.NODE_20:
            return "NODEJS_20_X";
        case languages_1.NodeVersion.NODE_22:
            return "NODEJS_22_X";
        default:
            throw new Error(`Unsupported node runtime ${runtimeVersion}`);
    }
};
/**
 * Return the target node version for esbuild
 * @see https://esbuild.github.io/api/#target
 */
NodeRuntimeVersionUtils.getEsbuildNodeTarget = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.NodeVersion.NODE_22:
            return "node22";
        case languages_1.NodeVersion.NODE_20:
            return "node20";
        case languages_1.NodeVersion.NODE_18:
            return "node18";
        default:
            throw new Error(`Unsupported node runtime ${runtimeVersion}`);
    }
};
/**
 * Utilities for python runtime versions
 */
class PythonRuntimeVersionUtils {
}
/**
 * Return the CDK lambda runtime constant for the given python version
 * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_lambda.Runtime.html
 */
PythonRuntimeVersionUtils.getLambdaRuntime = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.PythonVersion.PYTHON_3_11:
            return "PYTHON_3_11";
        case languages_1.PythonVersion.PYTHON_3_12:
            return "PYTHON_3_12";
        case languages_1.PythonVersion.PYTHON_3_13:
            return "PYTHON_3_13";
        default:
            throw new Error(`Unsupported python runtime ${runtimeVersion}`);
    }
};
/**
 * Return the version string used for a dependency on python
 */
PythonRuntimeVersionUtils.getPythonDependencyVersion = (runtimeVersion) => {
    return `python@^${PythonRuntimeVersionUtils.getPythonVersionString(runtimeVersion)}`;
};
/**
 * Return the version string used for packaging python lambdas with pip
 */
PythonRuntimeVersionUtils.getPipPackagingPythonVersion = (runtimeVersion) => {
    return PythonRuntimeVersionUtils.getPythonVersionString(runtimeVersion);
};
/**
 * Return the version string for python
 */
PythonRuntimeVersionUtils.getPythonVersionString = (runtimeVersion) => {
    switch (runtimeVersion) {
        case languages_1.PythonVersion.PYTHON_3_13:
            return "3.13";
        case languages_1.PythonVersion.PYTHON_3_12:
            return "3.12";
        case languages_1.PythonVersion.PYTHON_3_11:
            return "3.11";
        default:
            throw new Error(`Unsupported python runtime ${runtimeVersion}`);
    }
};
/**
 * A collection of utilities for runtime versions.
 */
class RuntimeVersionUtils {
}
exports.RuntimeVersionUtils = RuntimeVersionUtils;
/**
 * Java utilities
 */
RuntimeVersionUtils.JAVA = JavaRuntimeVersionUtils;
/**
 * Node utilities
 */
RuntimeVersionUtils.NODE = NodeRuntimeVersionUtils;
/**
 * Python utilities
 */
RuntimeVersionUtils.PYTHON = PythonRuntimeVersionUtils;
//# sourceMappingURL=data:application/json;base64,