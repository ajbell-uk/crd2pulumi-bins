<%_ models.forEach((model) => { _%>
###TSAPI_WRITE_FILE###
{
  "id": "<%= model.name %>",
  "dir": "<%= metadata.srcDir || 'src' %>/models",
  "name": "<%= model.name %>",
  "ext": ".ts",
  "overwrite": true
}
###/TSAPI_WRITE_FILE###/* tslint:disable */
/* eslint-disable */
/**
 * <%- info.title %>
 * <%- info.description %>
 *
 * The version of the OpenAPI document: <%- info.version %>
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import { exists, mapValues } from './model-utils<%_ if (metadata.esm) { _%>.js<%_ } _%>';
<%_ const modelsByName = Object.fromEntries(models.map(m => [m.name, m])); _%>
<%_ model.uniqueImports.forEach((importName) => { _%>
import type { <%= importName %> } from './<%= importName %>';
import {
    <%= importName %>FromJSON,
    <%= importName %>FromJSONTyped,
    <%= importName %>ToJSON,
    <%_ if (!(modelsByName[importName] && modelsByName[importName].export === "enum")) { _%>
    instanceOf<%= importName %>,
    <%_ } _%>
} from './<%= importName %><%_ if (metadata.esm) { _%>.js<%_ } _%>';
<%_ }); _%>
<%_ const isComposite = model.export === "one-of" || model.export === "any-of" || model.export === "all-of"; _%>
<%_
// Nested arrays of primitives (besides dates) don't need to have .map(...) called to convert them as the base case will be a noop
// eg. an array of arrays of strings doesn't need to be rendered as `value.map(item0 => item0.map(item1 => item1))`
const canShortCircuitConversion = (property) => {
  if (["array", "dictionary"].includes(property.export)) {
    return canShortCircuitConversion(property.link);
  }
  return property.isPrimitive && !["date", "date-time"].includes(property.format);
};
_%>

<%_ if (model.export === "enum") { _%>
/**
 * <%- model.description || '' %>
 * @export
 * @enum {string}
 */
export type <%= model.name %> =
<%_ model.enum.forEach((enumMember, i) => { _%>
  <%- enumMember.value %><% if (i < model.enum.length - 1) { %> | <% } %>
<%_ }); _%>

<%_ } else if (isComposite) { _%>
/**
 * @type <%= model.name %>
 * <%- model.description || '' %>
 * @export
 */
export type <%- model.name %> =<% model.properties.forEach((composedType, i) => { %><% if (i > 0) { %><% if (model.export === "all-of") { %> &<% } else { %> |<% } %><% } %> <%- composedType.typescriptType %><% }); %>;
<%_ } else { _%>
/**
 * <%- model.description || '' %>
 * @export
 * @interface <%= model.name %>
 <%_ if (model.deprecated) { _%>
 * @deprecated
 <%_ } _%>
 */
export interface <%= model.name %> {
<%_ if (model.export === "dictionary" && model.link) { _%>
    [key: string]: <%- model.link.typescriptType %>;
<%_ } _%>
<%_ model.properties.forEach((property) => { _%>
    /**
     * <%- property.description || '' %>
     * @type {<%- property.typescriptType %>}
     * @memberof <%= model.name %>
    <%_ if (property.deprecated) { _%>
     * @deprecated
    <%_ } _%>
     */
    <%= property.isReadOnly ? 'readonly ' : '' %><%= property.typescriptName %><%= property.isRequired ? '' : '?' %>: <%- property.typescriptType %><%= (property.isNullable || property.type === "any") ? ' | null' : '' %>;
<%_ }); _%>
}
<%_ } _%>


<%_ if (model.export !== "enum") { _%>
/**
 * Check if a given object implements the <%= model.name %> interface.
 */
export function instanceOf<%= model.name %>(value: object): boolean {
<%_ if (isComposite) { _%>
    return <% model.properties.forEach((property, i) => { %><% if (i > 0) { %> <% if (model.export === "all-of") { %>&&<% } else { %>||<% } %> <% } %><% if (property.isPrimitive) { %>typeof value === "<%- property.typescriptType %>"<% } else { %>instanceOf<%- property.type %>(value)<% } %><% }); %>
<%_ } else { _%>
    let isInstance = true;
<%_ model.properties.forEach((property) => { _%>
<%_ if (property.isRequired) { _%>
    isInstance = isInstance && "<%= property.name %>" in value;
<%_ } _%>
<%_ }); _%>
    return isInstance;
<%_ } _%>
}
<%_ } _%>

export function <%= model.name %>FromJSON(json: any): <%= model.name %> {
    return <%= model.name %>FromJSONTyped(json, false);
}

export function <%= model.name %>FromJSONTyped(json: any, ignoreDiscriminator: boolean): <%= model.name %> {
<%_ if (model.properties.length > 0) { _%>
    if ((json === undefined) || (json === null)) {
        return json;
    }
<%_ if (isComposite) { _%>
<%_ model.composedPrimitives.forEach((primitive) => { _%>
    if (typeof json === "<%- primitive.typescriptType %>") {
        return json;
    }
<%_ }); _%>
<%_ if (model.composedModels.length > 0) { _%>
    return {
        <%_ model.properties.filter(p => !p.isPrimitive).forEach((composedType) => { _%>
        ...<%- composedType.typescriptType %>FromJSONTyped(json, true),
        <%_ }); _%>
    };
<%_ } else { _%>
    return json;
<%_ } _%>
<%_ } else { _%>
    return {

<%_
// Renders the appropriate nested function for .map() or mapValues() for arrays and dictionaries for the given type
const renderNestedFromJsonValue = (type, depth = 0) => {
    const itemIdentifier = `item${depth}`;
    if (type.isPrimitive) {
        return `(${itemIdentifier}) => ${["date", "date-time"].includes(type.format) ? `new Date(${itemIdentifier})` : itemIdentifier}`;
    } else if (type.export === "array") {
        return `(${itemIdentifier}) => ${itemIdentifier}.map(${renderNestedFromJsonValue(type.link, depth + 1)})`;
    } else if (type.export === "dictionary") {
        return `(${itemIdentifier}) => mapValues(${itemIdentifier}, ${renderNestedFromJsonValue(type.link, depth + 1)})`;
    }
    return `${type.name || type.type}FromJSON`;
};
// Renders the code to transform a property of the model from its json representation into the model types
const renderFromJsonValue = (property) => {
    const value = `json['${property.name}']`;
    let rendered = '';
    if (canShortCircuitConversion(property)) {
        rendered = value;
    } else if (property.isPrimitive) {
        rendered = ["date", "date-time"].includes(property.format) ? `(new Date(${value}))` : value;
    } else if (property.export === "array") {
        rendered = `((${value} as Array<any>).map(${renderNestedFromJsonValue(property.link)}))`;
        rendered = property.uniqueItems ? `new Set(${rendered})` : rendered;
    } else if (property.export === "dictionary") {
        rendered = `(mapValues(${value}, ${renderNestedFromJsonValue(property.link)}))`;
    } else {
        rendered = `${property.type}FromJSON(${value})`;
    }
    rendered = property.isNullable ? `${value} === null ? null : ${rendered}` : rendered;
    rendered = !property.isRequired ? `!exists(json, '${property.name}') ? undefined : ${rendered}` : rendered;
    return rendered;
};
_%>
<%_ if (model.export === "dictionary") { _%>
            ...json,
<%_ } _%>
<%_ model.properties.forEach((property) => { _%>
        '<%= property.typescriptName %>': <%- renderFromJsonValue(property) %>,
<%_ }); _%>
    };
<%_ } _%>
<%_ } else { _%>
    return json;
<%_ } _%>
}

export function <%= model.name %>ToJSON(value?: <%= model.name %> | null): any {
<%_ if (model.properties.length > 0) { _%>
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
<%_ if (isComposite) { _%>
    <%_ model.composedPrimitives.forEach((primitive) => { _%>
    if (typeof value === "<%- primitive.typescriptType %>") {
        return value;
    }
    <%_ }); _%>
    <%_ if (model.composedModels.length > 0) { _%>
    return {
        <%_ model.properties.filter(p => !p.isPrimitive).forEach((property, i) => { _%>
        ...<%- property.typescriptType %>ToJSON(value as any),
        <%_ }); _%>
    };
    <%_ } else { _%>
    return value;
    <%_ } _%>
<%_ } else { _%>
    return {

<%_
// Render code to convert a date to its string representation
const renderToJsonDateValue = (identifier, format) => {
    return `${identifier}.toISOString()${format === 'date' ? '.substr(0,10)' : ''}`;
};
// Renders the appropriate nested function for .map() or mapValues() for arrays and dictionaries for the given type
const renderNestedToJsonValue = (type, depth = 0) => {
    const itemIdentifier = `item${depth}`;
    if (type.isPrimitive) {
        return `(${itemIdentifier}) => ${["date", "date-time"].includes(type.format) ? renderToJsonDateValue(itemIdentifier, type.format) : itemIdentifier}`;
    } else if (type.export === "array") {
        return `(${itemIdentifier}) => ${itemIdentifier}.map(${renderNestedToJsonValue(type.link, depth + 1)})`;
    } else if (type.export === "dictionary") {
        return `(${itemIdentifier}) => mapValues(${itemIdentifier}, ${renderNestedToJsonValue(type.link, depth + 1)})`;
    }
    return `${type.name || type.type}ToJSON`;
};
// Renders the code to transform a property of the model to its json representation from the model types
const renderToJsonValue = (property) => {
    const value = `value.${property.typescriptName}`;
    let rendered = '';

    if (canShortCircuitConversion(property)) {
        rendered = value;
    } else if (property.isPrimitive) {
        rendered = ["date", "date-time"].includes(property.format) ? `(${renderToJsonDateValue(value, property.format)})` : value;
    } else if (property.export === "array") {
        const prefix = property.uniqueItems ? `Array.from(${value} as Array<any>)` : `(${value} as Array<any>)`;
        rendered = `(${prefix}.map(${renderNestedToJsonValue(property.link)}))`;
    } else if (property.export === "dictionary") {
        rendered = `(mapValues(${value}, ${renderNestedToJsonValue(property.link)}))`;
    } else if (property.type !== "any") {
        rendered = `${property.type}ToJSON(${value})`;
    } else {
        rendered = value;
    }

    if ((property.isPrimitive && ["date", "date-time"].includes(property.format)) || (!property.isPrimitive && ["array", "dictionary"].includes(property.export))) {
        rendered = property.isNullable ? `${value} === null ? null : ${rendered}` : rendered;
        rendered = !property.isRequired ? `${value} === undefined ? undefined : ${rendered}` : rendered;
    }
    return rendered;
};
_%>
<%_ if (model.export === "dictionary") { _%>
            ...value,
<%_ } _%>
<%_ model.properties.forEach((property) => { _%>
<%_ if (!property.isReadOnly) { _%>
        '<%= property.name %>': <%- renderToJsonValue(property) %>,
<%_ } _%>
<%_ }); _%>
    };
<%_ } _%>
<%_ } else { _%>
    return value;
<%_ } _%>
}

<%_ }); _%>