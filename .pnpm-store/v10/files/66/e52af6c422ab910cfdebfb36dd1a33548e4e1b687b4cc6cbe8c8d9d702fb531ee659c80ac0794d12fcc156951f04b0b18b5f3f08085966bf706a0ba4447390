"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratedJavaCdkInfrastructureBaseProject = void 0;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const path = require("path");
const monorepo_1 = require("../../../../../monorepo");
const projen_1 = require("projen");
const java_1 = require("projen/lib/java");
const type_safe_api_command_environment_1 = require("../../components/type-safe-api-command-environment");
const utils_1 = require("../../components/utils");
class GeneratedJavaCdkInfrastructureBaseProject extends java_1.JavaProject {
    constructor(options) {
        super({
            ...options,
            sample: false,
            junit: false,
        });
        this.buildGenerateCommandArgs = () => {
            return (0, utils_1.buildCodegenCommandArgs)(this.buildCodegenOptions());
        };
        type_safe_api_command_environment_1.TypeSafeApiCommandEnvironment.ensure(this);
        this.options = options;
        this.packageName = `${this.pom.groupId}.${this.name}.infra`;
        this.srcDir = path.join("src", "main", "java", ...this.packageName.split("."));
        [
            `software.aws/pdk@${monorepo_1.ProjectUtils.getPdkVersion()}`,
            "software.constructs/constructs@10.3.0",
            "software.amazon.awscdk/aws-cdk-lib@2.133.0",
            "io.github.cdklabs/cdknag@2.28.60",
            "org.projectlombok/lombok@1.18.30",
            "com.fasterxml.jackson.core/jackson-databind@2.17.0",
            `io.github.cdklabs/projen@0.80.10`,
            `${options.generatedJavaTypes.pom.groupId}/${options.generatedJavaTypes.pom.artifactId}@${options.generatedJavaTypes.pom.version}`,
        ]
            .filter((dep) => !this.deps.tryGetDependency(dep.split("@")[0], projen_1.DependencyType.RUNTIME))
            .forEach((dep) => this.addDependency(dep));
        // Pin constructs version
        this.deps.removeDependency("software.constructs/constructs", projen_1.DependencyType.BUILD);
        this.addDependency("software.constructs/constructs@10.3.0");
        // Remove the projen test dependency since otherwise it takes precedence, causing projen to be unavailable at synth time
        this.deps.removeDependency("io.github.cdklabs/projen", projen_1.DependencyType.TEST);
        // Add a dependency on the generated java types repository
        this.pom.addRepository({
            url: `file://${path.relative(this.outdir, options.generatedJavaTypes.outdir)}/dist/java`,
            id: `${options.generatedJavaTypes.pom.groupId}-${options.generatedJavaTypes.pom.artifactId}-repo`,
        });
        const generateTask = this.addTask("generate");
        this.generateTask = generateTask;
        generateTask.exec((0, utils_1.buildTypeSafeApiExecCommand)(utils_1.TypeSafeApiScript.GENERATE, this.buildGenerateCommandArgs()));
        // Copy the parsed spec into the resources directory so that it's included in the jar
        generateTask.exec("mkdir -p src/main/resources");
        generateTask.exec(`cp -f ${this.options.specPath} src/main/resources/.api.json`);
        // Absolute path of this project is required for determining the path to the handlers jar,
        // since java executes from the jar which could be anywhere in the filesystem (eg the .m2 directory).
        // While ugly, since this is written at build time and not checked in it remains portable.
        generateTask.exec("echo $(pwd) > src/main/resources/project-absolute-path.txt");
        this.gitignore.addPatterns(".tsapi-manifest", ".openapi-generator");
        this.preCompileTask.spawn(generateTask);
    }
}
exports.GeneratedJavaCdkInfrastructureBaseProject = GeneratedJavaCdkInfrastructureBaseProject;
//# sourceMappingURL=data:application/json;base64,