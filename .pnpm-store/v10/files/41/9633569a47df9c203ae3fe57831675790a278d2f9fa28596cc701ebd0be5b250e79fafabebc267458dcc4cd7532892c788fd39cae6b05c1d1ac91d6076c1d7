"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowActions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constants_1 = require("./constants");
const util_1 = require("./private/util");
const workflow_steps_1 = require("./workflow-steps");
const REPO = (0, util_1.context)("github.repository");
const RUN_ID = (0, util_1.context)("github.run_id");
const SERVER_URL = (0, util_1.context)("github.server_url");
const RUN_URL = `${SERVER_URL}/${REPO}/actions/runs/${RUN_ID}`;
const GIT_PATCH_FILE_DEFAULT = "repo.patch";
const RUNNER_TEMP = "${{ runner.temp }}";
/**
 * A set of utility functions for creating GitHub actions in workflows.
 */
class WorkflowActions {
    /**
     * Creates a .patch file from the current git diff and uploads it as an
     * artifact. Use `checkoutWithPatch` to download and apply in another job.
     *
     * If a patch was uploaded, the action can optionally fail the job.
     *
     * @param options Options
     * @returns Job steps
     */
    static uploadGitPatch(options) {
        const MUTATIONS_FOUND = `steps.${options.stepId}.outputs.${options.outputName}`;
        const GIT_PATCH_FILE = options.patchFile ?? GIT_PATCH_FILE_DEFAULT;
        const steps = [
            {
                id: options.stepId,
                name: options.stepName ?? "Find mutations",
                shell: "bash",
                run: [
                    "git add .",
                    `git diff --staged --patch --exit-code > ${GIT_PATCH_FILE} || echo "${options.outputName}=true" >> $GITHUB_OUTPUT`,
                ].join("\n"),
                // always run from root of repository
                // overrides default working directory which is set by some workflows using this function
                workingDirectory: "./",
            },
            workflow_steps_1.WorkflowSteps.uploadArtifact({
                if: MUTATIONS_FOUND,
                name: "Upload patch",
                with: {
                    name: GIT_PATCH_FILE,
                    path: GIT_PATCH_FILE,
                    includeHiddenFiles: (0, util_1.isHiddenPath)(GIT_PATCH_FILE) ? true : undefined,
                },
            }),
        ];
        if (options.mutationError) {
            steps.push({
                name: "Fail build on mutation",
                if: MUTATIONS_FOUND,
                run: [
                    `echo "::error::${options.mutationError}"`,
                    `cat ${GIT_PATCH_FILE}`,
                    "exit 1",
                ].join("\n"),
            });
        }
        return steps;
    }
    /**
     * Checks out a repository and applies a git patch that was created using
     * `uploadGitPatch`.
     *
     * @param options Options
     * @returns Job steps
     */
    static checkoutWithPatch(options = {}) {
        const { patchFile, ...restOfOptions } = options;
        const GIT_PATCH_FILE = options.patchFile ?? GIT_PATCH_FILE_DEFAULT;
        return [
            workflow_steps_1.WorkflowSteps.checkout({ with: restOfOptions }),
            {
                name: "Download patch",
                uses: "actions/download-artifact@v4",
                with: { name: GIT_PATCH_FILE, path: RUNNER_TEMP },
            },
            {
                name: "Apply patch",
                run: `[ -s ${RUNNER_TEMP}/${GIT_PATCH_FILE} ] && git apply ${RUNNER_TEMP}/${GIT_PATCH_FILE} || echo "Empty patch. Skipping."`,
            },
        ];
    }
    /**
     * A step that creates a pull request based on the current repo state.
     *
     * @param options Options
     * @returns Job steps
     */
    static createPullRequest(options) {
        const workflowName = options.workflowName;
        const branchName = options.branchName ?? `github-actions/${workflowName}`;
        const stepId = options.stepId ?? "create-pr";
        const stepName = options.stepName ?? "Create Pull Request";
        const gitIdentity = options.gitIdentity ?? constants_1.DEFAULT_GITHUB_ACTIONS_USER;
        const committer = `${gitIdentity.name} <${gitIdentity.email}>`;
        const pullRequestDescription = options.pullRequestDescription
            .trimEnd()
            .endsWith(".")
            ? options.pullRequestDescription.trimEnd()
            : `${options.pullRequestDescription.trimEnd()}.`;
        const title = options.pullRequestTitle;
        const description = [
            `${pullRequestDescription} See details in [workflow run].`,
            "",
            `[Workflow Run]: ${RUN_URL}`,
            "",
            "------",
            "",
            `*Automatically created by projen via the "${workflowName}" workflow*`,
        ].join("\n");
        return [
            {
                name: stepName,
                id: stepId,
                uses: "peter-evans/create-pull-request@v6",
                with: {
                    token: options.credentials?.tokenRef,
                    "commit-message": `${title}\n\n${description}`,
                    branch: branchName,
                    base: options.baseBranch,
                    title: title,
                    labels: options.labels?.join(",") || undefined,
                    assignees: options.assignees?.join(",") || undefined,
                    body: description,
                    author: committer,
                    committer: committer,
                    signoff: options.signoff ?? true,
                },
            },
        ];
    }
    /**
     * Configures the git identity (user name and email).
     * @param id The identity to use
     * @returns Job steps
     *
     * @deprecated use `WorkflowSteps.setupGitIdentity` instead
     */
    static setupGitIdentity(id) {
        return [workflow_steps_1.WorkflowSteps.setupGitIdentity({ gitIdentity: id })];
    }
}
exports.WorkflowActions = WorkflowActions;
_a = JSII_RTTI_SYMBOL_1;
WorkflowActions[_a] = { fqn: "projen.github.WorkflowActions", version: "0.95.4" };
//# sourceMappingURL=data:application/json;base64,