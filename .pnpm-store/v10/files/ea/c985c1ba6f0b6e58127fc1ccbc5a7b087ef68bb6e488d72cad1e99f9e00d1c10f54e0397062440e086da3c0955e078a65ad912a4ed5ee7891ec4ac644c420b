"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Integration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * An integration for an API operation. You can extend this to implement your own integration if you like.
 */
class Integration {
    /**
     * Grant permissions for the API to invoke the integration
     */
    grant(_props) {
        // No permissions to grant by default
    }
}
exports.Integration = Integration;
_a = JSII_RTTI_SYMBOL_1;
Integration[_a] = { fqn: "@aws/pdk.type_safe_api.Integration", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,