"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPoolRoleAttachment = exports.RoleMappingMatchType = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const core_1 = require("aws-cdk-lib/core");
/**
 * Types of matches allowed for role mapping
 */
var RoleMappingMatchType;
(function (RoleMappingMatchType) {
    /**
     * The claim from the token must equal the given value in order for a match
     */
    RoleMappingMatchType["EQUALS"] = "Equals";
    /**
     * The claim from the token must contain the given value in order for a match
     */
    RoleMappingMatchType["CONTAINS"] = "Contains";
    /**
     * The claim from the token must start with the given value in order for a match
     */
    RoleMappingMatchType["STARTS_WITH"] = "StartsWith";
    /**
     * The claim from the token must not equal the given value in order for a match
     */
    RoleMappingMatchType["NOTEQUAL"] = "NotEqual";
})(RoleMappingMatchType || (exports.RoleMappingMatchType = RoleMappingMatchType = {}));
/**
 * Defines an Identity Pool Role Attachment
 *
 * @resource AWS::Cognito::IdentityPoolRoleAttachment
 */
class IdentityPoolRoleAttachment extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IdentityPoolRoleAttachmentProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, IdentityPoolRoleAttachment);
            }
            throw error;
        }
        this.identityPoolId = props.identityPool.identityPoolId;
        const mappings = props.roleMappings || [];
        let roles = undefined, roleMappings = undefined;
        if (props.authenticatedRole || props.unauthenticatedRole) {
            roles = {};
            if (props.authenticatedRole)
                roles.authenticated = props.authenticatedRole.roleArn;
            if (props.unauthenticatedRole)
                roles.unauthenticated = props.unauthenticatedRole.roleArn;
        }
        if (mappings) {
            roleMappings = this.configureRoleMappings(...mappings);
        }
        new aws_cognito_1.CfnIdentityPoolRoleAttachment(this, 'Resource', {
            identityPoolId: this.identityPoolId,
            roles,
            roleMappings,
        });
    }
    /**
     * Configures role mappings for the Identity Pool Role Attachment
     */
    configureRoleMappings(...props) {
        if (!props || !props.length)
            return undefined;
        return props.reduce((acc, prop) => {
            let mappingKey;
            if (prop.mappingKey) {
                mappingKey = prop.mappingKey;
            }
            else {
                const providerUrl = prop.providerUrl.value;
                if (core_1.Token.isUnresolved(providerUrl)) {
                    throw new Error('mappingKey must be provided when providerUrl.value is a token');
                }
                mappingKey = providerUrl;
            }
            let roleMapping = {
                ambiguousRoleResolution: prop.resolveAmbiguousRoles ? 'AuthenticatedRole' : 'Deny',
                type: prop.useToken ? 'Token' : 'Rules',
                identityProvider: prop.providerUrl.value,
            };
            if (roleMapping.type === 'Rules') {
                if (!prop.rules) {
                    throw new Error('IdentityPoolRoleMapping.rules is required when useToken is false');
                }
                roleMapping.rulesConfiguration = {
                    rules: prop.rules.map(rule => {
                        return {
                            claim: rule.claim,
                            value: rule.claimValue,
                            matchType: rule.matchType || RoleMappingMatchType.EQUALS,
                            roleArn: rule.mappedRole.roleArn,
                        };
                    }),
                };
            }
            ;
            acc[mappingKey] = roleMapping;
            return acc;
        }, {});
    }
}
exports.IdentityPoolRoleAttachment = IdentityPoolRoleAttachment;
_a = JSII_RTTI_SYMBOL_1;
IdentityPoolRoleAttachment[_a] = { fqn: "@aws-cdk/aws-cognito-identitypool-alpha.IdentityPoolRoleAttachment", version: "2.163.1-alpha.0" };
//# sourceMappingURL=data:application/json;base64,