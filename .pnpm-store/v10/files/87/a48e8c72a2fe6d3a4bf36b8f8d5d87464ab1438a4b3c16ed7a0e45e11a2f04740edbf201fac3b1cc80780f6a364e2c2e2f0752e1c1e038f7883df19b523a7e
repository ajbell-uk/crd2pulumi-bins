"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Architecture = exports.ModelLanguage = void 0;
/**
 * The model definition language
 */
var ModelLanguage;
(function (ModelLanguage) {
    /**
     * Smithy
     * @see https://smithy.io/2.0/
     */
    ModelLanguage["SMITHY"] = "SMITHY";
    /**
     * OpenAPI
     * @see https://www.openapis.org/
     */
    ModelLanguage["OPENAPI"] = "OPENAPI";
    /**
     * TypeSpec
     * @see https://typespec.io/
     */
    ModelLanguage["TYPESPEC"] = "TYPESPEC";
})(ModelLanguage || (exports.ModelLanguage = ModelLanguage = {}));
/**
 * Represents an instruction set architecture
 */
var Architecture;
(function (Architecture) {
    /**
     * 64-bit x86 architecture
     */
    Architecture["X86_64"] = "X86_64";
    /**
     * 64-bit ARM architecture
     */
    Architecture["ARM_64"] = "ARM_64";
})(Architecture || (exports.Architecture = Architecture = {}));
//# sourceMappingURL=data:application/json;base64,