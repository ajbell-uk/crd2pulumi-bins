"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CURRENT_SCHEMA_VERSION = void 0;
exports.extractDocs = extractDocs;
exports.submodulePath = submodulePath;
exports.filterUndefined = filterUndefined;
exports.CURRENT_SCHEMA_VERSION = '0.1';
function extractDocs(docs) {
    const links = [];
    const see = docs.docs.see; // @see
    if (see && see.length > 0) {
        links.push(see);
    }
    const link = docs.customTag('link'); // @link
    if (link && link.length > 0) {
        links.push(link);
    }
    return filterUndefined({
        // ignore defaults and empty strings to save space
        summary: docs.summary.length > 0 ? docs.summary : undefined,
        remarks: docs.remarks.length > 0 ? docs.remarks : undefined,
        example: docs.example.length > 0 ? docs.example : undefined,
        links: links.length > 0 ? links : undefined,
        deprecated: docs.deprecated === true ? true : undefined,
        deprecationReason: docs.deprecationReason,
    });
}
/**
 * Generates the name of the submodule.
 */
function submodulePath(module) {
    if (!module)
        return undefined;
    const path = module.fqn.split('.').splice(1).join('.');
    return path.length > 0 ? path : undefined;
}
function filterUndefined(obj) {
    const ret = {};
    for (const [k, v] of Object.entries(obj)) {
        if (v !== undefined) {
            ret[k] = v;
        }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,