"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveCfnResourceImage = resolveCfnResourceImage;
exports.resolveResourceImage = resolveResourceImage;
exports.resolveCustomResourceImage = resolveCustomResourceImage;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const aws_arch_1 = require("../../../aws-arch");
const theme_1 = require("../graphviz/theme");
const theme_2 = require("../graphviz/theme/theme");
/** Resolves CfnResource image from {@link AwsArchitecture} asset */
function resolveCfnResourceImage(node) {
    let min = theme_1.GraphTheme.instance.rendering.resourceIconMin;
    let max = theme_1.GraphTheme.instance.rendering.resourceIconMax;
    // lower max to general when wrapped cfn resource is rendered as wrapper will show service icon
    if (node.resource?.isWrapper) {
        min = theme_2.GraphThemeRenderingIconTarget.SERVICE;
    }
    return _resolveResourceLikeImage(node, min, max, theme_1.GraphTheme.instance.awsTheme?.id);
}
/** Resolves Resource image from {@link AwsArchitecture} asset */
function resolveResourceImage(node) {
    let min = theme_1.GraphTheme.instance.rendering.resourceIconMin;
    let max = theme_1.GraphTheme.instance.rendering.resourceIconMax;
    // elevate min to service when wrapped cfn resource is rendered
    if (node.isWrapper) {
        min = theme_2.GraphThemeRenderingIconTarget.SERVICE;
    }
    return _resolveResourceLikeImage(node, min, max, theme_1.GraphTheme.instance.awsTheme?.id);
}
/** Resolves CustomResource image from {@link AwsArchitecture} asset */
function resolveCustomResourceImage(_node) {
    return aws_arch_1.AwsArchitecture.getResource("AWS::CloudFormation::CustomResource").icon("svg", theme_1.GraphTheme.instance.awsTheme?.id);
}
/** Resolves Resource image from {@link AwsArchitecture} asset */
function _resolveResourceLikeImage(node, min, max, theme) {
    const cfnResourceType = node.cfnType;
    try {
        if (min <= theme_2.GraphThemeRenderingIconTarget.DATA &&
            max >= theme_2.GraphThemeRenderingIconTarget.DATA) {
            const dataImage = _resolveResourceLikeDataImage(node, theme);
            if (dataImage) {
                return dataImage;
            }
        }
        else if (max <= theme_2.GraphThemeRenderingIconTarget.DATA) {
            return;
        }
        const resource = aws_arch_1.AwsArchitecture.getResource(cfnResourceType);
        if (min <= theme_2.GraphThemeRenderingIconTarget.RESOURCE &&
            max >= theme_2.GraphThemeRenderingIconTarget.RESOURCE) {
            try {
                const icon = resource.getResourceIcon("svg", theme);
                if (icon) {
                    return icon;
                }
                if (min <= theme_2.GraphThemeRenderingIconTarget.GENERAL &&
                    max >= theme_2.GraphThemeRenderingIconTarget.GENERAL) {
                    const generalIcon = resource.getGeneralIcon("svg", theme);
                    if (generalIcon) {
                        return generalIcon;
                    }
                }
            }
            catch { }
        }
        if (min <= theme_2.GraphThemeRenderingIconTarget.SERVICE &&
            max >= theme_2.GraphThemeRenderingIconTarget.SERVICE) {
            try {
                const icon = resource.getServiceIcon("svg", theme);
                if (icon) {
                    return icon;
                }
            }
            catch { }
        }
        if (min <= theme_2.GraphThemeRenderingIconTarget.CATEGORY &&
            max >= theme_2.GraphThemeRenderingIconTarget.CATEGORY) {
            try {
                return resource.getCategoryIcon("svg", theme);
            }
            catch { }
        }
        return;
    }
    catch {
        return;
    }
}
/** Resolves CfnResource image from {@link AwsArchitecture} asset */
function _resolveResourceLikeDataImage(node, theme) {
    const cfnResourceType = node.cfnType;
    if (cfnResourceType === aws_arch_1.aws_arch.CfnSpec.ServiceResourceDictionary.EC2.Instance) {
        const instanceType = node.getCfnProp("instanceType");
        if (instanceType) {
            try {
                return aws_arch_1.AwsArchitecture.getInstanceTypeIcon(instanceType.toLowerCase().split(".")[0], "svg", theme);
            }
            catch { }
        }
    }
    if (cfnResourceType ===
        aws_arch_1.aws_arch.CfnSpec.ServiceResourceDictionary.RDS.DBInstance) {
        let engine = node.getCfnProp("engine");
        if (engine) {
            engine = engine.toLowerCase().split("-")[0];
            // Resolve postgresql variant
            if (engine === "postgres") {
                engine = "postgresql";
            }
            try {
                // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbinstance.html#cfn-rds-dbinstance-engine
                return aws_arch_1.AwsArchitecture.getRdsInstanceTypeIcon(engine, "svg", theme);
            }
            catch { }
        }
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,