"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenApiGatewayWebAcl = void 0;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const pdk_nag_1 = require("../../../pdk-nag");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_wafv2_1 = require("aws-cdk-lib/aws-wafv2");
const constructs_1 = require("constructs");
/**
 * Associate an AWS WAF v2 Web ACL with the given api
 */
class OpenApiGatewayWebAcl extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const aclName = `${pdk_nag_1.PDKNag.getStackPrefix(aws_cdk_lib_1.Stack.of(this))
            .split("/")
            .join("-")}${id}-${this.node.addr.slice(-8)}`;
        const ipSetName = `${aclName}-IPSet`;
        // Create the IP Set if requested
        this.ipSet = props.cidrAllowList
            ? new aws_wafv2_1.CfnIPSet(this, "ApiIPSet", {
                name: ipSetName,
                addresses: props.cidrAllowList.cidrRanges,
                ipAddressVersion: props.cidrAllowList.cidrType,
                scope: "REGIONAL",
            })
            : undefined;
        // TODO: vendor property is deprecated, to be removed in the future iterations
        // and vendorName will be required
        const anyMissingVendor = props.managedRules?.some((q) => !q.vendorName && !q.vendor);
        if (anyMissingVendor) {
            throw new Error("The provided managed rules need to define either the vendor or vendorName (preferred) property");
        }
        const managedRules = props.managedRules ?? [
            { vendorName: "AWS", name: "AWSManagedRulesCommonRuleSet" },
        ];
        const rules = [
            // Add a rule for the IP Set if specified
            ...(this.ipSet
                ? [
                    {
                        name: ipSetName,
                        priority: 1,
                        visibilityConfig: {
                            metricName: ipSetName,
                            cloudWatchMetricsEnabled: true,
                            sampledRequestsEnabled: true,
                        },
                        action: {
                            block: {},
                        },
                        statement: {
                            notStatement: {
                                statement: {
                                    ipSetReferenceStatement: {
                                        arn: this.ipSet.attrArn,
                                    },
                                },
                            },
                        },
                    },
                ]
                : []),
            // Add the managed rules
            ...managedRules.map(({ vendor, vendorName, name, ...others }, i) => {
                // TODO: the usage of `vendor` it's for backward compatibility
                // it will be removed in the next PDK versions
                const vendorNameToUser = (vendor || vendorName);
                return {
                    name: `${vendorNameToUser}-${name}`,
                    priority: i + 2,
                    statement: {
                        managedRuleGroupStatement: {
                            ...others,
                            vendorName: vendorNameToUser,
                            name,
                        },
                    },
                    overrideAction: { none: {} },
                    visibilityConfig: {
                        metricName: `${aclName}-${vendorNameToUser}-${name}`,
                        cloudWatchMetricsEnabled: true,
                        sampledRequestsEnabled: true,
                    },
                };
            }),
        ];
        this.webAcl = new aws_wafv2_1.CfnWebACL(this, "ApiWebACL", {
            name: aclName,
            defaultAction: {
                // Allow by default, and use rules to deny unwanted requests
                allow: {},
            },
            scope: "REGIONAL",
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                sampledRequestsEnabled: true,
                metricName: aclName,
            },
            rules,
        });
        this.webAclAssociation = new aws_wafv2_1.CfnWebACLAssociation(this, "WebACLAssociation", {
            resourceArn: props.apiDeploymentStageArn,
            webAclArn: this.webAcl.attrArn,
        });
    }
}
exports.OpenApiGatewayWebAcl = OpenApiGatewayWebAcl;
//# sourceMappingURL=data:application/json;base64,