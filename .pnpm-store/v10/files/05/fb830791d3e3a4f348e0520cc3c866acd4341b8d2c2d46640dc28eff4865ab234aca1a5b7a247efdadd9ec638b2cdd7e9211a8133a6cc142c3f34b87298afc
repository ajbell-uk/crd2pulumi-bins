"use strict";
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureBranches = void 0;
const path = require("path");
const pdk_nag_1 = require("../pdk-nag");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const aws_events_targets_1 = require("aws-cdk-lib/aws-events-targets");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
class FeatureBranches extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const buildCommands = props.synthShellStepPartialProps?.commands &&
            props.synthShellStepPartialProps.commands.length > 0
            ? props.synthShellStepPartialProps.commands
            : ["npx nx run-many --target=build --all"];
        const installCommands = props.synthShellStepPartialProps?.installCommands &&
            props.synthShellStepPartialProps.installCommands.length > 0
            ? props.synthShellStepPartialProps.installCommands
            : [
                "npm install -g aws-cdk",
                "yarn install --frozen-lockfile || npx projen && yarn install --frozen-lockfile",
            ];
        const cdkCommand = props.cdkCommand ?? "npx cdk";
        const createFeatureBranchProject = new aws_codebuild_1.Project(this, "CreateFeatureBranchProject", {
            ...props.codeBuildDefaults,
            description: "Build project to deploy feature branch pipelines",
            source: aws_codebuild_1.Source.codeCommit({ repository: props.codeRepository }),
            environment: {
                buildImage: aws_codebuild_1.LinuxBuildImage.STANDARD_7_0,
                computeType: aws_codebuild_1.ComputeType.SMALL,
                ...props.codeBuildDefaults?.buildEnvironment,
                privileged: props.dockerEnabledForSynth,
            },
            buildSpec: aws_codebuild_1.BuildSpec.fromObjectToYaml({
                version: "0.2",
                phases: {
                    install: {
                        commands: installCommands,
                    },
                    build: {
                        commands: [
                            ...buildCommands,
                            `cd ${props.cdkSrcDir}`,
                            `${cdkCommand} synth`,
                            `${cdkCommand} deploy --require-approval=never`,
                        ],
                    },
                },
                artifacts: {
                    files: ["**/*"],
                },
            }),
        });
        if (props.codeBuildDefaults?.rolePolicy) {
            props.codeBuildDefaults.rolePolicy.forEach((policy) => {
                createFeatureBranchProject.addToRolePolicy(policy);
            });
        }
        createFeatureBranchProject.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ["sts:AssumeRole"],
            resources: [`arn:*:iam::${aws_cdk_lib_1.Stack.of(this).account}:role/*`],
            conditions: {
                "ForAnyValue:StringEquals": {
                    "iam:ResourceTag/aws-cdk:bootstrap-role": [
                        "image-publishing",
                        "file-publishing",
                        "deploy",
                    ],
                },
            },
        }));
        const createFeatureBranchFunction = new aws_lambda_1.Function(this, "LambdaTriggerCreateBranch", {
            runtime: aws_lambda_1.Runtime.PYTHON_3_12,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, "lambda/create_branch")),
            handler: "create_branch.handler",
            environment: {
                CODEBUILD_PROJECT: createFeatureBranchProject.projectName,
                MAIN_BRANCH: props.defaultBranchName,
            },
        });
        createFeatureBranchFunction.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ["codebuild:StartBuild"],
            resources: [createFeatureBranchProject.projectArn],
        }));
        const destroyFeatureBranchFunction = new aws_lambda_1.Function(this, "LambdaTriggerDestroyBranch", {
            runtime: aws_lambda_1.Runtime.PYTHON_3_12,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, "lambda/destroy_branch")),
            handler: "destroy_branch.handler",
            environment: {
                MAIN_BRANCH: props.defaultBranchName,
                REPO_NAME: props.codeRepository.repositoryName,
            },
        });
        destroyFeatureBranchFunction.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ["cloudformation:DeleteStack"],
            resources: [
                aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: "cloudformation",
                    resource: "stack",
                    resourceName: "*/*",
                }),
            ],
            conditions: {
                "ForAllValues:StringEquals": {
                    "aws:TagKeys": ["FeatureBranch", "RepoName"],
                },
            },
        }));
        destroyFeatureBranchFunction.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ["tag:GetResources"],
            resources: ["*"],
        }));
        props.codeRepository.onReferenceCreated("BranchCreateTrigger", {
            target: new aws_events_targets_1.LambdaFunction(createFeatureBranchFunction),
            description: "AWS CodeCommit reference created event.",
            eventPattern: {
                detail: {
                    referenceType: ["branch"],
                    referenceName: props.branchNamePrefixes.map((prefix) => ({ prefix })),
                },
            },
        });
        props.codeRepository.onReferenceDeleted("BranchDestroyTrigger", {
            target: new aws_events_targets_1.LambdaFunction(destroyFeatureBranchFunction),
            description: "AWS CodeCommit reference deleted event.",
            eventPattern: {
                detail: {
                    referenceType: ["branch"],
                    referenceName: props.branchNamePrefixes.map((prefix) => {
                        return { prefix };
                    }),
                },
            },
        });
        const stack = aws_cdk_lib_1.Stack.of(this);
        ["AwsSolutions-IAM5", "AwsPrototyping-IAMNoWildcardPermissions"].forEach((RuleId) => {
            cdk_nag_1.NagSuppressions.addResourceSuppressions(createFeatureBranchProject.role, [
                {
                    id: RuleId,
                    reason: "CodeBuild requires get, list, and pull access to the CodeCommit repository.",
                    appliesTo: [
                        "Action::codecommit:Get*",
                        "Action::codecommit:List*",
                    ],
                },
                {
                    id: RuleId,
                    reason: "CodeBuild requires access to create report groups that are dynamically determined.",
                    appliesTo: [
                        {
                            regex: `/^Resource::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:codebuild:${pdk_nag_1.PDKNag.getStackRegionRegex(stack)}:${pdk_nag_1.PDKNag.getStackAccountRegex(stack)}:report-group/<[a-zA-Z0-9]*CreateFeatureBranchProject.*>-\\*$/g`,
                        },
                    ],
                },
                {
                    id: RuleId,
                    reason: "CodeBuild requires access to manage logs and streams whose names are dynamically determined.",
                    appliesTo: [
                        {
                            regex: `/^Resource::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:logs:${pdk_nag_1.PDKNag.getStackRegionRegex(stack)}:${pdk_nag_1.PDKNag.getStackAccountRegex(stack)}:log-group:/aws/codebuild/<[a-zA-Z0-9]*CreateFeatureBranchProject.*>:\\*$/g`,
                        },
                    ],
                },
                {
                    id: RuleId,
                    reason: "CodeBuild requires access to assume a role from within the current account limited by a condition in order to deploy.",
                    appliesTo: [
                        {
                            regex: `/^Resource::arn:\\*:iam::${pdk_nag_1.PDKNag.getStackAccountRegex(stack)}:role/\\*$/g`,
                        },
                    ],
                },
            ], true);
            cdk_nag_1.NagSuppressions.addResourceSuppressions(destroyFeatureBranchFunction.role, [
                {
                    id: RuleId,
                    reason: "The DestroyBranch Lambda requires access to delete any stacks with specific tags.",
                    appliesTo: [
                        {
                            regex: `/^Resource::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:cloudformation:${pdk_nag_1.PDKNag.getStackRegionRegex(stack)}:${pdk_nag_1.PDKNag.getStackAccountRegex(stack)}:stack/\\*/\\*$/g`,
                        },
                    ],
                },
                {
                    id: RuleId,
                    reason: "The DestroyBranch Lambda requires access to look up CloudFormation stacks by tag. The Resource Group Tagging API must use 'Resource': '*'.",
                    appliesTo: ["Resource::*"],
                },
            ], true);
        });
        ["AwsSolutions-IAM4", "AwsPrototyping-IAMNoManagedPolicies"].forEach((RuleId) => {
            cdk_nag_1.NagSuppressions.addResourceSuppressions(createFeatureBranchFunction, [
                {
                    id: RuleId,
                    reason: "Lambda functions use the default AWS LambdaBasicExecutionRole managed role.",
                    appliesTo: [
                        {
                            regex: `/^Policy::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g`,
                        },
                    ],
                },
            ], true);
            cdk_nag_1.NagSuppressions.addResourceSuppressions(destroyFeatureBranchFunction, [
                {
                    id: RuleId,
                    reason: "Lambda functions use the default AWS LambdaBasicExecutionRole managed role.",
                    appliesTo: [
                        {
                            regex: `/^Policy::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g`,
                        },
                    ],
                },
            ], true);
        });
        [
            "AwsSolutions-CB4",
            "AwsPrototyping-CodeBuildProjectKMSEncryptedArtifacts",
        ].forEach((RuleId) => {
            cdk_nag_1.NagSuppressions.addResourceSuppressions(createFeatureBranchProject, [
                {
                    id: RuleId,
                    reason: "Encryption of Codebuild is not required.",
                },
            ]);
        });
    }
}
exports.FeatureBranches = FeatureBranches;
//# sourceMappingURL=data:application/json;base64,