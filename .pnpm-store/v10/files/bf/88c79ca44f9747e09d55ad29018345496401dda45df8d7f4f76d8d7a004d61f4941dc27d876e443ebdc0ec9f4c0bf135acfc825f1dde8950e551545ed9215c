"use strict";
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsArchitecture = exports.AwsResource = exports.AwsService = exports.AwsCategory = exports.AwsCategoryDrawioStyles = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const node_fs_1 = require("node:fs");
const path = require("path");
const contants_1 = require("./contants");
const assets_1 = require("./generated/assets");
const drawio_spec_1 = require("./generated/drawio-spec");
const mappings_1 = require("./generated/mappings");
const helpers_1 = require("./internal/assets/helpers");
const definitions_1 = require("./internal/categories/definitions");
const types_1 = require("./internal/drawio/types");
const pricing_manifest_1 = require("./internal/pricing-manifest");
const themes = require("./themes");
/**
 * AwsCategoryDrawioStyles is a utility class for constructing drawio shape
 * styles for services and resources.
 */
class AwsCategoryDrawioStyles {
    constructor(categoryShape, base) {
        this.categoryShape = categoryShape;
        this.base = base;
    }
    /**
     * Get the drawio style for this category.
     */
    get categoryStyle() {
        return {
            ...this.base,
            shape: types_1.DrawioAws4ParentShapes.RESOURCE_ICON,
            resIcon: this.categoryShape,
        };
    }
    /**
     * Gets the drawio style for a service based on the category style.
     * @param serviceShape The service shape to style based on category
     * @returns {AwsDrawioResourceIconStyle} The style drawio style definition for the resource based on category style.
     */
    getServiceStyle(serviceShape) {
        return {
            ...this.categoryStyle,
            resIcon: serviceShape,
        };
    }
    /**
     * Gets the drawio style for a resource based on the category style.
     * @param resourceShape The resource shape to style based on category
     * @returns {AwsDrawioResourceIconStyle} The style drawio style definition for the resource based on category style.
     */
    getResourceStyle(resourceShape) {
        const { resIcon, ...categoryStyle } = this.categoryStyle;
        return {
            ...categoryStyle,
            shape: resourceShape,
            pointerEvent: 1,
            strokeColor: "none",
        };
    }
}
exports.AwsCategoryDrawioStyles = AwsCategoryDrawioStyles;
_a = JSII_RTTI_SYMBOL_1;
AwsCategoryDrawioStyles[_a] = { fqn: "@aws/pdk.aws_arch.AwsCategoryDrawioStyles", version: "0.26.14" };
/**
 * AwsCategory class provides an interface for normalizing category metadata
 * between mapped systems.
 */
class AwsCategory {
    /** @internal */
    static _register(definition) {
        const instance = new AwsCategory(definition);
        this._instanceMap.set(definition.id, instance);
        return instance;
    }
    /**
     * Get {@link AwsCategory} based on {@link AwsCategoryId}
     * @param id {AwsCategoryId} The id of the category to retrieve.
     * @returns Returns the category with the id
     */
    static getCategory(id) {
        if (this._instanceMap.has(id)) {
            return this._instanceMap.get(id);
        }
        throw new Error(`AwsCategory ${id} is not registered`);
    }
    /**
     * Get record of all categories keyed by category id.
     */
    static get categories() {
        return Object.fromEntries(this._instanceMap.entries());
    }
    /** @internal */
    constructor(definition) {
        this.id = definition.id;
        this.name = definition.name;
        this.variants = [...(definition.variants || [])];
        this.fillColor = definition.fillColor;
        this.gradientColor = definition.gradientColor;
        this.fontColor = definition.fontColor || definitions_1.CATEGORY_DEFAULT_FONT_COLOR;
        if (this.id !== definitions_1.GENERAL_CATEGORY_ID) {
            if (this.id in assets_1.AwsAsset.Categories) {
                this._assetIcon = assets_1.AwsAsset.Categories[this.id];
            }
            else {
                throw new Error(`AwsCategory id "${this.id}" does not match AwsAsset.Category`);
            }
        }
        const drawioShape = [this.id, ...this.variants].find((v) => v.toUpperCase() in drawio_spec_1.DrawioSpec.Aws4.ShapeNames);
        if (drawioShape) {
            this.drawioStyles = new AwsCategoryDrawioStyles(drawioShape, {
                ...types_1.DRAWIO_RESOURCE_STYLE_BASE,
                fillColor: this.fillColor,
                gradientColor: this.gradientColor,
                fontColor: this.fontColor,
            });
        }
    }
    /**
     * Retrieves a well-formatted relative path to the icon for this given
     * category in the specified format.
     */
    icon(format, theme) {
        if (this._assetIcon == null)
            return;
        try {
            return AwsArchitecture.formatAssetPath(this._assetIcon, format, theme);
        }
        catch { }
        return;
    }
    /**
     * Gets a list of all services within this category.
     */
    categoryServices() {
        if (this._services == null) {
            this._services = Object.values(AwsService.services).filter((service) => service.category === this);
        }
        return this._services;
    }
}
exports.AwsCategory = AwsCategory;
_b = JSII_RTTI_SYMBOL_1;
AwsCategory[_b] = { fqn: "@aws/pdk.aws_arch.AwsCategory", version: "0.26.14" };
/** @internal */
AwsCategory._instanceMap = new Map();
// Register all categories
for (const categoryDefinition of Object.values(definitions_1.AwsCategoryDefinitions)) {
    AwsCategory._register(categoryDefinition);
}
/**
 * AwsService class provides an interface for normalizing service metadata
 * between mapped systems.
 */
class AwsService {
    /** @internal */
    static _register(cfnKey, cfnMapped) {
        const instance = new AwsService(cfnKey, cfnMapped);
        this._instanceMap.set(cfnKey, instance);
        return instance;
    }
    /**
     * Get {@link AwsService} by CloudFormation "service" name, where service name is expressed
     * as `<provider>::<service>::<resource>`.
     * @param cfnService The service name to retrieve {@link AwsService} for.
     * @returns Returns the {@link AwsService} associated with the `cfnService` provided
     * @throws Error is service not found
     */
    static getService(cfnService) {
        if (this._instanceMap.has(cfnService)) {
            return this._instanceMap.get(cfnService);
        }
        throw new Error(`AwsService ${cfnService} is not registered`);
    }
    /**
     * Finds the {@link AwsService} associated with a given value.
     * @param value Value to match {@link AwsService}, which can be `id`, `assetKey`, `fullName`, etc.
     * @returns Returns matching {@link AwsService} or `undefined` if not found
     * @throws Error if service not found
     */
    static findService(value) {
        if (this._instanceMap.has(value)) {
            return this._instanceMap.get(value);
        }
        for (const instance of this._instanceMap.values()) {
            if (instance._assetKey === value || instance.fullName === value) {
                return instance;
            }
        }
        return;
    }
    /**
     * Get record of all {@link AwsService}s keyed by `id`
     */
    static get services() {
        return Object.fromEntries(this._instanceMap.entries());
    }
    /** @internal */
    constructor(cfnKey, cfnMapped) {
        this.cfnService = cfnKey;
        this.cfnProvider = cfnMapped.provider;
        if (cfnMapped.assetKey) {
            this._assetKey = cfnMapped.assetKey;
            const _parsed = (0, helpers_1.parseAssetPath)(assets_1.AwsAsset.Services[cfnMapped.assetKey]);
            this._assetIcon = _parsed.service && assets_1.AwsAsset.Services[_parsed.service];
            this.category = AwsCategory.getCategory(_parsed.category);
        }
        this.pricingServiceCode = cfnMapped.pricingServiceCode;
        this.drawioShape = cfnMapped.drawioShape;
    }
    /**
     * The proper full name of the service.
     *
     * @example "AWS Glue", "Amazon S3"
     */
    get fullName() {
        if (this.pricingMetadata) {
            return this.pricingMetadata.name;
        }
        if (this._assetKey) {
            return assets_1.AwsAsset.AssetFullNameLookup[this._assetKey];
        }
        return this.cfnService;
    }
    /**
     * Get relative asset icon for the service for a given format and optional theme.
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     */
    icon(format, theme) {
        if (!this._assetIcon)
            return undefined;
        try {
            return AwsArchitecture.formatAssetPath(this._assetIcon, format, theme);
        }
        catch { }
        return;
    }
    /**
     * Get drawio style for this service
     */
    drawioStyle() {
        // compute on first access
        if (this._drawioStyle === undefined) {
            if (this.category && this.category.drawioStyles && this.drawioShape) {
                this._drawioStyle = this.category.drawioStyles.getServiceStyle(this.drawioShape);
            }
            else {
                // prevent recomputation
                this._drawioStyle = null;
            }
        }
        return this._drawioStyle || undefined;
    }
    /**
     * List all resources of this service
     */
    serviceResources() {
        if (this._resources == null) {
            this._resources = Object.values(AwsResource.resources).filter((resource) => resource.service === this);
        }
        return this._resources;
    }
    /**
     * Get service pricing metadata.
     */
    get pricingMetadata() {
        return (this.pricingServiceCode &&
            pricing_manifest_1.PricingManifest.Services[this.pricingServiceCode]);
    }
}
exports.AwsService = AwsService;
_c = JSII_RTTI_SYMBOL_1;
AwsService[_c] = { fqn: "@aws/pdk.aws_arch.AwsService", version: "0.26.14" };
/** @internal */
AwsService._instanceMap = new Map();
// Register all services
for (const [cfnKey, mapping] of Object.entries(mappings_1.AwsServiceMapping)) {
    AwsService._register(cfnKey, mapping);
}
/**
 * AwsResource class provides an interface for normalizing resource metadata
 * between mapped systems.
 */
class AwsResource {
    /** @internal */
    static _register(cfnResourceType, cfnMapped) {
        const instance = new AwsResource(cfnResourceType, cfnMapped);
        this._instanceMap.set(cfnResourceType, instance);
        return instance;
    }
    /**
     * Get {@link AwsResource} by CloudFormation resource type.
     * @param cfnResourceType - Fully qualifief CloudFormation resource type (eg: AWS:S3:Bucket)
     * @throws Error is no resource found
     */
    static getResource(cfnResourceType) {
        if (this._instanceMap.has(cfnResourceType)) {
            return this._instanceMap.get(cfnResourceType);
        }
        throw new Error(`AwsResource ${cfnResourceType} is not registered`);
    }
    /**
     * Find {@link AwsResource} associated with given value.
     * @param value - The value to match {@link AwsResource}; can be id, asset key, full name, etc.
     * @throws Error is no resource found
     */
    static findResource(value) {
        if (this._instanceMap.has(value)) {
            return this._instanceMap.get(value);
        }
        for (const instance of this._instanceMap.values()) {
            if (instance._assetKey === value || instance.fullName === value) {
                return instance;
            }
        }
        throw new Error(`AwsService ${value} is not registered`);
    }
    /**
     * Get record of all resources keyed by resource id.
     */
    static get resources() {
        return Object.fromEntries(this._instanceMap.entries());
    }
    /** @internal */
    constructor(cfnResourceType, cfnMapped) {
        this.cfnResourceType = cfnResourceType;
        this.service = AwsService.getService(cfnMapped.service);
        if (cfnMapped.assetKey) {
            this._assetKey = cfnMapped.assetKey;
            this._assetIcon = assets_1.AwsAsset.Resources[cfnMapped.assetKey];
            this.fullName = assets_1.AwsAsset.AssetFullNameLookup[cfnMapped.assetKey];
        }
        if (cfnMapped.serviceAssetKey) {
            this._serviceIcon = assets_1.AwsAsset.Services[cfnMapped.serviceAssetKey];
            this._category = (0, helpers_1.parseAssetPath)(this._serviceIcon)
                .category;
        }
        if (cfnMapped.generalIconKey) {
            this._generalIcon = assets_1.AwsAsset.GeneralIcons[cfnMapped.generalIconKey];
        }
        this.drawioShape = cfnMapped.drawioShape || cfnMapped.drawioGeneralShape;
    }
    /**
     * Gets the category icon for the resource.
     *
     * This maybe different than {@link AwsResource.service.category.icon} based on mappings overrides, which
     * if do not exist will fallback to {@link AwsResource.service.category.icon}.
     *
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     *
     * @see {@link AwsService.icon}
     */
    getCategoryIcon(format, theme) {
        if (this._category) {
            try {
                return AwsArchitecture.formatAssetPath(assets_1.AwsAsset.Categories[this._category], format, theme);
            }
            catch { }
        }
        return this.service.category?.icon(format, theme);
    }
    /**
     * Gets the service icon for the resource.
     *
     * This maybe different than {@link AwsResource.service.icon} based on mappings overrides, which
     * if do not exist will fallback to {@link AwsResource.service.icon}.
     *
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     *
     * @see {@link AwsService.icon}
     */
    getServiceIcon(format, theme) {
        if (this._serviceIcon) {
            try {
                return AwsArchitecture.formatAssetPath(this._serviceIcon, format, theme);
            }
            catch { }
        }
        return this.service.icon(format, theme);
    }
    /**
     * Gets the resource specific icon for the resource.
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path or undefined if does not have resource icon
     */
    getResourceIcon(format, theme) {
        if (!this._assetIcon)
            return undefined;
        try {
            return AwsArchitecture.formatAssetPath(this._assetIcon, format, theme);
        }
        catch { }
        return;
    }
    /**
     * Gets the general icon for the resource if available.
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path or undefined if does not have general icon
     */
    getGeneralIcon(format, theme) {
        if (!this._generalIcon)
            return undefined;
        try {
            return AwsArchitecture.formatAssetPath(this._generalIcon, format, theme);
        }
        catch { }
        return;
    }
    /**
     * Gets the best icon match for the resource following the order of:
     * 1. explicit resource icon
     * 2. general icon
     * 3. service icon
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     */
    icon(format, theme) {
        return (this.getResourceIcon(format, theme) ||
            this.getGeneralIcon(format, theme) ||
            this.getServiceIcon(format, theme));
    }
    /**
     * Gets the draiwio style for the resource.
     */
    drawioStyle() {
        // compute on first access
        if (this._drawioStyle === undefined) {
            if (this.service.category &&
                this.service.category.drawioStyles &&
                this.drawioShape) {
                this._drawioStyle = this.service.category.drawioStyles.getResourceStyle(this.drawioShape);
            }
            else {
                // prevent recomputation
                this._drawioStyle = null;
            }
        }
        return this._drawioStyle || undefined;
    }
}
exports.AwsResource = AwsResource;
_d = JSII_RTTI_SYMBOL_1;
AwsResource[_d] = { fqn: "@aws/pdk.aws_arch.AwsResource", version: "0.26.14" };
/** @internal */
AwsResource._instanceMap = new Map();
// Register all resources
for (const [cfnKey, mapping] of Object.entries(mappings_1.AwsResourceMapping)) {
    AwsResource._register(cfnKey, mapping);
}
/**
 * AwsArchitecture provides an interface for retrieving the inferred normalization between [@aws-cdk/cfnspec](https://github.com/aws/aws-cdk/blob/main/packages/%40aws-cdk/cfnspec)
 * and [AWS Architecture Icons](https://aws.amazon.com/architecture/icons/) systems
 * for all CloudFormation "services" and "resources".
 */
class AwsArchitecture {
    /**
     * The absolute directory where [AWS Architecture Icons](https://aws.amazon.com/architecture/icons/)
     * are stored and retrieved.
     */
    static get assetDirectory() {
        if (this._assetDirectory == null) {
            this._assetDirectory = path.join(__dirname, "..", ...contants_1.ASSET_DIRNAME.split("/"));
        }
        return this._assetDirectory;
    }
    /**
     * Get all categories
     * @see {@link AwsCategory.categories}
     */
    static get categories() {
        return AwsCategory.categories;
    }
    /**
     * Get all services
     * @see {@link AwsService.services}
     */
    static get services() {
        return AwsService.services;
    }
    /**
     * Get all resources
     * @see {@link AwsResource.resources}
     */
    static get resources() {
        return AwsResource.resources;
    }
    /**
     * Get specific category based on id
     * @see {@link AwsCategory.getCategory}
     */
    static getCategory(category) {
        return AwsCategory.getCategory(category);
    }
    /**
     * Get specific service based on identifier (eg: S3, AWS::S3, AWS::S3::Bucket)
     * @see {@link AwsSerfice.getService}
     */
    static getService(identifier) {
        if (identifier.includes("::")) {
            identifier = identifier.split("::")[1];
        }
        return AwsService.getService(identifier);
    }
    /**
     * Get resource based on Cfn Resource Type (eg: AWS::S3::Bucket)
     * @see {@link AwsResource.getResource}
     */
    static getResource(cfnType) {
        return AwsResource.getResource(cfnType);
    }
    /**
     * Get icon for EC2 instance type.
     * @param instanceType - The {@link AwsAsset.InstanceType} to get icon for
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     */
    static getInstanceTypeIcon(instanceType, format = "png", theme) {
        return this.formatAssetPath(assets_1.AwsAsset.InstanceTypes[instanceType], format, theme);
    }
    /**
     * Get icon for RDS instance type.
     * @param instanceType - The {@link AwsAsset.RdsInstanceType} to get icon for
     * @param {IconFormats} format - The format of icon.
     * @param {Themes} [theme] - Optional theme
     * @returns Returns relative asset icon path
     */
    static getRdsInstanceTypeIcon(instanceType, format = "png", theme) {
        return this.formatAssetPath(assets_1.AwsAsset.RdsInstanceTypes[instanceType], format, theme);
    }
    /**
     * Resolve relative asset path to absolute asset path.
     * @param assetPath - The relative asset path to resolve.
     * @returns {string} Absolute asset path
     * @throws Error if asset path is undefined
     * @throws Error if asset path is not relative
     */
    static resolveAssetPath(assetPath) {
        if (assetPath == null) {
            throw new Error("Failed to resolve undefined asset path");
        }
        if (path.isAbsolute(assetPath)) {
            throw new Error("Asset path must be relative path");
        }
        return path.join(AwsArchitecture.assetDirectory, assetPath);
    }
    /**
     * Resolve relative asset path as SVG [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs).
     *
     * `data:image/svg+xml;base64,...`
     * @param svgAssetPath - The relative path of svg asset to resolve
     * @returns SVG [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)
     * @throws Error if path is not svg
     */
    static resolveAssetSvgDataUrl(svgAssetPath) {
        if (path.extname(svgAssetPath) !== ".svg") {
            throw new Error("Parameter `svgAssetPath` must end with .svg");
        }
        const absolutePath = this.resolveAssetPath(svgAssetPath);
        const svgXml = (0, node_fs_1.readFileSync)(absolutePath, { encoding: "utf-8" });
        const data = Buffer.from(unescape(encodeURIComponent(svgXml)), "utf-8").toString("base64");
        return "data:image/svg+xml;base64," + data;
    }
    /**
     * Gets formatted asset path including extension and theme.
     * @param qualifiedAssetKey The qualified asset key (eg: compute/ec2/service_icon, storage/s3/bucket)
     * @param format {IconFormats} The format to return (eg: png, svg)
     * @param theme {Themes} - (Optional) The theme to use, if not specific or now matching asset for the them, the default theme is used
     * @returns Relative asset file path
     */
    static formatAssetPath(qualifiedAssetKey, format, theme) {
        if (theme && theme !== themes.DefaultThemeId) {
            const themedIcon = `${qualifiedAssetKey}.${theme}.${format}`;
            if (assets_1.AwsAsset.AssetFiles.has(themedIcon)) {
                return themedIcon;
            }
        }
        const icon = `${qualifiedAssetKey}.${format}`;
        if (assets_1.AwsAsset.AssetFiles.has(icon)) {
            return icon;
        }
        throw new Error(`Invalid asset key "${qualifiedAssetKey}"`);
    }
    /**
     * Parse assets path into part descriptor.
     * @param assetPath - Absolute or relative asset file path to parse
     */
    static parseAssetPath(assetPath) {
        if (path.isAbsolute(assetPath)) {
            assetPath = path.relative(AwsArchitecture.assetDirectory, assetPath);
        }
        assetPath = assetPath.replace(/\.(png|svg)$/i, "");
        return (0, helpers_1.parseAssetPath)(assetPath);
    }
    constructor() { }
}
exports.AwsArchitecture = AwsArchitecture;
_e = JSII_RTTI_SYMBOL_1;
AwsArchitecture[_e] = { fqn: "@aws/pdk.aws_arch.AwsArchitecture", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,