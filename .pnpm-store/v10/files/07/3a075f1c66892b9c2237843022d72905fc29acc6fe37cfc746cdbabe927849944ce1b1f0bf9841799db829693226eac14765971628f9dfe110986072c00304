"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPoolAuthenticationProvider = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("aws-cdk-lib/core");
const constructs_1 = require("constructs");
/**
 * Defines a User Pool Authentication Provider
 */
class UserPoolAuthenticationProvider {
    constructor(props) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_UserPoolAuthenticationProviderProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, UserPoolAuthenticationProvider);
            }
            throw error;
        }
        this.userPool = props.userPool;
        this.userPoolClient = props.userPoolClient || this.userPool.addClient('UserPoolAuthenticationProviderClient');
        this.disableServerSideTokenCheck = props.disableServerSideTokenCheck ?? false;
    }
    bind(scope, identityPool, _options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_IIdentityPool(identityPool);
            jsiiDeprecationWarnings._aws_cdk_aws_cognito_identitypool_alpha_UserPoolAuthenticationProviderBindOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        constructs_1.Node.of(identityPool).addDependency(this.userPool);
        constructs_1.Node.of(identityPool).addDependency(this.userPoolClient);
        const region = core_1.Stack.of(scope).region;
        const urlSuffix = core_1.Stack.of(scope).urlSuffix;
        return {
            clientId: this.userPoolClient.userPoolClientId,
            providerName: `cognito-idp.${region}.${urlSuffix}/${this.userPool.userPoolId}`,
            serverSideTokenCheck: !this.disableServerSideTokenCheck,
        };
    }
}
exports.UserPoolAuthenticationProvider = UserPoolAuthenticationProvider;
_a = JSII_RTTI_SYMBOL_1;
UserPoolAuthenticationProvider[_a] = { fqn: "@aws-cdk/aws-cognito-identitypool-alpha.UserPoolAuthenticationProvider", version: "2.163.1-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHlwb29sLXVzZXItcG9vbC1hdXRoZW50aWNhdGlvbi1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlkZW50aXR5cG9vbC11c2VyLXBvb2wtYXV0aGVudGljYXRpb24tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUEsMkNBQXlDO0FBQ3pDLDJDQUVvQjtBQXFFcEI7O0dBRUc7QUFDSCxNQUFhLDhCQUE4QjtJQWdCekMsWUFBWSxLQUEwQzs7Ozs7OytDQWhCM0MsOEJBQThCOzs7O1FBaUJ2QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQywyQkFBMkIsSUFBSSxLQUFLLENBQUM7S0FDL0U7SUFFTSxJQUFJLENBQ1QsS0FBZ0IsRUFDaEIsWUFBMkIsRUFDM0IsUUFBb0Q7Ozs7Ozs7Ozs7O1FBRXBELGlCQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkQsaUJBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN6RCxNQUFNLE1BQU0sR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN0QyxNQUFNLFNBQVMsR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUU1QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCO1lBQzlDLFlBQVksRUFBRSxlQUFlLE1BQU0sSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7WUFDOUUsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCO1NBQ3hELENBQUM7S0FDSDs7QUFyQ0gsd0VBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSVVzZXJQb29sLFxuICBJVXNlclBvb2xDbGllbnQsXG59IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jb2duaXRvJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWIvY29yZSc7XG5pbXBvcnQge1xuICBDb25zdHJ1Y3QsIE5vZGUsXG59IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgSUlkZW50aXR5UG9vbCB9IGZyb20gJy4vaWRlbnRpdHlwb29sJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBjb25jZXB0IG9mIGEgVXNlciBQb29sIEF1dGhlbnRpY2F0aW9uIFByb3ZpZGVyLlxuICogWW91IHVzZSB1c2VyIHBvb2wgYXV0aGVudGljYXRpb24gcHJvdmlkZXJzIHRvIGNvbmZpZ3VyZSBVc2VyIFBvb2xzXG4gKiBhbmQgVXNlciBQb29sIENsaWVudHMgZm9yIHVzZSB3aXRoIElkZW50aXR5IFBvb2xzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXJQb29sQXV0aGVudGljYXRpb25Qcm92aWRlciB7XG4gIC8qKlxuICAgKiBUaGUgbWV0aG9kIGNhbGxlZCB3aGVuIGEgZ2l2ZW4gVXNlciBQb29sIEF1dGhlbnRpY2F0aW9uIFByb3ZpZGVyIGlzIGFkZGVkXG4gICAqIChmb3IgdGhlIGZpcnN0IHRpbWUpIHRvIGFuIElkZW50aXR5IFBvb2wuXG4gICAqL1xuICBiaW5kKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWRlbnRpdHlQb29sOiBJSWRlbnRpdHlQb29sLFxuICAgIG9wdGlvbnM/OiBVc2VyUG9vbEF1dGhlbnRpY2F0aW9uUHJvdmlkZXJCaW5kT3B0aW9uc1xuICApOiBVc2VyUG9vbEF1dGhlbnRpY2F0aW9uUHJvdmlkZXJCaW5kQ29uZmlnO1xufVxuXG4vKipcbiAqIFByb3BzIGZvciB0aGUgVXNlciBQb29sIEF1dGhlbnRpY2F0aW9uIFByb3ZpZGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclBvb2xBdXRoZW50aWNhdGlvblByb3ZpZGVyUHJvcHMge1xuICAvKipcbiAgICogVGhlIFVzZXIgUG9vbCBvZiB0aGUgQXNzb2NpYXRlZCBJZGVudGl0eSBQcm92aWRlcnNcbiAgICovXG4gIHJlYWRvbmx5IHVzZXJQb29sOiBJVXNlclBvb2w7XG5cbiAgLyoqXG4gICAqIFRoZSBVc2VyIFBvb2wgQ2xpZW50IGZvciB0aGUgcHJvdmlkZWQgVXNlciBQb29sXG4gICAqIEBkZWZhdWx0IC0gQSBkZWZhdWx0IHVzZXIgcG9vbCBjbGllbnQgd2lsbCBiZSBhZGRlZCB0byBVc2VyIFBvb2xcbiAgICovXG4gIHJlYWRvbmx5IHVzZXJQb29sQ2xpZW50PzogSVVzZXJQb29sQ2xpZW50O1xuXG4gIC8qKlxuICAgKiBTZXR0aW5nIHRoaXMgdG8gdHJ1ZSB0dXJucyBvZmYgaWRlbnRpdHkgcG9vbCBjaGVja3MgZm9yIHRoaXMgdXNlciBwb29sIHRvIG1ha2Ugc3VyZSB0aGUgdXNlciBoYXMgbm90IGJlZW4gZ2xvYmFsbHkgc2lnbmVkIG91dCBvciBkZWxldGVkIGJlZm9yZSB0aGUgaWRlbnRpdHkgcG9vbCBwcm92aWRlcyBhbiBPSURDIHRva2VuIG9yIEFXUyBjcmVkZW50aWFscyBmb3IgdGhlIHVzZXJcbiAgICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS9hd3MtcHJvcGVydGllcy1jb2duaXRvLWlkZW50aXR5cG9vbC1jb2duaXRvaWRlbnRpdHlwcm92aWRlci5odG1sXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBkaXNhYmxlU2VydmVyU2lkZVRva2VuQ2hlY2s/OiBib29sZWFuO1xuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBVc2VyUG9vbEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIgQmluZCBPcHRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclBvb2xBdXRoZW50aWNhdGlvblByb3ZpZGVyQmluZE9wdGlvbnMge31cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgVXNlclBvb2xBdXRoZW50aWNhdGlvblByb3ZpZGVyIEJpbmQgQ29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJQb29sQXV0aGVudGljYXRpb25Qcm92aWRlckJpbmRDb25maWcge1xuICAvKipcbiAgICogQ2xpZW50IElkIG9mIHRoZSBBc3NvY2lhdGVkIFVzZXIgUG9vbCBDbGllbnRcbiAgICovXG4gIHJlYWRvbmx5IGNsaWVudElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGl0eSBwcm92aWRlcnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBVc2VyUG9vbFxuICAgKi9cbiAgcmVhZG9ubHkgcHJvdmlkZXJOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBpZGVudGl0eSBwb29sJ3Mgc2VydmVyIHNpZGUgdG9rZW4gY2hlY2tcbiAgICovXG4gIHJlYWRvbmx5IHNlcnZlclNpZGVUb2tlbkNoZWNrOiBib29sZWFuO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBVc2VyIFBvb2wgQXV0aGVudGljYXRpb24gUHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJQb29sQXV0aGVudGljYXRpb25Qcm92aWRlciBpbXBsZW1lbnRzIElVc2VyUG9vbEF1dGhlbnRpY2F0aW9uUHJvdmlkZXIge1xuXG4gIC8qKlxuICAgKiBUaGUgVXNlciBQb29sIG9mIHRoZSBBc3NvY2lhdGVkIElkZW50aXR5IFByb3ZpZGVyc1xuICAgKi9cbiAgcHJpdmF0ZSB1c2VyUG9vbDogSVVzZXJQb29sO1xuXG4gIC8qKlxuICAgKiBUaGUgVXNlciBQb29sIENsaWVudCBmb3IgdGhlIHByb3ZpZGVkIFVzZXIgUG9vbFxuICAgKi9cbiAgcHJpdmF0ZSB1c2VyUG9vbENsaWVudDogSVVzZXJQb29sQ2xpZW50O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRpc2FibGUgdGhlIHBvb2wncyBkZWZhdWx0IHNlcnZlciBzaWRlIHRva2VuIGNoZWNrXG4gICAqL1xuICBwcml2YXRlIGRpc2FibGVTZXJ2ZXJTaWRlVG9rZW5DaGVjazogYm9vbGVhblxuICBjb25zdHJ1Y3Rvcihwcm9wczogVXNlclBvb2xBdXRoZW50aWNhdGlvblByb3ZpZGVyUHJvcHMpIHtcbiAgICB0aGlzLnVzZXJQb29sID0gcHJvcHMudXNlclBvb2w7XG4gICAgdGhpcy51c2VyUG9vbENsaWVudCA9IHByb3BzLnVzZXJQb29sQ2xpZW50IHx8IHRoaXMudXNlclBvb2wuYWRkQ2xpZW50KCdVc2VyUG9vbEF1dGhlbnRpY2F0aW9uUHJvdmlkZXJDbGllbnQnKTtcbiAgICB0aGlzLmRpc2FibGVTZXJ2ZXJTaWRlVG9rZW5DaGVjayA9IHByb3BzLmRpc2FibGVTZXJ2ZXJTaWRlVG9rZW5DaGVjayA/PyBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBiaW5kKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWRlbnRpdHlQb29sOiBJSWRlbnRpdHlQb29sLFxuICAgIF9vcHRpb25zPzogVXNlclBvb2xBdXRoZW50aWNhdGlvblByb3ZpZGVyQmluZE9wdGlvbnMsXG4gICk6IFVzZXJQb29sQXV0aGVudGljYXRpb25Qcm92aWRlckJpbmRDb25maWcge1xuICAgIE5vZGUub2YoaWRlbnRpdHlQb29sKS5hZGREZXBlbmRlbmN5KHRoaXMudXNlclBvb2wpO1xuICAgIE5vZGUub2YoaWRlbnRpdHlQb29sKS5hZGREZXBlbmRlbmN5KHRoaXMudXNlclBvb2xDbGllbnQpO1xuICAgIGNvbnN0IHJlZ2lvbiA9IFN0YWNrLm9mKHNjb3BlKS5yZWdpb247XG4gICAgY29uc3QgdXJsU3VmZml4ID0gU3RhY2sub2Yoc2NvcGUpLnVybFN1ZmZpeDtcblxuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRJZDogdGhpcy51c2VyUG9vbENsaWVudC51c2VyUG9vbENsaWVudElkLFxuICAgICAgcHJvdmlkZXJOYW1lOiBgY29nbml0by1pZHAuJHtyZWdpb259LiR7dXJsU3VmZml4fS8ke3RoaXMudXNlclBvb2wudXNlclBvb2xJZH1gLFxuICAgICAgc2VydmVyU2lkZVRva2VuQ2hlY2s6ICF0aGlzLmRpc2FibGVTZXJ2ZXJTaWRlVG9rZW5DaGVjayxcbiAgICB9O1xuICB9XG59Il19