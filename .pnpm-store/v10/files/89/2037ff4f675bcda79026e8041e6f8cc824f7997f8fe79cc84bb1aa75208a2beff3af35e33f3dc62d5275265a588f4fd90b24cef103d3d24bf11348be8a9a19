"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Biome = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("node:path");
const fast_json_patch_1 = require("fast-json-patch");
const biome_config_1 = require("./biome-config");
const component_1 = require("../../component");
const json_1 = require("../../json");
const util_1 = require("../../util");
const util_2 = require("../util");
/**
 * Enabling VCS configuration by default.
 *
 * Note that this differs from `biome init`, as projen can be presumed to use version control
 */
const DEFAULT_CONFIG = {
    vcs: {
        clientKind: biome_config_1.VcsClientKind.GIT,
        enabled: true,
        useIgnoreFile: true,
    },
    files: {
        ignoreUnknown: false,
    },
};
/**
 * Default linting configuration if linter is enabled.
 *
 * Ignores by default following patterns: '*.js', '*.d.ts', 'node_modules/', '*.generated.ts', 'coverage'.
 */
const DEFAULT_LINTER = {
    linter: {
        enabled: true,
        rules: {
            recommended: true,
        },
    },
};
/**
 * Default formatting configuration if formatter is enabled.
 */
const DEFAULT_FORMATTER = {
    formatter: {
        enabled: true,
        indentStyle: biome_config_1.IndentStyle.TAB,
    },
    javascript: {
        formatter: {
            quoteStyle: biome_config_1.QuoteStyle.DOUBLE,
        },
    },
};
/**
 * Default code assist actions
 */
const DEFAULT_ASSIST = {
    assist: {
        enabled: true,
        actions: {
            recommended: true,
        },
    },
};
/**
 * Biome component.
 */
class Biome extends component_1.Component {
    static of(project) {
        const isBiome = (c) => c instanceof Biome;
        return project.components.find(isBiome);
    }
    constructor(project, options = {}) {
        super(project);
        this.biomeCommand = "biome check --no-errors-on-unmatched --write";
        const biomejs = `@biomejs/biome`;
        project.addDevDeps(`${biomejs}@${options.version ?? "^2"}`);
        const defaultConfig = {
            ...DEFAULT_CONFIG,
            ...(options.linter ?? true ? DEFAULT_LINTER : {}),
            ...(options.formatter ?? true ? DEFAULT_FORMATTER : {}),
            ...(options.assist ?? true ? DEFAULT_ASSIST : {}),
        };
        this._filePatterns = new Set([
            ...(0, fast_json_patch_1.deepClone)(options.biomeConfig?.files?.includes ?? []),
            ...(0, fast_json_patch_1.deepClone)(defaultConfig.files?.includes ?? []),
        ]);
        // Get generated file patterns to ignore
        const getGeneratedIgnorePatterns = () => {
            if (options.ignoreGeneratedFiles === false) {
                return [];
            }
            const generatedFiles = this.project.files
                .filter((file) => file.readonly && file.marker)
                .map((file) => `!${file.path}`);
            return generatedFiles;
        };
        this.biomeConfiguration = (0, util_1.deepMerge)([
            (0, biome_config_1.toJson_BiomeConfiguration)((0, fast_json_patch_1.deepClone)(defaultConfig)),
            (0, biome_config_1.toJson_BiomeConfiguration)((0, fast_json_patch_1.deepClone)(options.biomeConfig ?? {})),
            {
                $schema: () => {
                    const resolvedSchema = (0, util_2.tryResolveModule)(`${biomejs}/configuration_schema.json`, { paths: [this.project.outdir] });
                    if (
                    // not found
                    !resolvedSchema ||
                        // not within the project dir
                        !path
                            .resolve(resolvedSchema)
                            .startsWith(path.resolve(this.project.outdir))) {
                        return "https://biomejs.dev/schemas/latest/schema.json";
                    }
                    return (0, util_1.normalizePersistedPath)(path.relative(this.project.outdir, resolvedSchema));
                },
                files: {
                    includes: () => {
                        const patterns = Array.from(this._filePatterns);
                        const generatedPatterns = getGeneratedIgnorePatterns();
                        // Use Set to deduplicate patterns
                        return [...new Set([...patterns, ...generatedPatterns])];
                    },
                },
            },
        ], { mergeArrays: options.mergeArraysInConfiguration ?? true });
        this.file = new (class extends json_1.JsonFile {
            get marker() {
                return `biome-ignore-all format: ${super.marker ?? "generated file"}`;
            }
        })(this, "biome.jsonc", {
            obj: this.biomeConfiguration,
            allowComments: true,
            marker: true,
            readonly: false, // biome will always re-write the config file
        });
        this.task = this.createLocalBiomeTask();
        project.testTask.spawn(this.task);
    }
    addFilePattern(pattern) {
        this._filePatterns.add(pattern);
    }
    createLocalBiomeTask() {
        return this.project.addTask("biome", {
            description: "Runs Biome against the codebase",
            steps: [
                {
                    exec: this.biomeCommand,
                    receiveArgs: true,
                },
            ],
        });
    }
}
exports.Biome = Biome;
_a = JSII_RTTI_SYMBOL_1;
Biome[_a] = { fqn: "projen.javascript.Biome", version: "0.95.4" };
//# sourceMappingURL=data:application/json;base64,