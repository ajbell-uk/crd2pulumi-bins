"use strict";
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagEnum = exports.ReferenceTypeEnum = exports.EdgeDirectionEnum = exports.EdgeTypeEnum = exports.NodeTypeEnum = exports.MetadataTypeEnum = exports.CfnAttributesEnum = exports.CfnResourceTypes = exports.CustomResourceFqns = exports.ExtraneousFqns = exports.AssetFqns = exports.ConstructInfoFqnEnum = exports.CdkConstructIds = void 0;
/** Common cdk construct ids */
var CdkConstructIds;
(function (CdkConstructIds) {
    CdkConstructIds["DEFAULT"] = "Default";
    CdkConstructIds["RESOURCE"] = "Resource";
    CdkConstructIds["EXPORTS"] = "Exports";
})(CdkConstructIds || (exports.CdkConstructIds = CdkConstructIds = {}));
/** Commonly used cdk construct info fqn (jsii fully-qualified ids) */
var ConstructInfoFqnEnum;
(function (ConstructInfoFqnEnum) {
    ConstructInfoFqnEnum["APP"] = "aws-cdk-lib.App";
    ConstructInfoFqnEnum["PDKAPP_MONO"] = "@aws/pdk.pdk_nag.PDKNagApp";
    ConstructInfoFqnEnum["PDKAPP"] = "@aws/pdk-nag.PDKNagApp";
    ConstructInfoFqnEnum["STAGE"] = "aws-cdk-lib.Stage";
    ConstructInfoFqnEnum["STACK"] = "aws-cdk-lib.Stack";
    ConstructInfoFqnEnum["NESTED_STACK"] = "aws-cdk-lib.NestedStack";
    ConstructInfoFqnEnum["CFN_STACK"] = "aws-cdk-lib.CfnStack";
    ConstructInfoFqnEnum["CFN_OUTPUT"] = "aws-cdk-lib.CfnOutput";
    ConstructInfoFqnEnum["CFN_PARAMETER"] = "aws-cdk-lib.CfnParameter";
    // Custom Resources
    ConstructInfoFqnEnum["CUSTOM_RESOURCE"] = "aws-cdk-lib.CustomResource";
    ConstructInfoFqnEnum["AWS_CUSTOM_RESOURCE"] = "aws-cdk-lib.custom_resources.AwsCustomResource";
    ConstructInfoFqnEnum["CUSTOM_RESOURCE_PROVIDER"] = "aws-cdk-lib.custom_resources.Provider";
    ConstructInfoFqnEnum["CUSTOM_RESOURCE_PROVIDER_2"] = "aws-cdk-lib.CustomResourceProvider";
    // Lambda
    ConstructInfoFqnEnum["LAMBDA"] = "aws-cdk-lib.aws_lambda.Function";
    ConstructInfoFqnEnum["CFN_LAMBDA"] = "aws-cdk-lib.aws_lambda.CfnFunction";
    ConstructInfoFqnEnum["LAMBDA_LAYER_VERSION"] = "aws-cdk-lib.aws_lambda.LayerVersion";
    ConstructInfoFqnEnum["CFN_LAMBDA_LAYER_VERSION"] = "aws-cdk-lib.aws_lambda.CfnLayerVersion";
    ConstructInfoFqnEnum["LAMBDA_ALIAS"] = "aws-cdk-lib.aws_lambda.Alias";
    ConstructInfoFqnEnum["CFN_LAMBDA_ALIAS"] = "aws-cdk-lib.aws_lambda.CfnAlias";
    ConstructInfoFqnEnum["LAMBDA_BASE"] = "aws-cdk-lib.aws_lambda.FunctionBase";
    ConstructInfoFqnEnum["LAMBDA_SINGLETON"] = "aws-cdk-lib.aws_lambda.SingletonFunction";
    ConstructInfoFqnEnum["LAMBDA_LAYER_AWSCLI"] = "aws-cdk-lib.lambda_layer_awscli.AwsCliLayer";
    ConstructInfoFqnEnum["CFN_LAMBDA_PERMISSIONS"] = "aws-cdk-lib.aws_lambda.CfnPermission";
    // Assets
    ConstructInfoFqnEnum["ASSET_STAGING"] = "aws-cdk-lib.AssetStaging";
    ConstructInfoFqnEnum["S3_ASSET"] = "aws-cdk-lib.aws_s3_assets.Asset";
    ConstructInfoFqnEnum["ECR_TARBALL_ASSET"] = "aws-cdk-lib.aws_ecr_assets.TarballImageAsset";
    // EC2
    ConstructInfoFqnEnum["EC2_INSTANCE"] = "aws-cdk-lib.aws_ec2.Instance";
    ConstructInfoFqnEnum["CFN_EC2_INSTANCE"] = "aws-cdk-lib.aws_ec2.CfnInstance";
    ConstructInfoFqnEnum["SECURITY_GROUP"] = "aws-cdk-lib.aws_ec2.SecurityGroup";
    ConstructInfoFqnEnum["CFN_SECURITY_GROUP"] = "aws-cdk-lib.aws_ec2.CfnSecurityGroup";
    ConstructInfoFqnEnum["VPC"] = "aws-cdk-lib.aws_ec2.Vpc";
    ConstructInfoFqnEnum["CFN_VPC"] = "aws-cdk-lib.aws_ec2.CfnVpc";
    ConstructInfoFqnEnum["PRIVATE_SUBNET"] = "aws-cdk-lib.aws_ec2.PrivateSubnet";
    ConstructInfoFqnEnum["CFN_PRIVATE_SUBNET"] = "aws-cdk-lib.aws_ec2.CfnPrivateSubnet";
    ConstructInfoFqnEnum["PUBLIC_SUBNET"] = "aws-cdk-lib.aws_ec2.PublicSubnet";
    ConstructInfoFqnEnum["CFN_PUBLIC_SUBNET"] = "aws-cdk-lib.aws_ec2.CfnPublicSubnet";
    // IAM
    ConstructInfoFqnEnum["IAM_ROLE"] = "aws-cdk-lib.aws_iam.Role";
})(ConstructInfoFqnEnum || (exports.ConstructInfoFqnEnum = ConstructInfoFqnEnum = {}));
/** Fqns that denote a cdk asset */
exports.AssetFqns = [
    ConstructInfoFqnEnum.S3_ASSET,
    ConstructInfoFqnEnum.ECR_TARBALL_ASSET,
];
/** Fqns considered extraneous */
exports.ExtraneousFqns = [
    ...exports.AssetFqns,
    ConstructInfoFqnEnum.ASSET_STAGING,
    ConstructInfoFqnEnum.LAMBDA_LAYER_VERSION,
    ConstructInfoFqnEnum.CFN_LAMBDA_LAYER_VERSION,
    ConstructInfoFqnEnum.LAMBDA_ALIAS,
    ConstructInfoFqnEnum.CFN_LAMBDA_ALIAS,
    ConstructInfoFqnEnum.LAMBDA_BASE,
    ConstructInfoFqnEnum.LAMBDA_SINGLETON,
    ConstructInfoFqnEnum.LAMBDA_LAYER_AWSCLI,
    ConstructInfoFqnEnum.CFN_LAMBDA_PERMISSIONS,
];
/** Fqns that denote CDK CustomResources */
exports.CustomResourceFqns = [
    ConstructInfoFqnEnum.CUSTOM_RESOURCE,
    ConstructInfoFqnEnum.AWS_CUSTOM_RESOURCE,
    ConstructInfoFqnEnum.CUSTOM_RESOURCE_PROVIDER,
    ConstructInfoFqnEnum.CUSTOM_RESOURCE_PROVIDER_2,
];
/**
 * Enum of specific Cfn Resource Types
 * @internal
 */
var CfnResourceTypes;
(function (CfnResourceTypes) {
    CfnResourceTypes["CUSTOM_RESOURCE"] = "AWS::CloudFormation::CustomResource";
})(CfnResourceTypes || (exports.CfnResourceTypes = CfnResourceTypes = {}));
/** Common cfn attribute keys */
var CfnAttributesEnum;
(function (CfnAttributesEnum) {
    CfnAttributesEnum["TYPE"] = "aws:cdk:cloudformation:type";
    CfnAttributesEnum["PROPS"] = "aws:cdk:cloudformation:props";
})(CfnAttributesEnum || (exports.CfnAttributesEnum = CfnAttributesEnum = {}));
/** Common cdk metadata types */
var MetadataTypeEnum;
(function (MetadataTypeEnum) {
    MetadataTypeEnum["LOGICAL_ID"] = "aws:cdk:logicalId";
})(MetadataTypeEnum || (exports.MetadataTypeEnum = MetadataTypeEnum = {}));
/** Node types handled by the graph */
var NodeTypeEnum;
(function (NodeTypeEnum) {
    /** Default node type - used for all nodes that don't have explicit type defined */
    NodeTypeEnum["DEFAULT"] = "DEFAULT";
    /** L1 cfn resource node */
    NodeTypeEnum["CFN_RESOURCE"] = "CFN_RESOURCE";
    /** L2 cdk resource node */
    NodeTypeEnum["RESOURCE"] = "RESOURCE";
    /** Cdk customer resource node */
    NodeTypeEnum["CUSTOM_RESOURCE"] = "CUSTOM_RESOURCE";
    /** Graph root node */
    NodeTypeEnum["ROOT"] = "ROOT";
    /** Cdk App node */
    NodeTypeEnum["APP"] = "APP";
    /** Cdk Stage node */
    NodeTypeEnum["STAGE"] = "STAGE";
    /** Cdk Stack node */
    NodeTypeEnum["STACK"] = "STACK";
    /** Cdk NestedStack node */
    NodeTypeEnum["NESTED_STACK"] = "NESTED_STACK";
    /** CfnOutput node */
    NodeTypeEnum["OUTPUT"] = "OUTPUT";
    /** CfnParameter node */
    NodeTypeEnum["PARAMETER"] = "PARAMETER";
    /** Cdk asset node */
    NodeTypeEnum["ASSET"] = "ASSET";
})(NodeTypeEnum || (exports.NodeTypeEnum = NodeTypeEnum = {}));
/** Edge types handles by the graph */
var EdgeTypeEnum;
(function (EdgeTypeEnum) {
    /** Custom edge */
    EdgeTypeEnum["CUSTOM"] = "CUSTOM";
    /** Reference edge (Ref, Fn::GetAtt, Fn::ImportValue) */
    EdgeTypeEnum["REFERENCE"] = "REFERENCE";
    /** CloudFormation dependency edge */
    EdgeTypeEnum["DEPENDENCY"] = "DEPENDENCY";
})(EdgeTypeEnum || (exports.EdgeTypeEnum = EdgeTypeEnum = {}));
/**
 * EdgeDirection specifies in which direction the edge is directed or if it is undirected.
 */
var EdgeDirectionEnum;
(function (EdgeDirectionEnum) {
    /** Indicates that edge is *undirected*; meaning there is no directional relationship between the **source** and **target**. */
    EdgeDirectionEnum["NONE"] = "none";
    /** Indicates the edge is *directed* from the **source** to the **target** */
    EdgeDirectionEnum["FORWARD"] = "forward";
    /** Indicates the edge is *directed* from the **target** to the **source** */
    EdgeDirectionEnum["BACK"] = "back";
    /** Indicates the edge is *bi-directional* */
    EdgeDirectionEnum["BOTH"] = "both";
})(EdgeDirectionEnum || (exports.EdgeDirectionEnum = EdgeDirectionEnum = {}));
/** Reference edge types */
var ReferenceTypeEnum;
(function (ReferenceTypeEnum) {
    /** CloudFormation **Ref** reference */
    ReferenceTypeEnum["REF"] = "Ref";
    /** CloudFormation **Fn::GetAtt** reference */
    ReferenceTypeEnum["ATTRIBUTE"] = "Fn::GetAtt";
    /** CloudFormation **Fn::ImportValue** reference */
    ReferenceTypeEnum["IMPORT"] = "Fn::ImportValue";
    /** CloudFormation **Fn::Join** reference of imported resourced (eg: `s3.Bucket.fromBucketArn()`) */
    ReferenceTypeEnum["IMPORT_ARN"] = "Fn::Join::arn";
})(ReferenceTypeEnum || (exports.ReferenceTypeEnum = ReferenceTypeEnum = {}));
/** Graph flags */
var FlagEnum;
(function (FlagEnum) {
    /** Indicates that node is a cluster (container) and treated like an emphasized subgraph. */
    FlagEnum["CLUSTER"] = "CLUSTER";
    /** Indicates that node is non-resource container (Root, App) and used for structural purpose in the graph only. */
    FlagEnum["GRAPH_CONTAINER"] = "GRAPH_CONTAINER";
    /** Indicates that the entity is extraneous and considered collapsible to parent without impact of intent. */
    FlagEnum["EXTRANEOUS"] = "EXTRANEOUS";
    /** Indicates node is considered a CDK Asset (Lambda Code, Docker Image, etc). */
    FlagEnum["ASSET"] = "ASSET";
    /**
     * Indicates that node was created by CDK.
     * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.Resource.html#static-iswbrownedwbrresourceconstruct
     */
    FlagEnum["CDK_OWNED"] = "CDK_OWNED";
    /**
     * Indicates node ConstructInfoFqn denotes a `aws-cdk-lib.*.Cfn*` construct.
     */
    FlagEnum["CFN_FQN"] = "CFN_FQN";
    /** Indicates that edge is closed; meaning `source === target`. This flag only gets applied on creation of edge, not during mutations to maintain initial intent. */
    FlagEnum["CLOSED_EDGE"] = "CLOSED_EDGE";
    /** Indicates that entity was mutated; meaning a mutation was performed to change originally computed graph value. */
    FlagEnum["MUTATED"] = "MUTATED";
    /** Indicates that resource is imported into CDK (eg: `lambda.Function.fromFunctionName()`, `s3.Bucket.fromBucketArn()`) */
    FlagEnum["IMPORT"] = "IMPORT";
    /**
     * Indicates if node is a CustomResource
     * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources-readme.html
     */
    FlagEnum["CUSTOM_RESOURCE"] = "CUSTOM_RESOURCE";
    /**
     * Indicates if node is an AwsCustomResource, which is a custom resource that simply calls
     * the AWS SDK API via singleton provider.
     * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html
     */
    FlagEnum["AWS_CUSTOM_RESOURCE"] = "AWS_CUSTOM_RESOURCE";
    /**
     * Indicates if lambda function resource is a singleton AWS API call lambda for AwsCustomResources.
     * @see https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html
     */
    FlagEnum["AWS_API_CALL_LAMBDA"] = "AWS_API_CALL_LAMBDA";
})(FlagEnum || (exports.FlagEnum = FlagEnum = {}));
//# sourceMappingURL=data:application/json;base64,