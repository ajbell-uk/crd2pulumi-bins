"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkGraphDiagramPlugin = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const child_process_1 = require("child_process");
const path = require("path");
const cdk_graph_1 = require("../cdk-graph");
const chalk = require("chalk"); // eslint-disable-line @typescript-eslint/no-require-imports
const fs = require("fs-extra");
const adapter_1 = require("ts-graphviz/adapter");
const config_1 = require("./config");
const debug_1 = require("./internal/debug");
const diagram_1 = require("./internal/graphviz/diagram");
const svg_1 = require("./internal/utils/svg");
/**
 * CdkGraphDiagramPlugin is a {@link ICdkGraphPlugin CdkGraph Plugin} implementation for generating
 * diagram artifacts from the {@link CdkGraph} framework.
 */
class CdkGraphDiagramPlugin {
    /** Get standardized artifact id for diagram artifacts */
    static artifactId(name, format) {
        if (name === config_1.DEFAULT_DIAGRAM_NAME) {
            return `${this.ARTIFACT_NS}_${format.toUpperCase()}`;
        }
        return `${this.ARTIFACT_NS}_${name.toUpperCase()}_${format.toUpperCase()}`;
    }
    /** Get standardized artifact file name for diagram artifacts */
    static artifactFilename(name, format) {
        if (name === config_1.DEFAULT_DIAGRAM_NAME) {
            return `${this.ARTIFACT_NS.toLowerCase()}.${format}`;
        }
        return `${this.ARTIFACT_NS.toLowerCase()}.${name}.${format}`;
    }
    /** @inheritdoc */
    get id() {
        return CdkGraphDiagramPlugin.ID;
    }
    /** @inheritdoc */
    get version() {
        return CdkGraphDiagramPlugin.VERSION;
    }
    /** Get default dot artifact */
    get defaultDotArtifact() {
        try {
            return this.getDiagramArtifact(config_1.DEFAULT_DIAGRAM_NAME, config_1.DiagramFormat.DOT);
        }
        catch {
            return;
        }
    }
    /** Get default PNG artifact */
    get defaultPngArtifact() {
        try {
            return this.getDiagramArtifact(config_1.DEFAULT_DIAGRAM_NAME, config_1.DiagramFormat.PNG);
        }
        catch {
            return;
        }
    }
    /** Get diagram plugin config */
    get config() {
        if (this._config != null) {
            return this._config;
        }
        throw new Error("Plugin config has not been instantiated, ensure bind is called");
    }
    constructor(config) {
        /** @inheritdoc */
        this.dependencies = [];
        /** @inheritdoc */
        this.bind = (graph) => {
            this._graph = graph;
            const rc = (graph.config[CdkGraphDiagramPlugin.ID] ||
                {});
            let diagrams = [
                ...(rc.diagrams || []),
                ...(this._config?.diagrams || []),
            ];
            if (diagrams.length === 0) {
                diagrams = [config_1.DEFAULT_DIAGRAM];
            }
            this._config = {
                defaults: {
                    ...config_1.CONFIG_DEFAULTS,
                    ...rc.defaults,
                    ...this._config?.defaults,
                },
                diagrams,
            };
        };
        this.streamToBuffer = (stream) => {
            const chunks = [];
            return new Promise((resolve, reject) => {
                stream.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
                stream.on("error", (err) => reject(err));
                stream.on("end", () => resolve(Buffer.concat(chunks)));
            });
        };
        this.isGraphvizInstalledGlobally = () => {
            try {
                (0, child_process_1.execSync)("dot -V", { stdio: "ignore" });
                return true;
            }
            catch (e) {
                console.warn(chalk.yellowBright("SVG and PNG are not supported as graphviz is not installed. Please install graphviz (https://graphviz.org/download/) globally and re-try."));
                return false;
            }
        };
        /** @inheritdoc */
        this.report = async (context) => {
            const pluginConfig = this.config;
            for (const diagramConfig of pluginConfig.diagrams) {
                const config = {
                    ...(diagramConfig.ignoreDefaults ? {} : pluginConfig.defaults),
                    ...diagramConfig,
                };
                let formats = Array.isArray(config.format)
                    ? config.format
                    : [config.format || config_1.DiagramFormat.PNG];
                if (!formats.length) {
                    throw new Error(`Diagram config specifies empty list of formats; must provide at least 1 or undefined to use default.`);
                }
                // each diagram is destructive, so we need a clone
                const store = context.store.clone();
                if (config.filterPlan) {
                    (0, cdk_graph_1.performGraphFilterPlan)(store, config.filterPlan);
                }
                const generatePng = formats.includes(config_1.DiagramFormat.PNG);
                const generateSvg = generatePng || formats.includes(config_1.DiagramFormat.SVG);
                const generateDot = generateSvg || formats.includes(config_1.DiagramFormat.DOT);
                debug_1.IS_DEBUG &&
                    context.writeArtifact(this, "filtered.graph." + config.name + "", "debug/filtered-graph/" + config.name + ".json", JSON.stringify(store.serialize(), null, 2), "DEBUG");
                const diagram = (0, diagram_1.buildDiagram)(store, {
                    title: config.title,
                    preset: config.filterPlan?.preset,
                    theme: config.theme,
                    nodePositions: config.nodePositions,
                });
                // Only the neato- and fdp layout engines support node positions
                const layout = config.nodePositions ? "fdp" : undefined;
                const dot = diagram.toDot();
                if (generateDot) {
                    // Graphviz provider
                    context.writeArtifact(this, CdkGraphDiagramPlugin.artifactId(config.name, config_1.DiagramFormat.DOT), CdkGraphDiagramPlugin.artifactFilename(config.name, config_1.DiagramFormat.DOT), dot, `Diagram generated "dot" file for ${config.name} - "${config.title}"`);
                    if (generateSvg && this.isGraphvizInstalledGlobally()) {
                        const svgFile = path.join(context.outdir, CdkGraphDiagramPlugin.artifactFilename(config.name, config_1.DiagramFormat.SVG));
                        const svg = await this.streamToBuffer(await (0, adapter_1.toStream)(dot, { format: "svg", layout }));
                        const resolvedSvg = await (0, svg_1.resolveSvgAwsArchAssetImagesInline)(svg.toString());
                        fs.ensureDirSync(path.dirname(svgFile));
                        fs.writeFileSync(svgFile, resolvedSvg);
                        context.logArtifact(this, CdkGraphDiagramPlugin.artifactId(config.name, config_1.DiagramFormat.SVG), svgFile, `Diagram generated "svg" file for ${config.name} - "${config.title}"`);
                        if (generatePng && this.isGraphvizInstalledGlobally()) {
                            const pngFile = path.join(context.outdir, CdkGraphDiagramPlugin.artifactFilename(config.name, config_1.DiagramFormat.PNG));
                            try {
                                // SVG's don't render correctly in non-svg formats. Replace with png equivalent.
                                const pngifiedDot = dot.replace(/\.svg/g, ".png");
                                const png = await this.streamToBuffer(await (0, adapter_1.toStream)(pngifiedDot, {
                                    format: "png",
                                    layout,
                                }));
                                fs.ensureDirSync(path.dirname(pngFile));
                                fs.writeFileSync(pngFile, png);
                                context.logArtifact(this, CdkGraphDiagramPlugin.artifactId(config.name, config_1.DiagramFormat.PNG), pngFile, `Diagram generated "png" file for ${config.name} - "${config.title}"`);
                            }
                            catch (error) {
                                console.error(error);
                                throw new Error(`Failed to generate PNG diagram for ${config.name} at "${pngFile}" - ${String(error)}`);
                            }
                        }
                    }
                }
                // NB: add drawio provider support here
            }
        };
        this._config = config;
    }
    /** Get diagram artifact for a given name and format */
    getDiagramArtifact(name, format) {
        return this._graph?.graphContext?.getArtifact(CdkGraphDiagramPlugin.artifactId(name, format));
    }
}
exports.CdkGraphDiagramPlugin = CdkGraphDiagramPlugin;
_a = JSII_RTTI_SYMBOL_1;
CdkGraphDiagramPlugin[_a] = { fqn: "@aws/pdk.cdk_graph_plugin_diagram.CdkGraphDiagramPlugin", version: "0.26.14" };
/** Namespace for artifacts of the diagram plugin */
CdkGraphDiagramPlugin.ARTIFACT_NS = "DIAGRAM";
/** Fixed id of the diagram plugin */
CdkGraphDiagramPlugin.ID = "diagram";
/** Current semantic version of the diagram plugin */
CdkGraphDiagramPlugin.VERSION = "0.0.0";
//# sourceMappingURL=data:application/json;base64,