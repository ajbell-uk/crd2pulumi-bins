"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inferBuildTarget = inferBuildTarget;
const cdk_1 = require("projen/lib/cdk");
const java_1 = require("projen/lib/java");
const javascript_1 = require("projen/lib/javascript");
const python_1 = require("projen/lib/python");
const utils_1 = require("../../utils");
/**
 * Defines a fileset for target inputs and outputs.
 * @experimental
 * @internal
 */
class TargetFileset {
    static File(fileset, isWorkspaceRoot = false) {
        return new TargetFileset(fileset, false, isWorkspaceRoot);
    }
    static Directory(fileset, isWorkspaceRoot = false) {
        return new TargetFileset(fileset, true, isWorkspaceRoot);
    }
    static resolveInputs(values) {
        return values.map((v) => (typeof v === "string" ? v : v.filesetStarIfDir));
    }
    static resolveOutputs(values) {
        return values.map((v) => (typeof v === "string" ? v : v.fileset));
    }
    static outputsToInputs(values) {
        return values.map((v) => typeof v === "string" ? v : v.inverse().filesetStarIfDir);
    }
    constructor(fileset, isDirectory, isWorkspaceRoot) {
        this._fileset = fileset;
        this.isDirectory = isDirectory;
        this.isExclude = this._fileset.startsWith("!");
        this.isWorkspaceRoot = isWorkspaceRoot;
    }
    _ensureWildcards(fileset) {
        if (fileset.endsWith("*")) {
            return fileset;
        }
        if (fileset.endsWith("/")) {
            return fileset + "**/*";
        }
        return fileset + "/**/*";
    }
    get fileset() {
        let fileset = this.isExclude ? this._fileset.substring(1) : this._fileset;
        if (fileset.startsWith("/")) {
            fileset = fileset.substring(1);
        }
        if (this.isWorkspaceRoot) {
            return `${this.isExclude ? "!" : ""}{workspaceRoot}/${fileset}`;
        }
        return `${this.isExclude ? "!" : ""}{projectRoot}/${fileset}`;
    }
    inverse() {
        if (this.isExclude) {
            return new TargetFileset(this._fileset.substring(1), this.isDirectory, this.isWorkspaceRoot);
        }
        return new TargetFileset("!" + this._fileset, this.isDirectory, this.isWorkspaceRoot);
    }
    get filesetStarIfDir() {
        if (this.isDirectory) {
            return this._ensureWildcards(this.fileset);
        }
        return this.fileset;
    }
}
/**
 * Infer nx target values for build task
 * @experimental
 * @internal
 */
function inferBuildTarget(project, options) {
    const { inputs = [], outputs = [] } = _inferBuildTargetIO(project);
    if (options?.excludeOutputs !== false) {
        inputs.push(...TargetFileset.outputsToInputs(outputs));
    }
    let dependsOn = ["^build"];
    if (options?.dependsOn != null && options.dependsOn !== true) {
        if (options.dependsOn === false) {
            dependsOn = undefined;
        }
        else {
            dependsOn = options.dependsOn;
        }
    }
    if (outputs.length === 0) {
        return undefined;
    }
    return {
        inputs: TargetFileset.resolveInputs(inputs),
        outputs: TargetFileset.resolveOutputs(outputs),
        dependsOn,
    };
}
/** @internal */
function _inferBuildTargetIO(project) {
    const inputs = [];
    const outputs = [];
    let includeDefaultInputs = true;
    if (utils_1.ProjectUtils.isNamedInstanceOf(project, cdk_1.JsiiProject)) {
        outputs.push(TargetFileset.File(".jsii"), TargetFileset.Directory(project.libdir), TargetFileset.Directory(project.artifactsDirectory));
    }
    if (javascript_1.Jest.of(project)) {
        outputs.push(TargetFileset.Directory("coverage"), TargetFileset.Directory("test-reports"));
    }
    if (utils_1.ProjectUtils.isNamedInstanceOf(project, python_1.PythonProject)) {
        inputs.push(TargetFileset.Directory("!.env"), TargetFileset.Directory("!.pytest_cache"));
    }
    if (utils_1.ProjectUtils.isNamedInstanceOf(project, java_1.JavaProject)) {
        inputs.push(TargetFileset.File("!.classpath"), TargetFileset.File("!.project"), TargetFileset.File("!.settings"));
        outputs.push(TargetFileset.Directory("target"), TargetFileset.Directory("dist/java"));
    }
    if (includeDefaultInputs) {
        inputs.unshift("default", "^default");
    }
    return {
        inputs,
        outputs,
    };
}
//# sourceMappingURL=data:application/json;base64,