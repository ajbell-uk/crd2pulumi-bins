"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSharpTranspile = void 0;
const Case = __importStar(require("case"));
const reflect = __importStar(require("jsii-reflect"));
const transpile = __importStar(require("./transpile"));
const schema_1 = require("../schema");
class CSharpTranspile extends transpile.TranspileBase {
    constructor() {
        super(transpile.Language.CSHARP);
    }
    moduleLike(moduleLike) {
        var _a, _b, _c, _d;
        const csharpPackage = (_b = (_a = moduleLike.targets) === null || _a === void 0 ? void 0 : _a.dotnet) === null || _b === void 0 ? void 0 : _b.namespace;
        // if this is a submodule, we need to break the package name down into the
        // parent name and the submodule. we also allow submodules not to have
        // explicit target names, in which case we need to append the pascal-cased
        // submodule name to the parent package name.
        if (moduleLike instanceof reflect.Submodule) {
            const parent = this.getParentModule(moduleLike);
            const parentFqn = (_d = (_c = parent.targets) === null || _c === void 0 ? void 0 : _c.dotnet) === null || _d === void 0 ? void 0 : _d.namespace;
            // if the submodule does not explicitly define a dotnet package name, we need to deduce it from the parent
            const submoduleCSharpPackage = csharpPackage !== null && csharpPackage !== void 0 ? csharpPackage : `${parentFqn}.${Case.pascal(moduleLike.name)}`;
            return { name: parentFqn, submodule: submoduleCSharpPackage };
        }
        return { name: csharpPackage };
    }
    type(type) {
        const submodule = this.findSubmodule(type);
        const moduleLike = this.moduleLike(submodule ? submodule : type.assembly);
        const fqn = [];
        let namespace = type.namespace;
        if (namespace) {
            fqn.push(moduleLike.name);
            fqn.push(namespace);
        }
        else {
            fqn.push(moduleLike.name);
        }
        fqn.push(type.name);
        return new transpile.TranspiledType({
            fqn: fqn.join('.'),
            name: type.name,
            namespace: namespace,
            module: moduleLike.name,
            submodule: moduleLike.submodule,
            submodulePath: (0, schema_1.submodulePath)(submodule),
            source: type,
            language: this.language,
        });
    }
    callable(callable) {
        const type = this.type(callable.parentType);
        const isInitializer = reflect.Initializer.isInitializer(callable);
        const name = isInitializer
            ? type.name
            : Case.pascal(callable.name);
        const parameters = callable.parameters.sort(this.optionalityCompare);
        const paramsFormatted = parameters.map(p => this.formatFnParam(this.parameter(p))).join(', ');
        const prefix = isInitializer || callable.protected ? 'protected' : 'private';
        let returnType;
        if (reflect.Initializer.isInitializer(callable)) {
            returnType = this.typeReference(callable.parentType.reference);
        }
        else if (reflect.Method.isMethod(callable)) {
            returnType = this.typeReference(callable.returns.type);
        }
        const returns = returnType === null || returnType === void 0 ? void 0 : returnType.toString({
            typeFormatter: (t) => t.name,
        });
        const signatures = [`${prefix} ${returns ? returns + ' ' : ''}${name}(${paramsFormatted})`];
        const invocations = [isInitializer
                ? `new ${name}(${paramsFormatted});`
                : `${type.name}.${name}(${paramsFormatted});`];
        return {
            name,
            parentType: type,
            import: this.formatImport(type),
            parameters,
            signatures,
            invocations,
        };
    }
    class(klass) {
        return {
            name: klass.name,
            type: this.type(klass),
        };
    }
    struct(struct) {
        const type = this.type(struct);
        const indent = ' '.repeat(4);
        const inputs = struct.allProperties.map((p) => {
            return `${indent}${this.formatFnParam(this.property(p))}`;
        }).flat();
        return {
            type: type,
            name: struct.name,
            import: this.formatImport(type),
            initialization: this.formatStructBuilder(type, inputs),
        };
    }
    interface(iface) {
        return {
            name: iface.name,
            type: this.type(iface),
        };
    }
    parameter(parameter) {
        const typeRef = this.typeReference(parameter.type);
        const name = Case.pascal(parameter.name);
        return {
            name,
            parentType: this.type(parameter.parentType),
            typeReference: typeRef,
            optional: parameter.optional,
            variadic: parameter.variadic,
            declaration: this.formatParameter(name, typeRef),
        };
    }
    property(property) {
        const typeRef = this.typeReference(property.type);
        const name = Case.pascal(property.name);
        return {
            name,
            parentType: this.type(property.parentType),
            typeReference: typeRef,
            optional: property.optional,
            declaration: this.formatProperty(name, typeRef, property),
        };
    }
    enum(enu) {
        return {
            fqn: this.type(enu).fqn,
            name: enu.name,
        };
    }
    enumMember(em) {
        return {
            fqn: `${this.enum(em.enumType).fqn}.${em.name}`,
            name: em.name,
        };
    }
    unionOf() {
        return 'object';
    }
    listOf(type) {
        return `${type}[]`;
    }
    variadicOf(type) {
        return `params ${this.listOf(type)}`;
    }
    mapOf(type) {
        return `System.Collections.Generic.IDictionary<string, ${type}>`;
    }
    any() {
        return 'object';
    }
    void() {
        return 'void';
    }
    str() {
        return 'string';
    }
    number() {
        return 'double';
    }
    boolean() {
        return 'bool';
    }
    json() {
        return 'Newtonsoft.Json.Linq.JObject';
    }
    date() {
        return 'System.DateTime';
    }
    readme(readme) {
        return readme;
    }
    formatImport(type) {
        return `using ${type.module};`;
    }
    formatFnParam(transpiled) {
        const tf = transpiled.typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        const suffix = transpiled.optional ? ' = null' : '';
        if ('variadic' in transpiled && transpiled.variadic) {
            return `${this.variadicOf(tf)} ${transpiled.name}`;
        }
        return `${tf} ${transpiled.name}${suffix}`;
    }
    formatStructBuilder(type, properties) {
        const builder = `new ${type.name} {`;
        return [
            builder,
            properties.join(',\n'),
            '};',
        ].join('\n');
    }
    ;
    formatParameter(name, typeReference) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return `public ${tf} ${name}`;
    }
    formatProperty(name, typeReference, property) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        const prefix = property.protected ? 'protected' : 'public';
        // setters are always available on struct properties
        const hasSetter = property.parentType.isDataType() || (!property.immutable && property.abstract);
        const suffix = hasSetter ? '{ get; set; }' : '{ get; }';
        return `${prefix} ${tf} ${name} ${suffix}`;
    }
}
exports.CSharpTranspile = CSharpTranspile;
//# sourceMappingURL=data:application/json;base64,