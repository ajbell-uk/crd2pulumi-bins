"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LANGUAGE_SPECIFIC = exports.Documentation = void 0;
exports.extractPackageName = extractPackageName;
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const spec_1 = require("@jsii/spec");
const fs = __importStar(require("fs-extra"));
const glob = __importStar(require("glob-promise"));
const reflect = __importStar(require("jsii-reflect"));
const jsii_rosetta_1 = require("jsii-rosetta");
const _npm_1 = require("./_npm");
const api_reference_1 = require("./api-reference");
const readme_1 = require("./readme");
const __1 = require("../..");
const json_1 = require("../render/json");
const markdown_doc_1 = require("../render/markdown-doc");
const markdown_render_1 = require("../render/markdown-render");
const schema_1 = require("../schema");
const csharp_1 = require("../transpile/csharp");
const go_1 = require("../transpile/go");
const java_1 = require("../transpile/java");
const python_1 = require("../transpile/python");
const transpile_1 = require("../transpile/transpile");
const typescript_1 = require("../transpile/typescript");
// https://github.com/aws/jsii/blob/main/packages/jsii-reflect/lib/assembly.ts#L175
const NOT_FOUND_IN_ASSEMBLY_REGEX = /Type '(.*)\..*' not found in assembly (.*)$/;
/**
 * Render documentation pages for a jsii library.
 */
class Documentation {
    /**
     * Create a `Documentation` object from a package installable by npm.
     *
     * Note that this method installs the target package to the local file-system. Make sure
     * to call `Documentation.cleanup` once you are done rendering.
     *
     * @param target - The target to install. This can either be a local path or a registry identifier (e.g <name>@<version>)
     * @param options - Additional options.
     *
     * @throws NoSpaceLeftOnDevice if the installation fails due to running out of disk space
     * @throws NpmError if some `npm` command fails when preparing the working set
     */
    static async forPackage(target, options = {}) {
        var _a;
        const workdir = await fs.mkdtemp(path.join(os.tmpdir(), path.sep));
        const npm = new _npm_1.Npm(workdir);
        if ((_a = options.verbose) !== null && _a !== void 0 ? _a : true) {
            console.log(`Installing package ${target}`);
        }
        const name = await npm.install(target);
        if (options._postInstall != null) {
            await options._postInstall(workdir);
        }
        const docs = await Documentation.forProject(path.join(workdir, 'node_modules', name), { ...options, assembliesDir: workdir });
        // we cannot delete this directory immediately since it is used during `render` calls.
        // instead we register it so that callers can clean it up by calling the `cleanup` method.
        docs.addCleanupDirectory(workdir);
        return docs;
    }
    /**
     * Create a `Documentation` object from a local directory containing a node project.
     *
     * @param root - The local directory path. Must contain a package.json file.
     * @param options - Additional options.
     */
    static async forProject(root, options = {}) {
        var _a;
        const manifestPath = path.join(root, 'package.json');
        if (!(await fs.pathExists(manifestPath))) {
            throw new Error(`Unable to locate ${manifestPath}`);
        }
        // normally the assemblies are located in subdirectories
        // of the root package dir (i.e ./node_modules)
        const assembliesDir = (_a = options === null || options === void 0 ? void 0 : options.assembliesDir) !== null && _a !== void 0 ? _a : root;
        const { name } = JSON.parse(await fs.readFile(manifestPath, 'utf-8'));
        return Documentation.forAssembly(name, assembliesDir);
    }
    /**
     * Create a `Documentation` object for a specific assembly from a directory of assemblies.
     *
     * @param assemblyName - The assembly name.
     * @param assembliesDir - The directory containing the assemblies that comprise the type-system.
     */
    static async forAssembly(assemblyName, assembliesDir) {
        return new Documentation(assemblyName, assembliesDir);
    }
    constructor(assemblyName, assembliesDir) {
        this.assemblyName = assemblyName;
        this.assembliesDir = assembliesDir;
        this.cleanupDirectories = new Set();
        this.assembliesCache = new Map();
    }
    /**
     * List all submodules in the assembly.
     */
    async listSubmodules() {
        const tsAssembly = await this.createAssembly(undefined, { loose: true, validate: false });
        return tsAssembly.allSubmodules;
    }
    async toIndexMarkdown(fileSuffix, options) {
        const assembly = await this.createAssembly(undefined, { loose: true, validate: false });
        const submodules = await this.listSubmodules();
        const schema = (await this.toJson({
            ...options,
            submodule: undefined,
            allSubmodules: false,
        })).content;
        const ref = new markdown_doc_1.MarkdownDocument({ header: { title: 'API Reference' }, id: 'api-reference' });
        if (schema.version !== schema_1.CURRENT_SCHEMA_VERSION) {
            throw new Error(`Unexpected schema version: ${schema.version}`);
        }
        const renderer = new markdown_render_1.MarkdownRenderer({
            language: options.language,
            packageName: assembly.name,
            packageVersion: assembly.version,
        });
        if (submodules.length) {
            ref.section(renderer.visitSubmodules(submodules, fileSuffix));
        }
        if (schema.apiReference) {
            ref.section(renderer.visitConstructs(schema.apiReference.constructs));
            ref.section(renderer.visitStructs(schema.apiReference.structs));
            ref.section(renderer.visitClasses(schema.apiReference.classes));
            ref.section(renderer.visitInterfaces(schema.apiReference.interfaces));
            ref.section(renderer.visitEnums(schema.apiReference.enums));
        }
        const documentation = new markdown_doc_1.MarkdownDocument();
        documentation.section(ref);
        return documentation;
    }
    /**
     * Generate markdown.
     */
    async toJson(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const language = (_a = options.language) !== null && _a !== void 0 ? _a : transpile_1.Language.TYPESCRIPT;
        const loose = (_b = options.loose) !== null && _b !== void 0 ? _b : true;
        const validate = (_c = options.validate) !== null && _c !== void 0 ? _c : false;
        const allSubmodules = (_d = options.allSubmodules) !== null && _d !== void 0 ? _d : false;
        // Get the TS assembly first to check what languages are supported before calling rosetta
        const tsAssembly = await this.createAssembly(undefined, { loose, validate });
        const isSupported = language === transpile_1.Language.TYPESCRIPT || language.isValidConfiguration((_e = tsAssembly === null || tsAssembly === void 0 ? void 0 : tsAssembly.targets) === null || _e === void 0 ? void 0 : _e[language.targetName]);
        this.assemblyFqn = `${tsAssembly.name}@${tsAssembly.version}`;
        if (!isSupported) {
            throw new __1.LanguageNotSupportedError(`Language ${language} is not supported for package ${this.assemblyFqn}`);
        }
        let submoduleStr = options.submodule;
        if (allSubmodules && submoduleStr) {
            throw new Error('Cannot call toJson with allSubmodules and a specific submodule both selected.');
        }
        const { assembly, transpile } = await this.languageSpecific(language, { loose, validate });
        const targets = assembly.targets;
        if (!targets) {
            throw new Error(`Assembly ${this.assemblyFqn} does not have any targets defined`);
        }
        const submodule = submoduleStr ? this.findSubmodule(assembly, submoduleStr) : undefined;
        let readme;
        if ((_f = options === null || options === void 0 ? void 0 : options.readme) !== null && _f !== void 0 ? _f : false) {
            readme = new readme_1.Readme(transpile, assembly, submodule).render();
        }
        let apiReference;
        if ((_g = options === null || options === void 0 ? void 0 : options.apiReference) !== null && _g !== void 0 ? _g : true) {
            try {
                apiReference = new api_reference_1.ApiReference(transpile, assembly, submodule, allSubmodules);
            }
            catch (error) {
                if (!(error instanceof Error)) {
                    throw error;
                }
                throw (_h = maybeCorruptedAssemblyError(error)) !== null && _h !== void 0 ? _h : error;
            }
        }
        const contents = {
            version: schema_1.CURRENT_SCHEMA_VERSION,
            language: language.toString(),
            metadata: {
                packageName: assembly.name,
                packageVersion: assembly.version,
                submodule: (0, schema_1.submodulePath)(submodule),
            },
            readme: readme === null || readme === void 0 ? void 0 : readme.render(),
            apiReference: apiReference === null || apiReference === void 0 ? void 0 : apiReference.toJson(),
        };
        return new json_1.Json(contents);
    }
    async toMarkdown(options) {
        const json = (await this.toJson(options)).content;
        return markdown_render_1.MarkdownRenderer.fromSchema(json, {
            anchorFormatter: options.anchorFormatter,
            linkFormatter: options.linkFormatter,
            typeFormatter: options.typeFormatter,
            header: options.header,
        });
    }
    addCleanupDirectory(directory) {
        this.cleanupDirectories.add(directory);
    }
    /**
     * Removes any internal working directories.
     */
    async cleanup() {
        for (const dir of [...this.cleanupDirectories]) {
            await fs.remove(dir);
            this.cleanupDirectories.delete(dir);
        }
    }
    async languageSpecific(lang, options) {
        const { rosettaTarget, transpile } = exports.LANGUAGE_SPECIFIC[lang.toString()];
        return { assembly: await this.createAssembly(rosettaTarget, options), transpile };
    }
    /**
     * Lookup a submodule by a submodule name.
     *
     * The contract of this function is historically quite confused: the submodule
     * name can be either an FQN (`asm.sub1.sub2`) or just a submodule name
     * (`sub1` or `sub1.sub2`).
     *
     * This is sligthly complicated by ambiguity: `asm.asm.package` and
     * `asm.package` can both exist, and which one do you mean when you say
     * `asm.package`?
     *
     * We prefer an FQN match if possible (`asm.sub1.sub2`), but will accept a
     * root-relative submodule name as well (`sub1.sub2`).
     */
    findSubmodule(assembly, submodule) {
        const fqnSubs = assembly.allSubmodules.filter((s) => s.fqn === submodule);
        if (fqnSubs.length === 1) {
            return fqnSubs[0];
        }
        // Fallback: assembly-relative name
        const relSubs = assembly.allSubmodules.filter((s) => s.fqn === `${assembly.name}.${submodule}`);
        if (relSubs.length === 1) {
            console.error(`[WARNING] findSubmodule() is being called with a relative submodule name: '${submodule}'. Prefer the absolute name: '${assembly.name}.${submodule}'`);
            return relSubs[0];
        }
        if (fqnSubs.length + relSubs.length === 0) {
            throw new Error(`Submodule ${submodule} not found in assembly ${assembly.name}@${assembly.version} (neither as '${submodule}' nor as '${assembly.name}.${submodule})`);
        }
        // Almost impossible that this would be true
        if (fqnSubs.length > 1) {
            throw new Error(`Found multiple submodules with FQN: ${submodule} in assembly ${assembly.name}@${assembly.version}`);
        }
        throw new Error(`Found multiple submodules with relative name: ${submodule} in assembly ${assembly.name}@${assembly.version}`);
    }
    async createAssembly(language, options) {
        const cacheKey = `lang:${language !== null && language !== void 0 ? language : 'ts'}.loose:${options.loose}.validate:${options.validate}`;
        const cached = this.assembliesCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        const created = await withTempDir(async (workdir) => {
            // always better not to pollute an externally provided directory
            await fs.copy(this.assembliesDir, workdir, {
                // Ensure we don't try to copy socket files, as they can be found under .git when
                // core.fsmonitor is enabled.
                filter: async (src) => {
                    const stat = await fs.stat(src);
                    return stat.isFile() || stat.isDirectory();
                },
            });
            const ts = new reflect.TypeSystem();
            // assembliesDir might include backslashes on Windows.
            // The glob pattern must only used forward slashes, so we pass the assembliesDir as CWD which does not have this restriction
            const assemblies = await glob.promise(`**/${spec_1.SPEC_FILE_NAME}`, {
                cwd: path.normalize(this.assembliesDir),
                absolute: true,
            });
            for (let dotJsii of assemblies) {
                // we only transliterate the top level assembly and not the entire type-system.
                // note that the only reason to translate dependant assemblies is to show code examples
                // for expanded python arguments - which we don't to right now anyway.
                // we don't want to make any assumption of the directory structure, so this is the most
                // robust way to detect the root assembly.
                const spec = (0, spec_1.loadAssemblyFromFile)(dotJsii, false); // don't validate we only need this for the spec name
                if (language && spec.name === this.assemblyName) {
                    const packageDir = path.dirname(dotJsii);
                    try {
                        await (0, jsii_rosetta_1.transliterateAssembly)([packageDir], [language], { loose: options.loose, unknownSnippets: jsii_rosetta_1.UnknownSnippetMode.FAIL, outdir: workdir });
                    }
                    catch (e) {
                        throw new __1.TransliterationError(`Could not transliterate snippets in '${this.assemblyFqn}' to ${language}: ${e.message}`);
                    }
                    dotJsii = path.join(workdir, `${spec_1.SPEC_FILE_NAME}.${language}`);
                }
                await loadAssembly(dotJsii, ts, options);
            }
            return ts.findAssembly(this.assemblyName);
        });
        this.assembliesCache.set(cacheKey, created);
        return created;
    }
}
exports.Documentation = Documentation;
exports.LANGUAGE_SPECIFIC = {
    [transpile_1.Language.PYTHON.toString()]: {
        transpile: new python_1.PythonTranspile(),
        rosettaTarget: jsii_rosetta_1.TargetLanguage.PYTHON,
    },
    [transpile_1.Language.TYPESCRIPT.toString()]: {
        transpile: new typescript_1.TypeScriptTranspile(),
        rosettaTarget: undefined, // no transpilation needed
    },
    [transpile_1.Language.JAVA.toString()]: {
        transpile: new java_1.JavaTranspile(),
        rosettaTarget: jsii_rosetta_1.TargetLanguage.JAVA,
    },
    [transpile_1.Language.CSHARP.toString()]: {
        transpile: new csharp_1.CSharpTranspile(),
        rosettaTarget: jsii_rosetta_1.TargetLanguage.CSHARP,
    },
    [transpile_1.Language.GO.toString()]: {
        transpile: new go_1.GoTranspile(),
        rosettaTarget: jsii_rosetta_1.TargetLanguage.GO,
    },
};
/**
 * Loads the specified assembly document into the provided type system, and
 * recursively attempt to load the assembly's dependencies.
 *
 * @param dotJsii the assembly to be loaded.
 * @param ts the type system in which the assembly is to be loaded.
 * @param validate whether assemblies should be validated.
 */
async function loadAssembly(dotJsii, ts, { validate } = {}) {
    var _a;
    const loaded = await ts.load(dotJsii, { validate });
    for (const dep of Object.keys((_a = loaded.spec.dependencies) !== null && _a !== void 0 ? _a : {})) {
        if (ts.tryFindAssembly(dep) != null) {
            // dependency already loaded... move on...
            continue;
        }
        try {
            // Resolve the dependencies relative to the dependent's package root.
            const depPath = require.resolve(`${dep}/.jsii`, { paths: [path.dirname(dotJsii)] });
            await loadAssembly(depPath, ts, { validate });
        }
        catch {
            // Silently ignore any resolution errors... We'll fail later if the dependency is
            // ACTUALLY required, but it's okay to omit it if none of its types are actually exposed
            // by the translated assembly's own API.
        }
    }
    return loaded;
}
async function withTempDir(work) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), path.sep));
    const cwd = process.cwd();
    try {
        process.chdir(workdir);
        // wait for the work to be completed before
        // we cleanup the work environment.
        return await work(workdir);
    }
    finally {
        process.chdir(cwd);
        await fs.remove(workdir);
    }
}
function extractPackageName(spec) {
    const firstAt = spec.indexOf('@');
    if (firstAt === 0) {
        const lastAt = spec.indexOf('@', firstAt + 1);
        if (lastAt === -1) {
            // @aws-cdk/aws-ecr
            return spec;
        }
        else {
            // @aws-cdk/aws-ecr@2.0.0
            return spec.substring(0, lastAt);
        }
    }
    if (firstAt > 0) {
        // aws-cdk-lib@2.0.0
        return spec.substring(0, firstAt);
    }
    // aws-cdk-lib
    return spec;
}
/**
 * Return a `CorruptedAssemblyError` if the error matches, undefined otherwise.
 *
 * Note that an 'not found in assembly` can be thrown in two cases:
 *
 * 1. Direct usage of `assembly.findType(fqn)`
 *
 *    In this case the error could be caused by a wrong FQN being passed to the function. This is not considered
 *    a corrupted assembly since the caller might be passing an FQN from a different assembly.
 *
 * 2. Implicit usage of `assembly.findType(fqn)` by calling `.type` (e.g `parameter.type`)
 *
 *    In this case the assembly we look in is always the same assembly the type itself comes from, and if it doesn't exist,
 *    then the assembly is considered corrupt.
 */
function maybeCorruptedAssemblyError(error) {
    const match = error.message.match(NOT_FOUND_IN_ASSEMBLY_REGEX);
    if (!match) {
        return;
    }
    const searchedAssembly = match[2];
    const typeAssembly = match[1];
    if (searchedAssembly === typeAssembly) {
        return new __1.CorruptedAssemblyError(error.message);
    }
    return;
}
//# sourceMappingURL=data:application/json;base64,