"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90YXNrLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNjaGVtYSBmb3IgYHRhc2tzLmpzb25gLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhc2tzTWFuaWZlc3Qge1xuICAvKipcbiAgICogQWxsIHRhc2tzIGF2YWlsYWJsZSBmb3IgdGhpcyBwcm9qZWN0LlxuICAgKi9cbiAgcmVhZG9ubHkgdGFza3M/OiB7IFtuYW1lOiBzdHJpbmddOiBUYXNrU3BlYyB9O1xuXG4gIC8qKlxuICAgKiBFbnZpcm9ubWVudCBmb3IgYWxsIHRhc2tzLlxuICAgKi9cbiAgcmVhZG9ubHkgZW52PzogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFza0NvbW1vbk9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoaXMgYnVpbGQgY29tbWFuZC5cbiAgICogQGRlZmF1bHQgLSB0aGUgdGFzayBuYW1lXG4gICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRGVmaW5lcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhpcyB0YXNrLlxuICAgKiBWYWx1ZXMgaW4gdGhpcyBtYXAgd2lsbCBiZSBldmFsdWF0ZWQgaW4gYSBzaGVsbCwgc28geW91IGNhbiBkbyBzdHVmZiBsaWtlIGAkKGVjaG8gXCJmb29cIilgLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgcmVhZG9ubHkgZW52PzogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlcyB0aGF0IG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byBleGVjdXRlXG4gICAqIHRoaXMgdGFzay4gVGFzayBleGVjdXRpb24gd2lsbCBmYWlsIGlmIG9uZSBvZiB0aGVzZSBpcyBub3QgZGVmaW5lZC5cbiAgICovXG4gIHJlYWRvbmx5IHJlcXVpcmVkRW52Pzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEEgc2hlbGwgY29tbWFuZCB3aGljaCBkZXRlcm1pbmVzIGlmIHRoZSB0aGlzIHRhc2sgc2hvdWxkIGJlIGV4ZWN1dGVkLiBJZlxuICAgKiB0aGUgcHJvZ3JhbSBleGl0cyB3aXRoIGEgemVybyBleGl0IGNvZGUsIHN0ZXBzIHdpbGwgYmUgZXhlY3V0ZWQuIEEgbm9uLXplcm9cbiAgICogY29kZSBtZWFucyB0aGF0IHRhc2sgd2lsbCBiZSBza2lwcGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgY29uZGl0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgd29ya2luZyBkaXJlY3RvcnkgZm9yIGFsbCBzdGVwcyBpbiB0aGlzIHRhc2sgKHVubGVzcyBvdmVycmlkZGVuIGJ5IHRoZVxuICAgKiBzdGVwKS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBwcm9jZXNzLmN3ZCgpXG4gICAqL1xuICByZWFkb25seSBjd2Q/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU3BlY2lmaWNhdGlvbiBvZiBhIHNpbmdsZSB0YXNrLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhc2tTcGVjIGV4dGVuZHMgVGFza0NvbW1vbk9wdGlvbnMge1xuICAvKipcbiAgICogVGFzayBuYW1lLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUYXNrIHN0ZXBzLlxuICAgKi9cbiAgcmVhZG9ubHkgc3RlcHM/OiBUYXNrU3RlcFtdO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRhc2sgc3RlcHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza1N0ZXBPcHRpb25zIHtcbiAgLyoqXG4gICAqIFN0ZXAgbmFtZVxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vIG5hbWVcbiAgICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB3b3JraW5nIGRpcmVjdG9yeSBmb3IgdGhpcyBzdGVwLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGRldGVybWluZWQgYnkgdGhlIHRhc2tcbiAgICovXG4gIHJlYWRvbmx5IGN3ZD86IHN0cmluZztcblxuICAvKipcbiAgICogQSBzaGVsbCBjb21tYW5kIHdoaWNoIGRldGVybWluZXMgaWYgdGhlIHRoaXMgc3RlcCBzaG91bGQgYmUgZXhlY3V0ZWQuIElmXG4gICAqIHRoZSBwcm9ncmFtIGV4aXRzIHdpdGggYSB6ZXJvIGV4aXQgY29kZSwgdGhlIHN0ZXAgd2lsbCBiZSBleGVjdXRlZC4gQSBub24temVyb1xuICAgKiBjb2RlIG1lYW5zIHRoZSBzdGVwIHdpbGwgYmUgc2tpcHBlZCAoc3Vic2VxdWVudCB0YXNrIHN0ZXBzIHdpbGwgc3RpbGwgYmUgZXZhbHVhdGVkL2V4ZWN1dGVkKS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbmRpdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogU2hvdWxkIHRoaXMgc3RlcCByZWNlaXZlIGFyZ3MgcGFzc2VkIHRvIHRoZSB0YXNrLlxuICAgKlxuICAgKiBJZiBgdHJ1ZWAsIGFyZ3MgYXJlIHBhc3NlZCB0aHJvdWdoIGF0IHRoZSBlbmQgb2YgdGhlIGBleGVjYCBzaGVsbCBjb21tYW5kLlxcXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgYXJncyBjYW4gYmUgY2hhbmdlZCBieSBpbmNsdWRpbmcgdGhlIG1hcmtlciBgJEBgIGluc2lkZSB0aGUgY29tbWFuZCBzdHJpbmcuXG4gICAqXG4gICAqIElmIHRoZSBtYXJrZXIgaXMgZXhwbGljaXRseSBkb3VibGUtcXVvdGVkIChcIiRAXCIpIGFyZ3VtZW50cyB3aWxsIGJlIHdyYXBwZWQgaW4gc2luZ2xlIHF1b3RlcywgYXBwcm94aW1hdGluZ1xuICAgKiB0aGUgd2hpdGVzcGFjZSBwcmVzZXJ2aW5nIGJlaGF2aW9yIG9mIGJhc2ggdmFyaWFibGUgZXhwYW5zaW9uLlxuICAgKlxuICAgKiBJZiB0aGUgc3RlcCBzcGF3bnMgYSBzdWJ0YXNrLCBhcmdzIGFyZSBwYXNzZWQgdG8gdGhlIHN1YnRhc2suXG4gICAqIFRoZSBzdWJ0YXNrIG11c3QgZGVmaW5lIHN0ZXBzIHJlY2VpdmluZyBhcmdzIGZvciB0aGlzIHRvIGhhdmUgYW55IGVmZmVjdC5cbiAgICpcbiAgICogQGV4YW1wbGUgdGFzay5leGVjKFwiZWNobyBIZWxsbyAkQCBXb3JsZCFcIiwgeyByZWNlaXZlQXJnczogdHJ1ZSB9KTtcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHJlY2VpdmVBcmdzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBsaXN0IG9mIGZpeGVkIGFyZ3VtZW50cyBhbHdheXMgcGFzc2VkIHRvIHRoZSBzdGVwLlxuICAgKlxuICAgKiBVc2VmdWwgdG8gcmUtdXNlIGV4aXN0aW5nIHRhc2tzIHdpdGhvdXQgaGF2aW5nIHRvIHJlLWRlZmluZSB0aGUgd2hvbGUgdGFzay5cXFxuICAgKiBGaXhlZCBhcmdzIGFyZSBhbHdheXMgcGFzc2VkIHRvIHRoZSBzdGVwLCBldmVuIGlmIGByZWNlaXZlQXJnc2AgaXMgYGZhbHNlYFxuICAgKiBhbmQgYXJlIGFsd2F5cyBwYXNzZWQgYmVmb3JlIGFueSBhcmdzIHRoZSB0YXNrIGlzIGNhbGxlZCB3aXRoLlxuICAgKlxuICAgKiBJZiB0aGUgc3RlcCBleGVjdXRlcyBhIHNoZWxsIGNvbW1hbmRzLCBhcmdzIGFyZSBwYXNzZWQgdGhyb3VnaCBhdCB0aGUgZW5kIG9mIHRoZSBgZXhlY2Agc2hlbGwgY29tbWFuZC5cXFxuICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGFyZ3MgY2FuIGJlIGNoYW5nZWQgYnkgaW5jbHVkaW5nIHRoZSBtYXJrZXIgYCRAYCBpbnNpZGUgdGhlIGNvbW1hbmQgc3RyaW5nLlxuICAgKlxuICAgKiBJZiB0aGUgc3RlcCBzcGF3bnMgYSBzdWJ0YXNrLCBhcmdzIGFyZSBwYXNzZWQgdG8gdGhlIHN1YnRhc2suXG4gICAqIFRoZSBzdWJ0YXNrIG11c3QgZGVmaW5lIHN0ZXBzIHJlY2VpdmluZyBhcmdzIGZvciB0aGlzIHRvIGhhdmUgYW55IGVmZmVjdC5cbiAgICpcbiAgICogSWYgdGhlIHN0ZXAgY2FsbHMgYSBidWlsdGluIHNjcmlwdCwgYXJncyBhcmUgcGFzc2VkIHRvIHRoZSBzY3JpcHQuXG4gICAqIEl0IGlzIHVwIHRvIHRoZSBzY3JpcHQgdG8gdXNlIG9yIGRpc2NhcmQgdGhlIGFyZ3VtZW50cy5cbiAgICpcbiAgICogQGV4YW1wbGUgdGFzay5zcGF3bihcImRlcGxveVwiLCB7IGFyZ3M6IFtcIi0tZm9yY2VcIl0gfSk7XG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIHN0ZXBcbiAgICovXG4gIHJlYWRvbmx5IGFyZ3M/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogRGVmaW5lcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhpcyBzdGVwIChgZXhlY2AgYW5kIGBidWlsdGluYCBvbmx5KS5cbiAgICogVmFsdWVzIGluIHRoaXMgbWFwIGNhbiBiZSBzaW1wbGUsIGxpdGVyYWwgdmFsdWVzIG9yIHNoZWxsIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQgYXQgcnVudGltZSBlLmcuIGAkKGVjaG8gXCJmb29cIilgLlxuICAgKlxuICAgKiBAZXhhbXBsZSB7IFwiZm9vXCI6IFwiYmFyXCIsIFwiYm9vXCI6IFwiJChlY2hvIGJheilcIiB9XG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gZW52aXJvbm1lbnQgdmFyaWFibGVzIGRlZmluZWQgaW4gc3RlcFxuICAgKi9cbiAgcmVhZG9ubHkgZW52PzogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbi8qKlxuICogQSBzaW5nbGUgc3RlcCB3aXRoaW4gYSB0YXNrLiBUaGUgc3RlcCBjb3VsZCBlaXRoZXIgYmUgIHRoZSBleGVjdXRpb24gb2YgYVxuICogc2hlbGwgY29tbWFuZCBvciBleGVjdXRpb24gb2YgYSBzdWItdGFzaywgYnkgbmFtZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXNrU3RlcCBleHRlbmRzIFRhc2tTdGVwT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTaGVsbCBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICpcbiAgICogQGRlZmF1bHQgLSBkb24ndCBleGVjdXRlIGEgc2hlbGwgY29tbWFuZFxuICAgKi9cbiAgcmVhZG9ubHkgZXhlYz86IHN0cmluZztcblxuICAvKipcbiAgICogU3VidGFzayB0byBleGVjdXRlXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZG9uJ3Qgc3Bhd24gYSBzdWJ0YXNrXG4gICAqL1xuICByZWFkb25seSBzcGF3bj86IHN0cmluZztcblxuICAvKipcbiAgICogUHJpbnQgYSBtZXNzYWdlLlxuICAgKiBAZGVmYXVsdCAtIGRvbid0IHNheSBhbnl0aGluZ1xuICAgKi9cbiAgcmVhZG9ubHkgc2F5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiBhIGJ1aWx0LWluIHRhc2sgdG8gZXhlY3V0ZS5cbiAgICpcbiAgICogQnVpbHQtaW4gdGFza3MgYXJlIG5vZGUuanMgcHJvZ3JhbXMgYmFrZWQgaW50byB0aGUgcHJvamVuIG1vZHVsZSBhbmQgYXNcbiAgICogY29tcG9uZW50IHJ1bnRpbWUgaGVscGVycy5cbiAgICpcbiAgICogVGhlIG5hbWUgaXMgYSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBwcm9qZW4gbGliLyBkaXJlY3RvcnkgKHdpdGhvdXQgdGhlIC50YXNrLmpzIGV4dGVuc2lvbikuXG4gICAqIEZvciBleGFtcGxlLCBpZiB5b3VyIGJ1aWx0IGluIGJ1aWx0aW4gdGFzayBpcyB1bmRlciBgc3JjL3JlbGVhc2UvcmVzb2x2ZS12ZXJzaW9uLnRhc2sudHNgLFxuICAgKiB0aGVuIHRoaXMgd291bGQgYmUgYHJlbGVhc2UvcmVzb2x2ZS12ZXJzaW9uYC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBkbyBub3QgZXhlY3V0ZSBhIGJ1aWx0aW4gdGFza1xuICAgKi9cbiAgcmVhZG9ubHkgYnVpbHRpbj86IHN0cmluZztcbn1cbiJdfQ==