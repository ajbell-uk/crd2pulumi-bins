"use strict";
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Syncpack = void 0;
// JSII compatible fork of types from https://github.com/JamieMason/syncpack/blob/main/src/config/types.ts (v12.3.0)
/**
 * Types and constants for Syncpack usage in the monorepo
 * @see https://jamiemason.github.io/syncpack
 */
var Syncpack;
(function (Syncpack) {
    Syncpack.CUSTOM_TYPES = {
        dev: {
            strategy: "versionsByName",
            path: "devDependencies",
        },
        local: {
            strategy: "name~version",
            namePath: "name",
            path: "version",
        },
        overrides: {
            strategy: "versionsByName",
            path: "overrides",
        },
        peer: {
            strategy: "versionsByName",
            path: "peerDependencies",
        },
        pnpmOverrides: {
            strategy: "versionsByName",
            path: "pnpm.overrides",
        },
        prod: {
            strategy: "versionsByName",
            path: "dependencies",
        },
        resolutions: {
            strategy: "versionsByName",
            path: "resolutions",
        },
    };
    /**
     * Default monorepo configuration for Syncpack
     * @see https://jamiemason.github.io/syncpack/
     */
    Syncpack.DEFAULT_CONFIG = {
        filter: ".",
        indent: "  ",
        semverGroups: [
            {
                dependencies: ["**"],
                dependencyTypes: ["**"],
                packages: ["**"],
                range: "",
            },
        ],
        sortAz: [
            "contributors",
            "dependencies",
            "devDependencies",
            "keywords",
            "peerDependencies",
            "resolutions",
            "scripts",
        ],
        sortFirst: ["name", "description", "version", "author"],
        source: [],
        versionGroups: [],
    };
})(Syncpack || (exports.Syncpack = Syncpack = {}));
//# sourceMappingURL=data:application/json;base64,