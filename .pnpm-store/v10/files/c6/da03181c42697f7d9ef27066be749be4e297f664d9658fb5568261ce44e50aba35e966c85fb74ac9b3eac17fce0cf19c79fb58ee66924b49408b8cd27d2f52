"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfrastructureJavaProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const fs = require("fs");
const path = require("path");
const monorepo_1 = require("../../../monorepo");
const Mustache = require("mustache");
const projen_1 = require("projen");
const awscdk_1 = require("projen/lib/awscdk");
const infrastructure_commands_1 = require("../../components/infrastructure-commands");
const consts_1 = require("../../consts");
/**
 * Synthesizes a Infrastructure Java Project.
 */
class InfrastructureJavaProject extends awscdk_1.AwsCdkJavaApp {
    constructor(options) {
        const groupId = options.groupId ?? "software.aws.infra";
        const artifactId = options.artifactId ?? "infra";
        super({
            ...options,
            cdkVersion: options.cdkVersion ?? "2.133.0",
            cdkVersionPinning: true,
            sample: false,
            junit: false,
            groupId,
            artifactId,
            mainClass: `${groupId}.Main`,
            version: options.version ?? "0.0.0",
            name: options.name,
            readme: {
                contents: fs
                    .readFileSync(path.resolve(__dirname, "../../../samples/infrastructure/java/README.md"))
                    .toString(),
            },
        });
        // Pin constructs version
        this.deps.removeDependency("software.constructs/constructs", projen_1.DependencyType.RUNTIME);
        [
            "software.constructs/constructs@10.3.0",
            "io.github.cdklabs/cdknag@2.15.16",
        ].forEach((d) => this.addDependency(d));
        infrastructure_commands_1.InfrastructureCommands.ensure(this);
        this.pom.addPlugin("org.apache.maven.plugins/maven-surefire-plugin@3.1.2");
        this.pom.addPlugin("org.apache.maven.plugins/maven-compiler-plugin@3.8.1", {
            configuration: {
                release: "11",
            },
        });
        if (options.junit !== false) {
            [
                "org.junit.jupiter/junit-jupiter-api@5.10.2",
                "org.junit.jupiter/junit-jupiter-engine@5.10.2",
                "io.github.origin-energy/java-snapshot-testing-junit5@4.0.7",
                "io.github.origin-energy/java-snapshot-testing-plugin-jackson@4.0.7",
                "org.slf4j/slf4j-simple@2.0.0-alpha0",
            ].forEach((d) => this.addTestDependency(d));
            this.testTask.exec("mvn test");
        }
        this.addDependency(`software.aws/pdk@${monorepo_1.ProjectUtils.getPdkVersion()}`);
        const srcDir = path.resolve(__dirname, "../../../samples/infrastructure/java/src");
        const testDir = path.resolve(__dirname, "../../../samples/infrastructure/java/test");
        const typeSafeApis = [
            ...(options.typeSafeApis || []),
            ...(options.typeSafeApi ? [options.typeSafeApi] : []),
        ];
        const cloudscapeReactTsWebsites = [
            ...(options.cloudscapeReactTsWebsites || []),
            ...(options.cloudscapeReactTsWebsite
                ? [options.cloudscapeReactTsWebsite]
                : []),
        ];
        typeSafeApis.forEach((tsApi) => {
            if (!tsApi.infrastructure.java) {
                throw new Error("Cannot pass in a Type Safe Api without Java Infrastructure configured!");
            }
            monorepo_1.NxProject.ensure(this).addJavaDependency(tsApi.infrastructure.java);
            // Ensure handlers are built before infra
            tsApi.all.handlers?.forEach((handler) => {
                monorepo_1.NxProject.ensure(this).addImplicitDependency(handler);
            });
        });
        cloudscapeReactTsWebsites.forEach((csWebsite) => {
            // Ensure website is built before infra
            monorepo_1.NxProject.ensure(this).addImplicitDependency(csWebsite);
        });
        const mustacheConfig = {
            stackName: options.stackName || consts_1.DEFAULT_STACK_NAME,
            allowSignup: options.allowSignup ?? false,
            groupId,
            stages: options.stages || [],
            typeSafeApis: this.generateTypeSafeMustacheConfig(groupId, typeSafeApis),
            cloudscapeReactTsWebsites: cloudscapeReactTsWebsites.map((csWebsite) => {
                const websiteName = this.capitalize(csWebsite.package.packageName
                    .replace(/[^a-z0-9_]+/gi, "")
                    .replace(/^[0-9]+/gi, ""));
                return {
                    websiteName,
                    websiteNameLowercase: websiteName.toLowerCase(),
                    groupId,
                    websiteDistRelativePath: path.relative(this.outdir, `${csWebsite.outdir}/build`),
                    typeSafeApis: this.generateTypeSafeMustacheConfig(groupId, csWebsite.typeSafeApis),
                };
            }),
        };
        options.sample !== false &&
            this.emitSampleFiles(srcDir, ["src", "main"], mustacheConfig);
        options.sample !== false &&
            this.emitSampleFiles(testDir, ["src", "test"], mustacheConfig);
    }
    generateTypeSafeMustacheConfig(groupId, typeSafeApis) {
        return typeSafeApis?.map((tsApi, idx) => {
            const apiName = this.capitalize(tsApi.model
                .apiName.replace(/[^a-z0-9_]+/gi, "")
                .replace(/^[0-9]+/gi, ""));
            return {
                apiName,
                apiNameLowercase: apiName?.toLowerCase(),
                groupId,
                infraPackage: `${tsApi?.infrastructure.java?.pom.groupId}.${tsApi?.infrastructure.java?.pom.name}.infra`,
                isLast: idx === typeSafeApis.length - 1,
            };
        });
    }
    capitalize(word) {
        return word.charAt(0).toUpperCase() + word.slice(1);
    }
    emitSampleFiles(dir, pathPrefixes = [], mustacheConfig) {
        fs.readdirSync(dir, { withFileTypes: true }).forEach((f) => {
            if (f.isDirectory()) {
                return this.emitSampleFiles(`${dir}/${f.name}`, [
                    ...pathPrefixes,
                    ...(f.name === "groupId"
                        ? mustacheConfig.groupId.split(".")
                        : [f.name]),
                ], mustacheConfig);
            }
            else if (f.name.endsWith("ApiConstruct.java.mustache")) {
                mustacheConfig.typeSafeApis.forEach((tsApi) => {
                    new projen_1.SampleFile(this, `${path.join(...pathPrefixes, `${tsApi.apiName}.java`)}`, {
                        contents: Mustache.render(fs.readFileSync(`${dir}/${f.name}`).toString(), tsApi),
                    });
                });
            }
            else if (f.name.endsWith("WebsiteConstruct.java.mustache")) {
                mustacheConfig.cloudscapeReactTsWebsites.forEach((csWebsite) => {
                    new projen_1.SampleFile(this, `${path.join(...pathPrefixes, `${csWebsite.websiteName}.java`)}`, {
                        contents: Mustache.render(fs.readFileSync(`${dir}/${f.name}`).toString(), csWebsite),
                    });
                });
            }
            else {
                const contents = Mustache.render(fs.readFileSync(`${dir}/${f.name}`).toString(), mustacheConfig);
                return new projen_1.SampleFile(this, `${path.join(...pathPrefixes, f.name.replace(".mustache", ""))}`, {
                    contents,
                    sourcePath: (!contents && `${dir}/${f.name}`) || undefined,
                });
            }
        });
    }
}
exports.InfrastructureJavaProject = InfrastructureJavaProject;
_a = JSII_RTTI_SYMBOL_1;
InfrastructureJavaProject[_a] = { fqn: "@aws/pdk.infrastructure.InfrastructureJavaProject", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,