"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeIntegrationResponseSet = exports.CustomIntegrationResponseSet = exports.S3JsonErrorMessageIntegrationResponseSet = exports.DefaultPassthroughIntegrationResponseSet = exports.CatchAllErrorIntegrationResponseSet = exports.IntegrationResponseSet = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const prepare_spec_1 = require("../prepare-spec-event-handler/prepare-spec");
/**
 * A set of integration responses. You can extend this to implement your own integration response set
 */
class IntegrationResponseSet {
}
exports.IntegrationResponseSet = IntegrationResponseSet;
_a = JSII_RTTI_SYMBOL_1;
IntegrationResponseSet[_a] = { fqn: "@aws/pdk.type_safe_api.IntegrationResponseSet", version: "0.26.14" };
/**
 * An integration response set that catches all errors and returns a 500
 */
class CatchAllErrorIntegrationResponseSet extends IntegrationResponseSet {
    render(props) {
        return {
            "(4|5)\\d{2}": {
                statusCode: "500",
                responseParameters: props.corsOptions
                    ? (0, prepare_spec_1.generateCorsResponseParameters)(props.corsOptions)
                    : {},
                responseTemplates: {},
            },
        };
    }
}
exports.CatchAllErrorIntegrationResponseSet = CatchAllErrorIntegrationResponseSet;
_b = JSII_RTTI_SYMBOL_1;
CatchAllErrorIntegrationResponseSet[_b] = { fqn: "@aws/pdk.type_safe_api.CatchAllErrorIntegrationResponseSet", version: "0.26.14" };
/**
 * An integration response set which adds a passthrough for the default response
 */
class DefaultPassthroughIntegrationResponseSet extends IntegrationResponseSet {
    constructor(props) {
        super();
        this.statusCode = props?.statusCode ?? 200;
    }
    render(props) {
        return {
            default: {
                statusCode: `${this.statusCode}`,
                responseParameters: props.corsOptions
                    ? (0, prepare_spec_1.generateCorsResponseParameters)(props.corsOptions)
                    : {},
                responseTemplates: {},
            },
        };
    }
}
exports.DefaultPassthroughIntegrationResponseSet = DefaultPassthroughIntegrationResponseSet;
_c = JSII_RTTI_SYMBOL_1;
DefaultPassthroughIntegrationResponseSet[_c] = { fqn: "@aws/pdk.type_safe_api.DefaultPassthroughIntegrationResponseSet", version: "0.26.14" };
/**
 * An integration response set for S3 errors, that returns a JSON payload with the S3 error message
 */
class S3JsonErrorMessageIntegrationResponseSet extends IntegrationResponseSet {
    response(props, status) {
        return {
            [`${status}`]: {
                statusCode: `${status}`,
                responseParameters: props.corsOptions
                    ? (0, prepare_spec_1.generateCorsResponseParameters)(props.corsOptions)
                    : {},
                responseTemplates: {
                    "application/json": `#set($message = $input.body.split('<Message>')[1].split('</Message>')[0])
{"message": "$util.escapeJavaScript($message).replaceAll("\\'","'")"}
`,
                },
            },
        };
    }
    render(props) {
        return {
            ...this.response(props, 400),
            ...this.response(props, 403),
            ...this.response(props, 404),
            ...this.response(props, 500),
        };
    }
}
exports.S3JsonErrorMessageIntegrationResponseSet = S3JsonErrorMessageIntegrationResponseSet;
_d = JSII_RTTI_SYMBOL_1;
S3JsonErrorMessageIntegrationResponseSet[_d] = { fqn: "@aws/pdk.type_safe_api.S3JsonErrorMessageIntegrationResponseSet", version: "0.26.14" };
/**
 * A custom integration response set where you can specify the responses as you wish
 */
class CustomIntegrationResponseSet extends IntegrationResponseSet {
    constructor(props) {
        super();
        this.responses = props.responses;
    }
    render(props) {
        return Object.fromEntries(Object.entries(this.responses ?? {}).map(([responseStatusPattern, errorResponse]) => [
            responseStatusPattern,
            {
                ...errorResponse,
                responseParameters: {
                    ...errorResponse.responseParameters,
                    ...(props.corsOptions
                        ? (0, prepare_spec_1.generateCorsResponseParameters)(props.corsOptions)
                        : {}),
                },
            },
        ]));
    }
}
exports.CustomIntegrationResponseSet = CustomIntegrationResponseSet;
_e = JSII_RTTI_SYMBOL_1;
CustomIntegrationResponseSet[_e] = { fqn: "@aws/pdk.type_safe_api.CustomIntegrationResponseSet", version: "0.26.14" };
/**
 * An integration response set which combines the provided integration response sets.
 * Response sets are combined in order, so later responses will override previous ones for
 * overlapping response status patterns.
 */
class CompositeIntegrationResponseSet extends IntegrationResponseSet {
    constructor(...responseSets) {
        super();
        this.responseSets = responseSets;
    }
    render(props) {
        return this.responseSets.reduce((responses, responseSet) => ({
            ...responses,
            ...responseSet.render(props),
        }), {});
    }
}
exports.CompositeIntegrationResponseSet = CompositeIntegrationResponseSet;
_f = JSII_RTTI_SYMBOL_1;
CompositeIntegrationResponseSet[_f] = { fqn: "@aws/pdk.type_safe_api.CompositeIntegrationResponseSet", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,