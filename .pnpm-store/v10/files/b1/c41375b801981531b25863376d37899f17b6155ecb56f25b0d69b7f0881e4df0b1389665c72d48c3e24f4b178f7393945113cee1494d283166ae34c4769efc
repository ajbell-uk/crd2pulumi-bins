"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWdhdGV3YXktaW50ZWdyYXRpb25zLXR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLWdhdGV3YXktaW50ZWdyYXRpb25zLXR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQ29weXJpZ2h0IFtBbWF6b24uY29tXShodHRwOi8vYW1hem9uLmNvbS8pLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAgKi9cbmltcG9ydCB7IEFwaUtleVNvdXJjZVR5cGUsIENvcnNPcHRpb25zIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5XCI7XG5pbXBvcnQgeyBBdXRob3JpemVyIH0gZnJvbSBcIi4uL2F1dGhvcml6ZXJzXCI7XG5pbXBvcnQgeyBJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9pbnRlZ3JhdGlvbnNcIjtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBhbiBpbnRlZ3JhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVTYWZlQXBpSW50ZWdyYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIFJlcXVpcmUgYW4gQVBJIGtleSB0byBpbnZva2UgdGhpcyBvcGVyYXRpb24uIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBzZXR0aW5nIGlmIHByZXNlbnQuXG4gICAqIFRoaXMgaXMgb25seSBhcHBsaWNhYmxlIHdoZW4gdGhlIEFQSSBrZXkgc291cmNlIGlzIEhFQURFUi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGFwaUtleVJlcXVpcmVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGFuIGludGVncmF0aW9uIGZvciBhbiBpbmRpdmlkdWFsIEFQSSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlU2FmZUFwaUludGVncmF0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBpbnRlZ3JhdGlvbiB0byBzZXJ2aWNlIHRoZSBhcGkgb3BlcmF0aW9uXG4gICAqL1xuICByZWFkb25seSBpbnRlZ3JhdGlvbjogSW50ZWdyYXRpb247XG4gIC8qKlxuICAgKiBUaGUgYXV0aG9yaXplciB0byB1c2UgZm9yIHRoaXMgYXBpIG9wZXJhdGlvbiAob3ZlcnJpZGVzIHRoZSBkZWZhdWx0KVxuICAgKi9cbiAgcmVhZG9ubHkgYXV0aG9yaXplcj86IEF1dGhvcml6ZXI7XG4gIC8qKlxuICAgKiBPcHRpb25zIGZvciB0aGUgaW50ZWdyYXRpb25cbiAgICovXG4gIHJlYWRvbmx5IG9wdGlvbnM/OiBUeXBlU2FmZUFwaUludGVncmF0aW9uT3B0aW9ucztcbn1cblxuLyoqXG4gKiBBIG1hcHBpbmcgb2Ygb3BlcmF0aW9uIGlkIHRvIHRoZSBpbnRlZ3JhdGlvbiBmb3IgdGhhdCBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgVHlwZVNhZmVBcGlJbnRlZ3JhdGlvbnMgPSB7XG4gIHJlYWRvbmx5IFtvcGVyYXRpb25JZDogc3RyaW5nXTogVHlwZVNhZmVBcGlJbnRlZ3JhdGlvbjtcbn07XG5cbi8qKlxuICogQW4gaHR0cCBtZXRob2RcbiAqL1xuZXhwb3J0IHR5cGUgTWV0aG9kID1cbiAgfCBcImdldFwiXG4gIHwgXCJwdXRcIlxuICB8IFwicG9zdFwiXG4gIHwgXCJkZWxldGVcIlxuICB8IFwib3B0aW9uc1wiXG4gIHwgXCJoZWFkXCJcbiAgfCBcInBhdGNoXCJcbiAgfCBcInRyYWNlXCI7XG5cbi8qKlxuICogU3RydWN0dXJlIHRvIGNvbnRhaW4gYW4gQVBJIG9wZXJhdGlvbidzIG1ldGhvZCBhbmQgcGF0aFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGhvZEFuZFBhdGgge1xuICAvKipcbiAgICogVGhlIHBhdGggb2YgdGhpcyBvcGVyYXRpb24gaW4gdGhlIGFwaVxuICAgKi9cbiAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGh0dHAgbWV0aG9kIG9mIHRoaXMgb3BlcmF0aW9uXG4gICAqL1xuICByZWFkb25seSBtZXRob2Q6IE1ldGhvZDtcbn1cblxuLyoqXG4gKiBEZXRhaWxzIGFib3V0IGFuIEFQSSBvcGVyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcGVyYXRpb25EZXRhaWxzIGV4dGVuZHMgTWV0aG9kQW5kUGF0aCB7XG4gIC8qKlxuICAgKiBDb250ZW50IHR5cGVzIGFjY2VwdGVkIGJ5IHRoaXMgb3BlcmF0aW9uXG4gICAqIEBkZWZhdWx0IGFwcGxpY2F0aW9uL2pzb25cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRlbnRUeXBlcz86IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFR5cGUgZm9yIHRoZSBnZW5lcmF0ZWQgT3BlcmF0aW9uIExvb2t1cCBzdHJ1Y3R1cmUsIHByb3ZpZGluZyBkZXRhaWxzIGFib3V0IHRoZSBtZXRob2QgYW5kIHBhdGggb2YgZWFjaCBBUEkgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE9wZXJhdGlvbkxvb2t1cCA9IHtcbiAgcmVhZG9ubHkgW29wZXJhdGlvbklkOiBzdHJpbmddOiBPcGVyYXRpb25EZXRhaWxzO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBBUEkga2V5c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwaUtleU9wdGlvbnMge1xuICAvKipcbiAgICogU291cmNlIHR5cGUgZm9yIGFuIEFQSSBrZXlcbiAgICovXG4gIHJlYWRvbmx5IHNvdXJjZTogQXBpS2V5U291cmNlVHlwZTtcbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHJlcXVpcmUgYW4gQVBJIGtleSBvbiBhbGwgb3BlcmF0aW9ucyBieSBkZWZhdWx0LlxuICAgKiBPbmx5IGFwcGxpY2FibGUgd2hlbiB0aGUgc291cmNlIGlzIEhFQURFUi5cbiAgICovXG4gIHJlYWRvbmx5IHJlcXVpcmVkQnlEZWZhdWx0PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHJlcXVpcmVkIGFsb25nc2lkZSBhbiBPcGVuIEFQSSBzcGVjaWZpY2F0aW9uIHRvIGNyZWF0ZSBBUEkgR2F0ZXdheSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlU2FmZUFwaU9wdGlvbnMge1xuICAvKipcbiAgICogQSBtYXBwaW5nIG9mIEFQSSBvcGVyYXRpb24gdG8gaXRzIGludGVncmF0aW9uXG4gICAqL1xuICByZWFkb25seSBpbnRlZ3JhdGlvbnM6IFR5cGVTYWZlQXBpSW50ZWdyYXRpb25zO1xuICAvKipcbiAgICogRGV0YWlscyBhYm91dCBlYWNoIG9wZXJhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgb3BlcmF0aW9uTG9va3VwOiBPcGVyYXRpb25Mb29rdXA7XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBhdXRob3JpemVyIHRvIHVzZSBmb3IgeW91ciBhcGkuIFdoZW4gb21pdHRlZCwgbm8gZGVmYXVsdCBhdXRob3JpemVyIGlzIHVzZWQuXG4gICAqIEF1dGhvcml6ZXJzIHNwZWNpZmllZCBhdCB0aGUgaW50ZWdyYXRpb24gbGV2ZWwgd2lsbCBvdmVycmlkZSB0aGlzIGZvciB0aGF0IG9wZXJhdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGRlZmF1bHRBdXRob3JpemVyPzogQXV0aG9yaXplcjtcbiAgLyoqXG4gICAqIENyb3NzIE9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIG9wdGlvbnMgZm9yIHRoZSBBUElcbiAgICovXG4gIHJlYWRvbmx5IGNvcnNPcHRpb25zPzogQ29yc09wdGlvbnM7XG4gIC8qKlxuICAgKiBPcHRpb25zIGZvciBBUEkga2V5c1xuICAgKi9cbiAgcmVhZG9ubHkgYXBpS2V5T3B0aW9ucz86IEFwaUtleU9wdGlvbnM7XG5cbiAgLy8gSU1QT1JUQU5UIE5PVEUhIElmIGFkZGluZyBhIG5ldyBwcm9wZXJ0eSBoZXJlLCBtYWtlIHN1cmUgeW91IHVwZGF0ZSB0aGUgSmF2YSBpbmZyYXN0cnVjdHVyZVxuICAvLyBnZW5lcmF0b3IncyBhcGkubXVzdGFjaGUgYW5kIGFwaVByb3BzLm11c3RhY2hlIHRvIGVuc3VyZSB0aGUgZ2VuZXJhdGVkIGNvbnN0cnVjdCBjYW4gcGFzc1xuICAvLyB0aGUgbmV3IHByb3BlcnR5IHRvIHRoZSBUeXBlU2FmZVJlc3RBcGkgY29uc3RydWN0LlxufVxuXG4vKipcbiAqIENyb3NzLW9yaWdpbiByZXNvdXJjZSBzaGFyaW5nIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkQ29yc09wdGlvbnMge1xuICAvKipcbiAgICogSFRUUCBtZXRob2RzIHRvIGFsbG93XG4gICAqL1xuICByZWFkb25seSBhbGxvd01ldGhvZHM6IHN0cmluZ1tdO1xuICAvKipcbiAgICogSGVhZGVycyB0byBhbGxvd1xuICAgKi9cbiAgcmVhZG9ubHkgYWxsb3dIZWFkZXJzOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIE9yaWdpbnMgdG8gYWxsb3dcbiAgICovXG4gIHJlYWRvbmx5IGFsbG93T3JpZ2luczogc3RyaW5nW107XG4gIC8qKlxuICAgKiBIVFRQIHN0YXR1cyBjb2RlIHRvIGJlIHJldHVybmVkIGJ5IHByZWZsaWdodCByZXF1ZXN0c1xuICAgKi9cbiAgcmVhZG9ubHkgc3RhdHVzQ29kZTogbnVtYmVyO1xufVxuIl19