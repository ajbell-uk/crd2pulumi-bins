"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"aws-cdk-java-app-options.js","sourceRoot":"","sources":["aws-cdk-java-app-options.ts"],"names":[],"mappings":"","sourcesContent":["// ~~ Generated by projen. To modify, edit .projenrc.js and run \"pnpm exec projen\".\nimport type { awscdk, github, GitOptions, IgnoreFileOptions, java, LoggerOptions, Project, ProjectType, ProjenrcJsonOptions, RenovatebotOptions, SampleReadmeProps } from 'projen';\n\n/**\n * AwsCdkJavaAppOptions\n */\nexport interface AwsCdkJavaAppOptions {\n  /**\n   * Minimum version of the `constructs` library to depend on.\n   * @default - for CDK 1.x the default is \"3.2.27\", for CDK 2.x the default is\n\"10.0.5\".\n   * @stability experimental\n   */\n  readonly constructsVersion?: string;\n  /**\n   * Use pinned version instead of caret version for CDK.\n   * You can use this to prevent mixed versions for your CDK dependencies and to prevent auto-updates.\n   * If you use experimental features this will let you define the moment you include breaking changes.\n   * @stability experimental\n   */\n  readonly cdkVersionPinning?: boolean;\n  /**\n   * AWS CDK modules required for testing.\n   * @deprecated For CDK 2.x use 'devDeps' (in node.js projects) or 'testDeps' (in java projects) instead\n   * @stability deprecated\n   */\n  readonly cdkTestDependencies?: Array<string>;\n  /**\n   * If this is enabled (default), all modules declared in `cdkDependencies` will be also added as normal `dependencies` (as well as `peerDependencies`).\n   * This is to ensure that downstream consumers actually have your CDK dependencies installed\n   * when using npm < 7 or yarn, where peer dependencies are not automatically installed.\n   * If this is disabled, `cdkDependencies` will be added to `devDependencies` to ensure\n   * they are present during development.\n   *\n   * Note: this setting only applies to construct library projects\n   * @default true\n   * @deprecated Not supported in CDK v2.\n   * @stability deprecated\n   */\n  readonly cdkDependenciesAsDeps?: boolean;\n  /**\n   * Which AWS CDKv1 modules this project requires.\n   * @deprecated For CDK 2.x use \"deps\" instead. (or \"peerDeps\" if you're building a library)\n   * @stability deprecated\n   */\n  readonly cdkDependencies?: Array<string>;\n  /**\n   * Install the assertions library?\n   * Only needed for CDK 1.x. If using CDK 2.x then\n   * assertions is already included in 'aws-cdk-lib'\n   * @default - will be included by default for AWS CDK >= 1.111.0 < 2.0.0\n   * @stability experimental\n   */\n  readonly cdkAssertions?: boolean;\n  /**\n   * Warning: NodeJS only.\n   * Install the\n   * @default - will be included by default for AWS CDK >= 1.0.0 < 2.0.0\n   * @deprecated The\n   * @stability deprecated\n   * @aws-cdk /assertions (in V1) and included in `aws-cdk-lib` for V2.\n   */\n  readonly cdkAssert?: boolean;\n  /**\n   * Minimum version of the AWS CDK to depend on.\n   * @default \"2.1.0\"\n   * @stability experimental\n   */\n  readonly cdkVersion?: string;\n  /**\n   * Glob patterns to include in `cdk watch`.\n   * @default []\n   * @stability experimental\n   */\n  readonly watchIncludes?: Array<string>;\n  /**\n   * Glob patterns to exclude from `cdk watch`.\n   * @default []\n   * @stability experimental\n   */\n  readonly watchExcludes?: Array<string>;\n  /**\n   * To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them.\n   * @default ApprovalLevel.BROADENING\n   * @stability experimental\n   */\n  readonly requireApproval?: awscdk.ApprovalLevel;\n  /**\n   * Include all feature flags in cdk.json.\n   * @default true\n   * @stability experimental\n   */\n  readonly featureFlags?: boolean;\n  /**\n   * Additional context to include in `cdk.json`.\n   * @default - no additional context\n   * @stability experimental\n   */\n  readonly context?: Record<string, any>;\n  /**\n   * cdk.out directory.\n   * @default \"cdk.out\"\n   * @stability experimental\n   */\n  readonly cdkout?: string;\n  /**\n   * A command to execute before synthesis.\n   * This command will be called when\n   * running `cdk synth` or when `cdk watch` identifies a change in your source\n   * code before redeployment.\n   * @default - no build command\n   * @stability experimental\n   */\n  readonly buildCommand?: string;\n  /**\n   * The java package to use for the code sample.\n   * @default \"org.acme\"\n   * @stability experimental\n   */\n  readonly sampleJavaPackage?: string;\n  /**\n   * Include sample code and test if the relevant directories don't exist.\n   * @default true\n   * @stability experimental\n   */\n  readonly sample?: boolean;\n  /**\n   * List of test dependencies for this project.\n   * Dependencies use the format: `<groupId>/<artifactId>@<semver>`\n   *\n   * Additional dependencies can be added via `project.addTestDependency()`.\n   * @default []\n   * @stability experimental\n   * @featured true\n   */\n  readonly testDeps?: Array<string>;\n  /**\n   * Options related to projenrc in java.\n   * @default - default options\n   * @stability experimental\n   */\n  readonly projenrcJavaOptions?: java.ProjenrcOptions;\n  /**\n   * Use projenrc in java.\n   * This will install `projen` as a java dependency and will add a `synth` task which\n   * will compile & execute `main()` from `src/main/java/projenrc.java`.\n   * @default true\n   * @stability experimental\n   */\n  readonly projenrcJava?: boolean;\n  /**\n   * Packaging options.\n   * @default - defaults\n   * @stability experimental\n   */\n  readonly packagingOptions?: java.MavenPackagingOptions;\n  /**\n   * junit options.\n   * @default - defaults\n   * @stability experimental\n   */\n  readonly junitOptions?: java.JunitOptions;\n  /**\n   * Include junit tests.\n   * @default true\n   * @stability experimental\n   */\n  readonly junit?: boolean;\n  /**\n   * Final artifact output directory.\n   * @default \"dist/java\"\n   * @stability experimental\n   */\n  readonly distdir?: string;\n  /**\n   * List of runtime dependencies for this project.\n   * Dependencies use the format: `<groupId>/<artifactId>@<semver>`\n   *\n   * Additional dependencies can be added via `project.addDependency()`.\n   * @default []\n   * @stability experimental\n   * @featured true\n   */\n  readonly deps?: Array<string>;\n  /**\n   * Compile options.\n   * @default - defaults\n   * @stability experimental\n   */\n  readonly compileOptions?: java.MavenCompileOptions;\n  /**\n   * The URL, like the name, is not required.\n   * This is a nice gesture for\n   * projects users, however, so that they know where the project lives.\n   * @default undefined\n   * @stability experimental\n   * @featured true\n   */\n  readonly url?: string;\n  /**\n   * A Parent Pom can be used to have a child project inherit properties/plugins/ect in order to reduce duplication and keep standards across a large amount of repos.\n   * @default undefined\n   * @stability experimental\n   * @featured true\n   */\n  readonly parentPom?: java.ParentPom;\n  /**\n   * Project packaging format.\n   * @default \"jar\"\n   * @stability experimental\n   */\n  readonly packaging?: string;\n  /**\n   * Description of a project is always good.\n   * Although this should not replace\n   * formal documentation, a quick comment to any readers of the POM is always\n   * helpful.\n   * @default undefined\n   * @stability experimental\n   * @featured true\n   */\n  readonly description?: string;\n  /**\n   * This is the last piece of the naming puzzle.\n   * groupId:artifactId denotes a\n   * single project but they cannot delineate which incarnation of that project\n   * we are talking about. Do we want the junit:junit of 2018 (version 4.12), or\n   * of 2007 (version 3.8.2)? In short: code changes, those changes should be\n   * versioned, and this element keeps those versions in line. It is also used\n   * within an artifact's repository to separate versions from each other.\n   * my-project version 1.0 files live in the directory structure\n   * $M2_REPO/org/codehaus/mojo/my-project/1.0.\n   * @default \"0.1.0\"\n   * @stability experimental\n   * @featured true\n   */\n  readonly version?: string;\n  /**\n   * This is generally unique amongst an organization or a project.\n   * For example,\n   * all core Maven artifacts do (well, should) live under the groupId\n   * org.apache.maven. Group ID's do not necessarily use the dot notation, for\n   * example, the junit project. Note that the dot-notated groupId does not have\n   * to correspond to the package structure that the project contains. It is,\n   * however, a good practice to follow. When stored within a repository, the\n   * group acts much like the Java packaging structure does in an operating\n   * system. The dots are replaced by OS specific directory separators (such as\n   * '/' in Unix) which becomes a relative directory structure from the base\n   * repository. In the example given, the org.codehaus.mojo group lives within\n   * the directory $M2_REPO/org/codehaus/mojo.\n   * @default \"org.acme\"\n   * @stability experimental\n   * @featured true\n   */\n  readonly groupId?: string;\n  /**\n   * The artifactId is generally the name that the project is known by.\n   * Although\n   * the groupId is important, people within the group will rarely mention the\n   * groupId in discussion (they are often all be the same ID, such as the\n   * MojoHaus project groupId: org.codehaus.mojo). It, along with the groupId,\n   * creates a key that separates this project from every other project in the\n   * world (at least, it should :) ). Along with the groupId, the artifactId\n   * fully defines the artifact's living quarters within the repository. In the\n   * case of the above project, my-project lives in\n   * $M2_REPO/org/codehaus/mojo/my-project.\n   * @default \"my-app\"\n   * @stability experimental\n   * @featured true\n   */\n  readonly artifactId?: string;\n  /**\n   * Enable VSCode integration.\n   * Enabled by default for root projects. Disabled for non-root projects.\n   * @default true\n   * @stability experimental\n   */\n  readonly vscode?: boolean;\n  /**\n   * Auto-close stale issues and pull requests.\n   * To disable set `stale` to `false`.\n   * @default - see defaults in `StaleOptions`\n   * @stability experimental\n   */\n  readonly staleOptions?: github.StaleOptions;\n  /**\n   * Auto-close of stale issues and pull request.\n   * See `staleOptions` for options.\n   * @default false\n   * @stability experimental\n   */\n  readonly stale?: boolean;\n  /**\n   * The README setup.\n   * @default - { filename: 'README.md', contents: '# replace this' }\n   * @stability experimental\n   */\n  readonly readme?: SampleReadmeProps;\n  /**\n   * The name of a secret which includes a GitHub Personal Access Token to be used by projen workflows.\n   * This token needs to have the `repo`, `workflows`\n   * and `packages` scope.\n   * @default \"PROJEN_GITHUB_TOKEN\"\n   * @deprecated use `projenCredentials`\n   * @stability deprecated\n   */\n  readonly projenTokenSecret?: string;\n  /**\n   * Choose a method of providing GitHub API access for projen workflows.\n   * @default - use a personal access token named PROJEN_GITHUB_TOKEN\n   * @stability experimental\n   */\n  readonly projenCredentials?: github.GithubCredentials;\n  /**\n   * Which type of project this is (library/app).\n   * @default ProjectType.UNKNOWN\n   * @deprecated no longer supported at the base project level\n   * @stability deprecated\n   */\n  readonly projectType?: ProjectType;\n  /**\n   * Options for mergify.\n   * @default - default options\n   * @deprecated use `githubOptions.mergifyOptions` instead\n   * @stability deprecated\n   */\n  readonly mergifyOptions?: github.MergifyOptions;\n  /**\n   * Whether mergify should be enabled on this repository or not.\n   * @default true\n   * @deprecated use `githubOptions.mergify` instead\n   * @stability deprecated\n   */\n  readonly mergify?: boolean;\n  /**\n   * Add a Gitpod development environment.\n   * @default false\n   * @stability experimental\n   */\n  readonly gitpod?: boolean;\n  /**\n   * Options for GitHub integration.\n   * @default - see GitHubOptions\n   * @stability experimental\n   */\n  readonly githubOptions?: github.GitHubOptions;\n  /**\n   * Enable GitHub integration.\n   * Enabled by default for root projects. Disabled for non-root projects.\n   * @default true\n   * @stability experimental\n   */\n  readonly github?: boolean;\n  /**\n   * Add a VSCode development environment (used for GitHub Codespaces).\n   * @default false\n   * @stability experimental\n   */\n  readonly devContainer?: boolean;\n  /**\n   * Add a `clobber` task which resets the repo to origin.\n   * @default - true, but false for subprojects\n   * @stability experimental\n   */\n  readonly clobber?: boolean;\n  /**\n   * Configure options for automatic merging on GitHub.\n   * Has no effect if\n   * `github.mergify` or `autoMerge` is set to false.\n   * @default - see defaults in `AutoMergeOptions`\n   * @stability experimental\n   */\n  readonly autoMergeOptions?: github.AutoMergeOptions;\n  /**\n   * Enable automatic merging on GitHub.\n   * Has no effect if `github.mergify`\n   * is set to false.\n   * @default true\n   * @stability experimental\n   */\n  readonly autoMerge?: boolean;\n  /**\n   * Enable and configure the 'auto approve' workflow.\n   * @default - auto approve is disabled\n   * @stability experimental\n   */\n  readonly autoApproveOptions?: github.AutoApproveOptions;\n  /**\n   * Options for renovatebot.\n   * @default - default options\n   * @stability experimental\n   */\n  readonly renovatebotOptions?: RenovatebotOptions;\n  /**\n   * Use renovatebot to handle dependency upgrades.\n   * @default false\n   * @stability experimental\n   */\n  readonly renovatebot?: boolean;\n  /**\n   * Options for .projenrc.json.\n   * @default - default options\n   * @stability experimental\n   */\n  readonly projenrcJsonOptions?: ProjenrcJsonOptions;\n  /**\n   * Generate (once) .projenrc.json (in JSON). Set to `false` in order to disable .projenrc.json generation.\n   * @default false\n   * @stability experimental\n   */\n  readonly projenrcJson?: boolean;\n  /**\n   * The shell command to use in order to run the projen CLI.\n   * Can be used to customize in special environments.\n   * @default \"npx projen\"\n   * @stability experimental\n   */\n  readonly projenCommand?: string;\n  /**\n   * The parent project, if this project is part of a bigger project.\n   * @stability experimental\n   */\n  readonly parent?: Project;\n  /**\n   * The root directory of the project.\n   * Relative to this directory, all files are synthesized.\n   *\n   * If this project has a parent, this directory is relative to the parent\n   * directory and it cannot be the same as the parent or any of it's other\n   * subprojects.\n   * @default \".\"\n   * @stability experimental\n   */\n  readonly outdir?: string;\n  /**\n   * Configure logging options such as verbosity.\n   * @default {}\n   * @stability experimental\n   */\n  readonly logging?: LoggerOptions;\n  /**\n   * Configuration options for git.\n   * @stability experimental\n   */\n  readonly gitOptions?: GitOptions;\n  /**\n   * Configuration options for .gitignore file.\n   * @stability experimental\n   */\n  readonly gitIgnoreOptions?: IgnoreFileOptions;\n  /**\n   * Whether to commit the managed files by default.\n   * @default true\n   * @stability experimental\n   */\n  readonly commitGenerated?: boolean;\n  /**\n   * @default $BASEDIR\n   */\n  readonly name: string;\n}\n"]}