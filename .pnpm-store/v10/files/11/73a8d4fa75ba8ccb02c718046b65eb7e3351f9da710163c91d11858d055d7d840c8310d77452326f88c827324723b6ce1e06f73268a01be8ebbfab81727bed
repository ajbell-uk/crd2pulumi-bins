"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const client_apigatewayv2_1 = require("@aws-sdk/client-apigatewayv2");
const client_s3_1 = require("@aws-sdk/client-s3");
const websocket_schema_1 = require("./websocket-schema");
const BATCH_SIZE = 10;
const s3 = new client_s3_1.S3({
    customUserAgent: `aws-pdk/type-safe-api/ws-schema`,
});
const apiGw = new client_apigatewayv2_1.ApiGatewayV2({
    customUserAgent: `aws-pdk/type-safe-api/ws-schema`,
});
/**
 * Chunk an array into sub-arrays of the given size
 */
const chunk = (items, size = BATCH_SIZE) => {
    const chunks = [];
    for (let i = 0; i < items.length; i += size) {
        chunks.push(items.slice(i, i + size));
    }
    return chunks;
};
/**
 * Delete a batch of models
 */
const batchDeleteModels = async (apiId, routes, models) => {
    for (const batch of chunk(models)) {
        await Promise.all(batch.map(async (m) => {
            // If there's a route for this model, and it's associated with this model, we need to first remove the association,
            // since cloudformation will delete the route later, and we're not allowed to delete a model that's still referenced
            // by a route
            if (routes[m.Name] &&
                routes[m.Name].RequestModels?.model === m.Name) {
                await apiGw.updateRoute({
                    ...routes[m.Name],
                    ApiId: apiId,
                    RouteId: routes[m.Name].RouteId,
                    RequestModels: {
                        model: "",
                    },
                    ModelSelectionExpression: undefined,
                });
            }
            await apiGw.deleteModel({
                ApiId: apiId,
                ModelId: m.ModelId,
            });
        }));
    }
};
/**
 * Retrieve all models which already exist on the api
 */
const getAllModelsByRouteKey = async (apiId) => {
    let nextToken = undefined;
    const models = [];
    do {
        const res = await apiGw.getModels({
            ApiId: apiId,
            NextToken: nextToken,
        });
        nextToken = res.NextToken;
        models.push(...(res.Items ?? []));
    } while (nextToken);
    // Models are named with the route key
    return Object.fromEntries(models.map((m) => [m.Name, m]));
};
const getAllRoutesByRouteKey = async (apiId) => {
    let nextToken = undefined;
    const routes = [];
    do {
        const res = await apiGw.getRoutes({
            ApiId: apiId,
            NextToken: nextToken,
        });
        nextToken = res.NextToken;
        routes.push(...(res.Items ?? []));
    } while (nextToken);
    return Object.fromEntries(routes.map((r) => [r.RouteKey, r]));
};
/**
 * Wrap the schema from the spec in our protocol-specific schema
 */
const wrapSchema = (schema) => ({
    type: "object",
    properties: {
        // All inputs must have a "route" which is our route selector
        route: {
            type: "string",
        },
        // Payload references the definition
        payload: {
            $ref: "#/definitions/Payload",
        },
    },
    // When we don't have a schema, the payload can be anything, including not specified
    required: ["route", ...(schema ? ["payload"] : [])],
    definitions: {
        ...schema?.definitions,
        // The payload is of the operation schema type, or {} which means "any"
        Payload: schema?.schema ?? {},
    },
});
/**
 * Create a batch of models with the appropriate schema
 */
const batchCreateModels = async (apiId, routeKeys, schemas) => {
    const results = [];
    for (const batch of chunk(routeKeys)) {
        results.push(...(await Promise.all(batch.map(async (routeKey) => apiGw.createModel({
            ApiId: apiId,
            Name: routeKey,
            ContentType: "application/json",
            Schema: JSON.stringify(wrapSchema(schemas[routeKey])),
        })))));
    }
    return Object.fromEntries(results.map((r) => [r.Name, r.ModelId]));
};
/**
 * Update a batch of models with the new schema
 */
const batchUpdateModels = async (apiId, models, schemas) => {
    const results = [];
    for (const batch of chunk(models)) {
        results.push(...(await Promise.all(batch.map(async (model) => apiGw.updateModel({
            ApiId: apiId,
            ModelId: model.ModelId,
            ContentType: "application/json",
            Schema: JSON.stringify(wrapSchema(schemas[model.Name])),
        })))));
    }
    return Object.fromEntries(results.map((r) => [r.Name, r.ModelId]));
};
/**
 * Create or update the models
 */
const createOrUpdateModels = async (properties, routes) => {
    const modelsByRouteKey = await getAllModelsByRouteKey(properties.apiId);
    const existingRouteKeys = new Set(Object.keys(modelsByRouteKey));
    const newRouteKeys = new Set(Object.keys(properties.serverOperationPaths));
    const deletedRouteKeys = [...existingRouteKeys].filter((id) => !newRouteKeys.has(id));
    console.log("Operations to delete", deletedRouteKeys);
    const addedRouteKeys = [...newRouteKeys].filter((id) => !existingRouteKeys.has(id));
    console.log("Operations to add", addedRouteKeys);
    const updateRouteKeys = [...newRouteKeys].filter((id) => existingRouteKeys.has(id));
    console.log("Operations to update", updateRouteKeys);
    // Delete all the models to delete
    await batchDeleteModels(properties.apiId, routes, deletedRouteKeys.map((id) => modelsByRouteKey[id]));
    // Load the spec
    const spec = JSON.parse(await (await s3.getObject({
        Bucket: properties.inputSpecLocation.bucket,
        Key: properties.inputSpecLocation.key,
    })).Body.transformToString("utf-8"));
    // Extract the schemas from the spec
    const schemas = (0, websocket_schema_1.extractWebSocketSchemas)([...addedRouteKeys, ...updateRouteKeys], properties.serverOperationPaths, spec);
    // Create/update the relevant models
    return {
        ...(await batchCreateModels(properties.apiId, addedRouteKeys.filter((id) => schemas[id]), schemas)),
        ...(await batchUpdateModels(properties.apiId, updateRouteKeys
            .filter((id) => schemas[id])
            .map((id) => modelsByRouteKey[id]), schemas)),
    };
};
/**
 * Delete all models
 */
const deleteModels = async (properties, routes) => {
    const modelsByRouteKey = await getAllModelsByRouteKey(properties.apiId);
    await batchDeleteModels(properties.apiId, routes, Object.values(modelsByRouteKey));
};
/**
 * Handler for creating websocket schemas
 */
exports.handler = async (event) => {
    const PhysicalResourceId = event.PhysicalResourceId ?? `${event.ResourceProperties.apiId}-models`;
    const routes = await getAllRoutesByRouteKey(event.ResourceProperties.apiId);
    switch (event.RequestType) {
        case "Create":
        case "Update":
            await createOrUpdateModels(event.ResourceProperties, routes);
            break;
        case "Delete":
            await deleteModels(event.ResourceProperties, routes);
            break;
        default:
            break;
    }
    return {
        PhysicalResourceId,
    };
};
//# sourceMappingURL=data:application/json;base64,