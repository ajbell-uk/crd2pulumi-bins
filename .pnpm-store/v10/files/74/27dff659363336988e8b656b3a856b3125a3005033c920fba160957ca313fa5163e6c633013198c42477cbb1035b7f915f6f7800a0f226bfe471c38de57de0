"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseTrigger = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Used to manage release strategies. This includes release
 * and release artifact automation
 */
class ReleaseTrigger {
    /**
     * Creates a manual release trigger.
     *
     * Use this option if you want totally manual releases.
     *
     * This will give you a release task that, in addition to the normal
     * release activities will trigger a `publish:git` task. This task will
     * handle project-level changelog management, release tagging, and pushing
     * these artifacts to origin.
     *
     * The command used for pushing can be customised by specifying
     * `gitPushCommand`. Set to an empty string to disable pushing entirely.
     *
     * Simply run `yarn release` to trigger a manual release.
     *
     * @param options release options
     */
    static manual(options = {}) {
        let changelogPath;
        if (options.changelog ?? true) {
            changelogPath = options.changelogPath ?? "CHANGELOG.md";
        }
        return new ReleaseTrigger({
            changelogPath: changelogPath,
            gitPushCommand: options.gitPushCommand,
        });
    }
    /**
     * Creates a scheduled release trigger.
     *
     * Automated releases will occur based on the provided cron schedule.
     *
     * @param options release options.
     */
    static scheduled(options) {
        return new ReleaseTrigger({
            schedule: options.schedule,
        });
    }
    /**
     * The release can only be triggered using the GitHub UI.
     */
    static workflowDispatch() {
        // This works because every workflow is always automatically `workflowDispatch`able
        //
        // The only thing we need to ensure is that no schedule or push trigger is
        // added, and that we don't count as "manual" because that leads to the
        // creation of a working copy task we don't need.
        return new ReleaseTrigger({
            workflowDispatchOnly: true,
        });
    }
    /**
     * Creates a continuous release trigger.
     *
     * Automated releases will occur on every commit.
     */
    static continuous(options = {}) {
        return new ReleaseTrigger({
            continuous: true,
            paths: options.paths,
        });
    }
    constructor(options = {}) {
        this.isContinuous = options.continuous ?? false;
        this.paths = options.paths;
        this.schedule = options.schedule;
        this.changelogPath = options.changelogPath;
        this.gitPushCommand = options.gitPushCommand;
        this.workflowDispatchOnly = options.workflowDispatchOnly;
    }
    /**
     * Whether or not this is a release trigger with a manual task run in a working copy.
     *
     * If the `ReleaseTrigger` is a GitHub-only manual task, this will return `false`.
     */
    get isManual() {
        return !(this.isContinuous || this.schedule) && !this.workflowDispatchOnly;
    }
}
exports.ReleaseTrigger = ReleaseTrigger;
_a = JSII_RTTI_SYMBOL_1;
ReleaseTrigger[_a] = { fqn: "projen.release.ReleaseTrigger", version: "0.95.4" };
//# sourceMappingURL=data:application/json;base64,