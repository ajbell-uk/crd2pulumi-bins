"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensurePrimitiveTypes = void 0;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const crypto = require("crypto");
const client_s3_1 = require("@aws-sdk/client-s3");
const prepare_spec_1 = require("./prepare-spec");
const s3 = new client_s3_1.S3Client({
    customUserAgent: `aws-pdk/type-safe-api/prepare-spec`,
});
/**
 * Prepare the api spec for API Gateway
 * @param inputSpecLocation location of the specification to prepare
 * @param outputSpecLocation location to write the prepared spec to
 * @param options integrations, authorizers etc to apply
 * @return the output location of the prepared spec
 */
const prepare = async ({ inputSpecLocation, outputSpecLocation, ...options }) => {
    // Read the spec from the s3 input location
    const inputSpec = JSON.parse(await (await s3.send(new client_s3_1.GetObjectCommand({
        Bucket: inputSpecLocation.bucket,
        Key: inputSpecLocation.key,
    }))).Body.transformToString("utf-8"));
    // Prepare the spec
    const preparedSpec = (0, prepare_spec_1.prepareApiSpec)(inputSpec, options);
    const preparedSpecHash = crypto
        .createHash("sha256")
        .update(JSON.stringify(preparedSpec))
        .digest("hex");
    const outputLocation = {
        bucket: outputSpecLocation.bucket,
        key: `${outputSpecLocation.key}/${preparedSpecHash}.json`,
    };
    // Write the spec to the s3 output location
    await s3.send(new client_s3_1.PutObjectCommand({
        Bucket: outputLocation.bucket,
        Key: outputLocation.key,
        Body: JSON.stringify(preparedSpec),
    }));
    return outputLocation;
};
/**
 * Due to a bug in cloudformation, primitive types are coerced into strings! Coerce them back here.
 * @see https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/1037
 */
const ensurePrimitiveTypes = (options) => {
    const result = JSON.parse(JSON.stringify(options));
    // Handle apiKeyOptions.requiredByDefault (boolean)
    if (result.apiKeyOptions?.requiredByDefault !== undefined) {
        if (result.apiKeyOptions.requiredByDefault === "true") {
            result.apiKeyOptions.requiredByDefault = true;
        }
        else if (result.apiKeyOptions.requiredByDefault === "false") {
            result.apiKeyOptions.requiredByDefault = false;
        }
    }
    // Handle corsOptions.statusCode (number)
    if (result.corsOptions?.statusCode !== undefined) {
        const statusCode = Number(result.corsOptions.statusCode);
        if (!isNaN(statusCode)) {
            result.corsOptions.statusCode = statusCode;
        }
    }
    if (result.integrations) {
        for (const operationId in result.integrations) {
            const integration = result.integrations[operationId];
            // Handle integration options.apiKeyRequired (boolean)
            if (integration.options?.apiKeyRequired !== undefined) {
                if (integration.options.apiKeyRequired === "true") {
                    integration.options.apiKeyRequired = true;
                }
                else if (integration.options.apiKeyRequired === "false") {
                    integration.options.apiKeyRequired = false;
                }
            }
            // Handle timeoutInMillis (number)
            if (integration.integration?.timeoutInMillis !== undefined) {
                const timeoutInMillis = Number(integration.integration.timeoutInMillis);
                if (!isNaN(timeoutInMillis)) {
                    integration.integration.timeoutInMillis = timeoutInMillis;
                }
            }
            // Handle tlsConfig.insecureSkipVerification (boolean)
            if (integration.integration?.tlsConfig?.insecureSkipVerification !==
                undefined) {
                if (integration.integration.tlsConfig.insecureSkipVerification === "true") {
                    integration.integration.tlsConfig.insecureSkipVerification = true;
                }
                else if (integration.integration.tlsConfig.insecureSkipVerification === "false") {
                    integration.integration.tlsConfig.insecureSkipVerification = false;
                }
            }
        }
    }
    return result;
};
exports.ensurePrimitiveTypes = ensurePrimitiveTypes;
exports.handler = async (event) => {
    switch (event.RequestType) {
        case "Create":
        case "Update":
            // Prepare the spec on create
            const outputLocation = await prepare((0, exports.ensurePrimitiveTypes)(event.ResourceProperties.options));
            return {
                PhysicalResourceId: outputLocation.key,
                Status: "SUCCESS",
                Data: {
                    outputSpecKey: outputLocation.key,
                },
            };
        case "Delete":
        // Nothing to do for delete
        default:
            break;
    }
    return {
        PhysicalResourceId: event.PhysicalResourceId,
        Status: "SUCCESS",
    };
};
//# sourceMappingURL=data:application/json;base64,