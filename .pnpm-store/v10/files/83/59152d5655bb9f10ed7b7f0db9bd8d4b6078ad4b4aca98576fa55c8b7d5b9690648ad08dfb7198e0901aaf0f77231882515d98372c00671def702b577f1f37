"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmithyServiceProjectDefinition = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const path = require("path");
const smithy_aws_pdk_prelude_1 = require("./components/smithy-aws-pdk-prelude");
const smithy_project_definition_1 = require("./smithy-project-definition");
const version_1 = require("./version");
/**
 * Creates a project which defines a Smithy service, and transforms the Smithy model to OpenAPI
 */
class SmithyServiceProjectDefinition extends smithy_project_definition_1.SmithyProjectDefinition {
    constructor(project, options) {
        const { smithyOptions } = options;
        const { namespace: serviceNamespace, serviceName } = options.smithyOptions.serviceName;
        super(project, {
            ...options,
            smithyBuildOptions: {
                ...smithyOptions.smithyBuildOptions,
                projections: {
                    // Add the openapi projection for generating the OpenAPI specification
                    openapi: {
                        ...smithyOptions.smithyBuildOptions?.projections?.openapi,
                        plugins: {
                            openapi: {
                                service: `${serviceNamespace}#${serviceName}`,
                                // By default, preserve tags in the generated spec, but allow users to explicitly overwrite this
                                tags: true,
                                // By default, use integer types as this is more intuitive when smithy distinguishes between Integers and Doubles.
                                // Users may also override this.
                                useIntegerType: true,
                                ...smithyOptions.smithyBuildOptions?.projections?.openapi
                                    ?.plugins?.openapi,
                            },
                        },
                    },
                },
            },
        });
        // Always add the following additional required dependencies
        const requiredDependencies = [
            "software.amazon.smithy:smithy-openapi",
            "software.amazon.smithy:smithy-aws-traits",
        ];
        // Ensure dependencies always include the required dependencies, allowing users to customise the version
        const userSpecifiedDependencies = smithyOptions.smithyBuildOptions?.maven?.dependencies ?? [];
        const userSpecifiedDependencySet = new Set(userSpecifiedDependencies.map((dep) => dep.split(":").slice(0, -1).join(":")));
        this.addDeps(...requiredDependencies
            .filter((requiredDep) => !userSpecifiedDependencySet.has(requiredDep))
            .map((dep) => `${dep}:${version_1.DEFAULT_SMITHY_VERSION}`), ...userSpecifiedDependencies);
        // Add the smithy prelude (managed by aws-pdk)
        this.generatedModelDir = path.join("generated", "main", "smithy");
        new smithy_aws_pdk_prelude_1.SmithyAwsPdkPrelude(project, {
            generatedModelDir: this.generatedModelDir,
            serviceNamespace,
            handlerLanguages: options.handlerLanguages,
        });
        this.addSources(this.generatedModelDir);
        const projectionOutputPath = path.join("build", "smithyprojections", this.gradleProjectName, "openapi");
        this.openApiSpecificationPath = path.join(projectionOutputPath, "openapi", `${serviceName}.openapi.json`);
        this.smithyJsonModelPath = path.join(projectionOutputPath, "model", "model.json");
    }
}
exports.SmithyServiceProjectDefinition = SmithyServiceProjectDefinition;
_a = JSII_RTTI_SYMBOL_1;
SmithyServiceProjectDefinition[_a] = { fqn: "@aws/pdk.type_safe_api.SmithyServiceProjectDefinition", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,