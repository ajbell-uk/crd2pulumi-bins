"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const auto_approve_1 = require("./auto-approve");
const github_1 = require("./github");
const stale_1 = require("./stale");
const clobber_1 = require("../clobber");
const gitpod_1 = require("../gitpod");
const project_1 = require("../project");
const readme_1 = require("../readme");
const util_1 = require("../util");
const vscode_1 = require("../vscode");
/**
 * GitHub-based project.
 *
 * @deprecated This is a *temporary* class. At the moment, our base project
 * types such as `NodeProject` and `JavaProject` are derived from this, but we
 * want to be able to use these project types outside of GitHub as well. One of
 * the next steps to address this is to abstract workflows so that different
 * "engines" can be used to implement our CI/CD solutions.
 */
class GitHubProject extends project_1.Project {
    constructor(options) {
        super(options);
        this.projectType = options.projectType ?? project_1.ProjectType.UNKNOWN;
        // we only allow these global services to be used in root projects
        const github = options.github ?? !this.parent;
        this.github = github
            ? new github_1.GitHub(this, {
                projenTokenSecret: options.projenTokenSecret,
                projenCredentials: options.projenCredentials,
                mergify: options.mergify,
                mergifyOptions: options.mergifyOptions,
                ...options.githubOptions,
            })
            : undefined;
        const vscode = options.vscode ?? !this.parent;
        this.vscode = vscode ? new vscode_1.VsCode(this) : undefined;
        this.gitpod = options.gitpod ? new gitpod_1.Gitpod(this) : undefined;
        this.devContainer = options.devContainer
            ? new vscode_1.DevContainer(this)
            : undefined;
        if (options.clobber ?? !this.parent) {
            new clobber_1.Clobber(this);
        }
        new readme_1.SampleReadme(this, options.readme);
        if (options.autoApproveOptions && this.github) {
            this.autoApprove = new auto_approve_1.AutoApprove(this.github, options.autoApproveOptions);
        }
        const stale = options.stale ?? false;
        if (stale && this.github) {
            new stale_1.Stale(this.github, options.staleOptions);
        }
    }
    /**
     * Marks the provided file(s) as being generated. This is achieved using the
     * github-linguist attributes. Generated files do not count against the
     * repository statistics and language breakdown.
     *
     * @param glob the glob pattern to match (could be a file path).
     *
     * @see https://github.com/github/linguist/blob/master/docs/overrides.md
     */
    annotateGenerated(glob) {
        this.gitattributes.addAttributes((0, util_1.normalizePersistedPath)(glob), "linguist-generated");
    }
}
exports.GitHubProject = GitHubProject;
_a = JSII_RTTI_SYMBOL_1;
GitHubProject[_a] = { fqn: "projen.github.GitHubProject", version: "0.95.4" };
//# sourceMappingURL=data:application/json;base64,