"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filters = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const constructs_1 = require("constructs");
const memoize = require("lodash.memoize"); // eslint-disable-line @typescript-eslint/no-require-imports
const types_1 = require("./types");
const utils_1 = require("./utils");
const core_1 = require("../core");
class Filters {
    /**
     * Verify that store is filterable, meaning it allows destructive mutations.
     * @throws Error if store is not filterable
     */
    static verifyFilterable(store) {
        if (!store.allowDestructiveMutations) {
            throw new Error("Store must allow destructive mutations to perform filtering; clone the store before applying filters using `store.clone(true)` operation and passing the cloned store to filtering operation.");
        }
    }
    /**
     * Prune **extraneous** nodes and edges
     * @throws Error if store is not filterable
     * @destructive
     */
    static pruneExtraneous() {
        return {
            filter: (store) => {
                Filters.verifyFilterable(store);
                const extraneousNodes = store.root.findAll({
                    order: constructs_1.ConstructOrder.POSTORDER,
                    predicate: { filter: (node) => node.isExtraneous },
                });
                // collapse all extraneous nodes to nearest non-extraneous parent, or prune the node
                for (const extraneousNode of extraneousNodes) {
                    const nonExtraneousAncestor = extraneousNode.findAncestor({
                        filter: (node) => !node.isExtraneous,
                    });
                    if (nonExtraneousAncestor &&
                        !nonExtraneousAncestor.isGraphContainer) {
                        extraneousNode.mutateCollapseTo(nonExtraneousAncestor);
                    }
                    else {
                        extraneousNode.mutateDestroy();
                    }
                }
                store.edges.forEach((edge) => {
                    if (edge.isExtraneous) {
                        edge.mutateDestroy();
                    }
                });
            },
        };
    }
    /**
     * Collapses all Cdk Owned containers, which more closely mirrors the application code
     * by removing resources that are automatically created by cdk.
     */
    static collapseCdkOwnedResources() {
        return {
            filter: (store) => {
                store.root
                    .findAll({
                    order: constructs_1.ConstructOrder.POSTORDER,
                    predicate: {
                        filter: (node) => core_1.Graph.ResourceNode.isResourceNode(node) && node.isCdkOwned,
                    },
                })
                    .forEach((node) => {
                    if (node.isDestroyed)
                        return;
                    node.mutateCollapse();
                });
            },
        };
    }
    /**
     * Collapses all Cdk Resource wrappers that wrap directly wrap a CfnResource.
     * Example, s3.Bucket wraps s3.CfnBucket.
     */
    static collapseCdkWrappers() {
        return {
            filter: (store) => {
                const cdkResources = store.root.findAll({
                    order: constructs_1.ConstructOrder.POSTORDER,
                    predicate: {
                        filter: (node) => core_1.Graph.ResourceNode.isResourceNode(node) && !node.isLeaf,
                    },
                });
                // collapse all cfnResource wrapped by cdk resource
                for (const cdkResource of cdkResources) {
                    if (cdkResource.isWrapper) {
                        cdkResource.mutateCollapse();
                    }
                }
            },
        };
    }
    /**
     * Collapses Custom Resource nodes to a single node.
     */
    static collapseCustomResources() {
        return {
            filter: (store) => {
                store.root
                    .findAll({
                    predicate: {
                        filter: (node) => {
                            return node.hasFlag(core_1.FlagEnum.CUSTOM_RESOURCE);
                        },
                    },
                })
                    .forEach((customResource) => {
                    if (customResource.isDestroyed)
                        return;
                    customResource.mutateCollapse();
                    // const REF_FQN = /^aws-cdk-lib\.aws-(iam|lambda)/
                    if (!customResource.hasFlag(core_1.FlagEnum.AWS_CUSTOM_RESOURCE) &&
                        !customResource.parent?.hasFlag(core_1.FlagEnum.AWS_CUSTOM_RESOURCE)) {
                        let crId = customResource.id;
                        if (crId !== "Provider" && crId.endsWith("Provider")) {
                            crId = crId.replace(/Provider$/, "");
                        }
                        // Try to find resources that are utilized only for the custom resource
                        (0, utils_1.findReferencesOfSubGraph)(customResource, 3, {
                            filter: (node) => {
                                return node.id.includes(crId);
                                // return false && /^aws-cdk-lib\.(aws_)?(iam|lambda)/.test(node.constructInfoFqn || "")
                            },
                        }).forEach((_ref) => _ref.mutateMove(customResource));
                        customResource.mutateCollapse();
                    }
                });
            },
        };
    }
    /**
     * Prune Custom Resource nodes.
     */
    static pruneCustomResources() {
        return {
            filter: (store) => {
                store.root
                    .findAll({
                    predicate: {
                        filter: (node) => {
                            return node.hasFlag(core_1.FlagEnum.CUSTOM_RESOURCE);
                        },
                    },
                })
                    .forEach((customResource) => {
                    if (customResource.isDestroyed)
                        return;
                    customResource.mutateDestroy();
                });
            },
        };
    }
    /**
     * Prune empty containers, which are non-resource default nodes without any children.
     *
     * Generally L3 constructs in which all children have already been pruned, which
     * would be useful as containers, but without children are considered extraneous.
     */
    static pruneEmptyContainers() {
        return {
            filter: (store) => {
                store.root
                    .findAll({
                    predicate: {
                        filter: (node) => {
                            if (node.nodeType !== core_1.NodeTypeEnum.DEFAULT)
                                return false;
                            if (!node.isLeaf)
                                return false;
                            if (node.cfnType)
                                return false;
                            if (node.constructInfoFqn?.startsWith("aws-cdk-lib."))
                                return false;
                            return true;
                        },
                    },
                })
                    .forEach((node) => {
                    if (node.isDestroyed)
                        return;
                    node.mutateDestroy();
                });
            },
        };
    }
    /**
     * Collapses extraneous nodes to parent and cdk created nodes on themselves,
     * and prunes extraneous edges.
     *
     * This most closely represents the developers code for the current application
     * and reduces the noise one expects.
     *
     * Invokes:
     * 1.
     * 1. pruneExtraneous()(store);
     * 1. collapseCdkOwnedResources()(store);
     * 1. collapseCdkWrappers()(store);
     * 1. collapseCustomResources()(store);
     * 1. ~pruneCustomResources()(store);~
     * 1. pruneEmptyContainers()(store);
     *
     * @throws Error if store is not filterable
     * @destructive
     */
    static compact() {
        return {
            filter: (store) => {
                Filters.verifyFilterable(store);
                Filters.pruneExtraneous().filter(store);
                Filters.collapseCdkOwnedResources().filter(store);
                Filters.collapseCdkWrappers().filter(store);
                Filters.collapseCustomResources().filter(store);
                // TODO: decide if we should prune custom resources in "compact"
                // pruneCustomResources()(store);
                Filters.pruneEmptyContainers().filter(store);
            },
        };
    }
    /**
     * @internal
     */
    static _filterNodeType(values, exclude) {
        const isMatch = memoize((input) => {
            if (input == null) {
                return false;
            }
            return (values.find((_value) => {
                if (_value.value) {
                    return input === _value.value;
                }
                else if (_value.regex) {
                    return new RegExp(_value.regex).test(input);
                }
                else {
                    return undefined;
                }
            }) != null);
        });
        return {
            filter: (store) => {
                for (const node of store.root.findAll({
                    order: constructs_1.ConstructOrder.POSTORDER,
                })) {
                    if (isMatch(node.nodeType) === exclude) {
                        if (node.isLeaf) {
                            node.mutateCollapseToParent();
                        }
                        else {
                            node.mutateUncluster();
                        }
                    }
                }
            },
        };
    }
    /**
     * Prune all {@link Graph.Node}s *except those matching* specified list.
     *
     * This filter targets all nodes (except root) - {@link IGraphFilter.allNodes}
     * @throws Error if store is not filterable
     * @destructive
     */
    static includeNodeType(nodeTypes) {
        return Filters._filterNodeType(nodeTypes, false);
    }
    /**
     * Prune all {@link Graph.Node}s *matching* specified list.
     *
     * This filter targets all nodes (except root) - {@link IGraphFilter.allNodes}
     * @throws Error if store is not filterable
     * @destructive
     */
    static excludeNodeType(nodeTypes) {
        return Filters._filterNodeType(nodeTypes, true);
    }
    /**
     * @internal
     */
    static _filterCfnType(values, exclude) {
        const isMatch = memoize((input) => {
            if (input == null) {
                return false;
            }
            return (values.find((_value) => {
                if (_value.value) {
                    return input === _value.value;
                }
                else if (_value.regex) {
                    return new RegExp(_value.regex).test(input);
                }
                else {
                    return undefined;
                }
            }) != null);
        });
        return {
            strategy: types_1.FilterStrategy.PRUNE,
            node: {
                filter: (node) => {
                    // Preserve container structure (stages, stacks, etc.)
                    if (node.isCluster || node.isGraphContainer)
                        return true;
                    if (core_1.Graph.isResourceLike(node)) {
                        const match = !!node.cfnType && isMatch(node.cfnType);
                        return (match && !exclude) || (!match && exclude);
                    }
                    // Preserve non *Resource nodes
                    return true;
                },
            },
        };
    }
    /**
     * Prune all {@link Graph.ResourceNode} and {@link Graph.CfnResourceNode} nodes
     * *except those matching* specified list of CloudFormation types.
     * @throws Error if store is not filterable
     * @destructive
     */
    static includeCfnType(cfnTypes) {
        return Filters._filterCfnType(cfnTypes, false);
    }
    /**
     * Prune all {@link Graph.ResourceNode} and {@link Graph.CfnResourceNode} nodes
     * *matching* specified list of CloudFormation types.
     * @throws Error if store is not filterable
     * @destructive
     */
    static excludeCfnType(cfnTypes) {
        return Filters._filterCfnType(cfnTypes, true);
    }
    /**
     * Remove clusters by hoisting their children to the parent of the cluster
     * and collapsing the cluster itself to its parent.
     * @param clusterTypes
     * @throws Error if store is not filterable
     * @see {@link Graph.Node.mutateUncluster}
     * @destructive
     */
    static uncluster(clusterTypes) {
        // Use set for constant lookup
        const clusterTypesSet = new Set(clusterTypes);
        return {
            filter: (store) => {
                Filters.verifyFilterable(store);
                const clusters = store.root.findAll({
                    predicate: {
                        filter: (node) => {
                            if (node.isGraphContainer)
                                return false;
                            if (clusterTypesSet.size === 0)
                                return node.isCluster;
                            return clusterTypesSet.has(node.nodeType);
                        },
                    },
                });
                for (const cluster of clusters) {
                    cluster.mutateUncluster();
                }
            },
        };
    }
}
exports.Filters = Filters;
_a = JSII_RTTI_SYMBOL_1;
Filters[_a] = { fqn: "@aws/pdk.cdk_graph.Filters", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,