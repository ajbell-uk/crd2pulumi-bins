"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractWebSocketSchemas = exports.extractWebSocketSchema = void 0;
const constants_1 = require("./constants");
const prepare_spec_1 = require("./prepare-spec");
const _get = (object, paths) => {
    if (typeof object === "undefined") {
        return undefined;
    }
    if (paths.length === 0) {
        return object;
    }
    return _get(object[paths[0]], paths.slice(1));
};
/**
 * Return whether or not the given OpenAPI object is a reference
 */
const isRef = (obj) => !!obj && typeof obj === "object" && "$ref" in obj;
/**
 * Return whether a given OpenAPI object is a schema object
 */
const isSchemaObj = (obj) => !!obj &&
    typeof obj === "object" &&
    ("type" in obj ||
        "allOf" in obj ||
        "oneOf" in obj ||
        "anyOf" in obj ||
        "not" in obj);
/**
 * Split a reference into its component parts
 * eg: #/components/schemas/Foo -> ["components", "schemas", "Foo"]
 */
const splitRef = (ref) => ref
    .slice(2)
    .split("/")
    .map((p) => p.replace(/~0/g, "~").replace(/~1/g, "/"));
/**
 * Resolve the given reference in the spec
 */
const resolveRef = (spec, ref) => {
    const refParts = splitRef(ref);
    const resolved = _get(spec, refParts);
    if (!resolved) {
        throw new Error(`Unable to resolve ref ${ref} in spec`);
    }
    return resolved;
};
/**
 * Get the id of a reference to be used in the "definitions" section
 */
const getRefId = (ref) => splitRef(ref).join("_");
/**
 * Rewrite a reference to an API gateway model supported format
 * eg #/components/schemas/Foo -> #/definitions/components_schemas_Foo
 */
const rewriteRef = (ref) => `#/definitions/${getRefId(ref)}`;
/**
 * Map the given function over all refs in an OpenAPI object
 */
const mapRefs = (obj, fn) => {
    // Use JSON.stringify's replacement function to simplify traversing a spec
    return JSON.parse(JSON.stringify(obj, (key, value) => {
        if (key === "$ref") {
            return fn(value);
        }
        return value;
    }));
};
/**
 * Find all references recursively starting at the given schema
 */
const findAllReferences = (schema, spec, seenRefs = new Set()) => {
    const newRefs = new Set();
    mapRefs(schema, (ref) => newRefs.add(ref));
    const refsToSearch = [...newRefs].filter((ref) => !seenRefs.has(ref));
    const newSeenRefs = new Set([...newRefs, ...seenRefs]);
    return new Set([
        ...newSeenRefs,
        ...refsToSearch.flatMap((ref) => [
            ...findAllReferences(resolveRef(spec, ref), spec, newSeenRefs),
        ]),
    ]);
};
/**
 * Rewrite all references in the schema to instead reference #/definitions/xxx, and collect any other schemas recursively referenced by the schema
 *
 * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings-models.html#api-gateway-request-validation-model-more-complex
 */
const rewriteSchemaReferences = (schema, spec) => {
    // Rewrite the schema and spec, replacing references with #/definitions/xxx as per the API Gateway model format
    const rewrittenSchema = mapRefs(schema, rewriteRef);
    const rewrittenSpec = mapRefs(spec, rewriteRef);
    // Set of definitions that must be included for the given schema
    const definitions = {};
    // Find all recursive references from the schema, and add their (rewritten) schema to definitions
    [...findAllReferences(schema, spec)].forEach((ref) => {
        definitions[getRefId(ref)] = resolveRef(rewrittenSpec, ref);
    });
    return { schema: rewrittenSchema, definitions };
};
const extractWebSocketSchema = (operationId, requestBody, spec) => {
    // Resolve the body reference, if any
    const body = isRef(requestBody)
        ? resolveRef(spec, requestBody.$ref)
        : requestBody;
    const candidateSchema = body?.content?.["application/json"]?.schema;
    if (!candidateSchema) {
        // No schema found
        return undefined;
    }
    // Resolve the top level schema reference, if any
    const rawSchema = isRef(candidateSchema)
        ? resolveRef(spec, candidateSchema.$ref)
        : candidateSchema;
    if (!isSchemaObj(rawSchema)) {
        throw new Error(`Invalid OpenAPI specification: request body for operation ${operationId} is not a valid schema`);
    }
    // Rewrite schema references to a format accepted by API Gateway
    return rewriteSchemaReferences(rawSchema, spec);
};
exports.extractWebSocketSchema = extractWebSocketSchema;
const extractWebSocketSchemas = (operationIds, serverOperationPaths, spec) => {
    const schemasByOperationId = {};
    for (const operationId of operationIds) {
        const path = serverOperationPaths[operationId];
        const pathItem = spec.paths[path];
        (0, prepare_spec_1.validatePathItem)(path, pathItem);
        // Exactly 1 operation must be defined for each path in a websocket OpenAPI spec
        const operations = Object.values(constants_1.HttpMethods).flatMap((method) => pathItem[method] ? [{ ...pathItem[method], method }] : []);
        if (operations.length !== 1) {
            throw new Error(`Each path must have a single method for websocket apis. Found ${operations.map((o) => o.method).join(", ") || "no methods"}`);
        }
        // Extract the schema for the websocket input validation model
        if (operations[0]?.requestBody) {
            const schema = (0, exports.extractWebSocketSchema)(operationId, operations[0].requestBody, spec);
            if (schema) {
                schemasByOperationId[operationId] = schema;
            }
        }
    }
    return schemasByOperationId;
};
exports.extractWebSocketSchemas = extractWebSocketSchemas;
//# sourceMappingURL=data:application/json;base64,