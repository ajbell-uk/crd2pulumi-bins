"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSecuritySchemes = exports.getAllAuthorizers = exports.serializeAsAuthorizerReference = void 0;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const utils_1 = require("./utils");
const authorizers_1 = require("../authorizers");
const predicates_1 = require("../authorizers/predicates");
const constants_1 = require("../prepare-spec-event-handler/constants");
// Regex to match against a single header identity source
const SINGLE_HEADER_IDENTITY_SOURCE_REGEX = /^method.request.header.(?<header>[^\.\s,]+)$/;
/**
 * Build a serialized reference to an authorizer for use in an api method
 * @param authorizer the author to serialize
 */
const serializeAsAuthorizerReference = (authorizer) => authorizer
    ? {
        authorizerId: authorizer.authorizerId,
        authorizationScopes: authorizer.authorizationScopes,
    }
    : undefined;
exports.serializeAsAuthorizerReference = serializeAsAuthorizerReference;
/**
 * Create an OpenAPI security scheme definition for an iam authorizer
 * @see https://docs.amazonaws.cn/en_us/apigateway/latest/developerguide/api-gateway-swagger-extensions-authtype.html
 */
const iamSecurityScheme = () => ({
    type: "apiKey",
    name: "Authorization",
    in: "header",
    "x-amazon-apigateway-authtype": "awsSigv4",
});
/**
 * Create an API key security scheme
 * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-key-source.html
 */
const apiKeySecurityScheme = () => ({
    type: "apiKey",
    // Header must be x-api-key for API Gateway
    // See: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-key-source.html
    name: "x-api-key",
    in: "header",
});
/**
 * Create an OpenAPI security scheme definition for a cognito authorizer
 * @param authorizer cognito authorizer
 */
const cognitoSecurityScheme = (authorizer) => ({
    type: "apiKey",
    name: "Authorization",
    in: "header",
    "x-amazon-apigateway-authtype": authorizer.authorizationType,
    "x-amazon-apigateway-authorizer": {
        type: aws_apigateway_1.AuthorizationType.COGNITO,
        providerARNs: authorizer.userPools.map((pool) => pool.userPoolArn),
    },
});
/**
 * Create an OpenAPI security scheme definition for a custom authorizer
 * @param scope the scope in which the api construct is defined
 * @param authorizer custom authorizer
 */
const customSecurityScheme = (_scope, authorizer) => {
    const singleHeaderMatch = authorizer.identitySource.match(SINGLE_HEADER_IDENTITY_SOURCE_REGEX);
    const singleHeader = singleHeaderMatch
        ? singleHeaderMatch.groups.header
        : undefined;
    // Token type must use a single header
    if (!singleHeader && authorizer.type === authorizers_1.CustomAuthorizerType.TOKEN) {
        throw new Error(`identitySource must be a single header for a ${authorizers_1.CustomAuthorizerType.TOKEN} authorizer, eg method.request.header.Authorization`);
    }
    return {
        type: "apiKey",
        in: "header",
        // When the identity source is not a single header, the value must be "Unused"
        // https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-authorizer.html
        name: singleHeader ? singleHeader : "Unused",
        "x-amazon-apigateway-authtype": authorizer.authorizationType,
        "x-amazon-apigateway-authorizer": {
            type: authorizer.type,
            authorizerUri: (0, utils_1.functionInvocationUri)(authorizer.function),
            authorizerResultTtlInSeconds: authorizer.authorizerResultTtlInSeconds,
            identitySource: authorizer.identitySource,
        },
    };
};
/**
 * Return a list of all unique authorizers used in the api
 */
const getAllAuthorizers = (integrations, defaultAuthorizer) => Object.values(Object.fromEntries([
    ...(defaultAuthorizer ? [defaultAuthorizer] : []),
    ...Object.values(integrations).flatMap(({ authorizer }) => authorizer ? [authorizer] : []),
].map((a) => [a.authorizerId, a])));
exports.getAllAuthorizers = getAllAuthorizers;
/**
 * Generate the security schemes section of an OpenAPI specification
 */
const prepareSecuritySchemes = (scope, integrations, defaultAuthorizer, apiKeyOptions) => {
    // All the defined authorizers
    const allAuthorizers = (0, exports.getAllAuthorizers)(integrations, defaultAuthorizer);
    // Cognito, IAM and custom authorizers must be declared in security schemes
    return {
        ...Object.fromEntries(allAuthorizers
            .filter((authorizer) => (0, predicates_1.isCognitoAuthorizer)(authorizer))
            .map((authorizer) => [
            authorizer.authorizerId,
            cognitoSecurityScheme(authorizer),
        ])),
        ...Object.fromEntries(allAuthorizers
            .filter((authorizer) => (0, predicates_1.isCustomAuthorizer)(authorizer))
            .map((authorizer) => [
            authorizer.authorizerId,
            customSecurityScheme(scope, authorizer),
        ])),
        ...Object.fromEntries(allAuthorizers
            .filter((authorizer) => (0, predicates_1.isIamAuthorizer)(authorizer))
            .map((authorizer) => [authorizer.authorizerId, iamSecurityScheme()])),
        // A security scheme must be defined if the api key is in the header
        ...(apiKeyOptions?.source === aws_apigateway_1.ApiKeySourceType.HEADER
            ? {
                [constants_1.DefaultAuthorizerIds.API_KEY]: apiKeySecurityScheme(),
            }
            : {}),
    };
};
exports.prepareSecuritySchemes = prepareSecuritySchemes;
//# sourceMappingURL=data:application/json;base64,