"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NxWorkspace = exports.NX_DEFAULT_BUILD_OUTPUTS = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const projen_1 = require("projen");
const utils_1 = require("../utils");
const common_1 = require("../utils/common");
const ALWAYS_IGNORE = [".tmp", ".env", ".pytest_cache"];
/** Default NX outputs to cache */
exports.NX_DEFAULT_BUILD_OUTPUTS = [
    "{projectRoot}/dist",
    "{projectRoot}/lib",
    "{projectRoot}/build",
    "{projectRoot}/coverage",
    "{projectRoot}/test-reports",
    "{projectRoot}/target",
    "{projectRoot}/cdk.out",
    "{projectRoot}/LICENSE_THIRD_PARTY",
    "{projectRoot}/.jsii",
];
/**
 * Component which manages the workspace specific NX Config for the root monorepo.
 * @experimental
 */
class NxWorkspace extends projen_1.Component {
    /**
     * Retrieves the singleton instance associated with project root.
     *
     * @param scope project instance.
     */
    static of(scope) {
        return scope.root.components.find((c) => utils_1.ProjectUtils.isNamedInstanceOf(c, NxWorkspace));
    }
    constructor(project) {
        // Make sure only being added to the root project.
        if (project.root !== project) {
            throw new Error("NxJson can only be added to the root project");
        }
        // Make sure we only ever have 1 instance of NxJson component per project
        if (NxWorkspace.of(project)) {
            throw new Error(`Project ${project.name} already has associated NxJson component.`);
        }
        if (project.tryFindObjectFile("nx.json")) {
            throw new Error(`Project ${project.name} already has "nx.json" file defined.`);
        }
        super(project);
        /**
         * Automatically infer NxProject targets based on project type.
         * @experimental
         */
        this.autoInferProjectTargets = false;
        /**
         * Indicates if non-native nx hasher will be used.
         *
         * If true, the NX_NON_NATIVE_HASHER env var will be set
         * to true for all project tasks.
         */
        this.nonNativeHasher = false;
        /**
         * List of cacheable operations.
         */
        this.cacheableOperations = ["build", "test"];
        /**
         * Some presets use the extends property to hide some default options in a separate json file.
         * The json file specified in the extends property is located in your node_modules folder.
         * The Nx preset files are specified in the nx package.
         *
         * @default "nx/presets/npm.json"
         */
        this.extends = "nx/presets/npm.json";
        /**
         * Tells Nx what prefix to use when generating library imports.
         */
        this.npmScope = "monorepo";
        /**
         * Plugins for extending the project graph
         */
        this.plugins = [];
        /**
         * Configuration for Nx Plugins
         */
        this.pluginsConfig = {};
        /**
         * Default options for `nx affected`
         */
        this.affected = {
            defaultBase: "mainline",
        };
        /**
         * Named inputs
         * @see https://nx.dev/reference/nx-json#inputs-&-namedinputs
         */
        this.namedInputs = {
            // https://nx.dev/more-concepts/customizing-inputs#defaults
            default: ["{projectRoot}/**/*"],
        };
        /**
         * Dependencies between different target names across all projects
         *
         * @see https://nx.dev/reference/nx-json#target-defaults
         */
        this.targetDefaults = {
            build: {
                inputs: ["default", "^default"],
                outputs: exports.NX_DEFAULT_BUILD_OUTPUTS,
                dependsOn: ["^build"],
            },
        };
        /**
         * Default task runner
         */
        this.defaultTaskRunner = "nx/tasks-runners/default";
        /**
         * Default task runner options
         */
        this.defaultTaskRunnerOptions = {
            useDaemonProcess: false,
            cacheableOperations: () => this.cacheableOperations,
            cacheDirectory: () => this.cacheDirectory,
        };
        /**
         * Task runner options.
         */
        this.tasksRunnerOptions = {
            default: {
                runner: () => this.defaultTaskRunner,
                options: () => this.defaultTaskRunnerOptions,
            },
        };
        this.nxJson = new projen_1.JsonFile(project, "nx.json", {
            obj: {
                extends: () => this.extends,
                npmScope: () => this.npmScope,
                affected: () => (0, common_1.asUndefinedIfEmpty)(this.affected),
                workspaceLayout: () => (0, common_1.asUndefinedIfEmpty)(this.workspaceLayout),
                plugins: () => (0, common_1.asUndefinedIfEmpty)(this.plugins),
                pluginsConfig: () => (0, common_1.asUndefinedIfEmpty)(this.pluginsConfig),
                namedInputs: () => (0, common_1.asUndefinedIfEmpty)(this.namedInputs),
                targetDefaults: () => (0, common_1.asUndefinedIfEmpty)(this.targetDefaults),
                tasksRunnerOptions: () => (0, common_1.asUndefinedIfEmpty)(this.tasksRunnerOptions),
            },
        });
        this.nxIgnore = new projen_1.IgnoreFile(project, ".nxignore");
        this.nxIgnore.addPatterns(...ALWAYS_IGNORE);
    }
    /**
     * Setup workspace to use nx-cloud
     * @param readOnlyAccessToken
     */
    useNxCloud(readOnlyAccessToken) {
        this.defaultTaskRunner = "nx-cloud";
        this.defaultTaskRunnerOptions.accessToken = readOnlyAccessToken;
        if (this.project.deps.all.find((dep) => dep.type === projen_1.DependencyType.BUILD && dep.name === "nx-cloud") == null) {
            this.project.deps.addDependency("nx-cloud", projen_1.DependencyType.BUILD);
        }
    }
    /**
     * Set `namedInput` value helper
     */
    setNamedInput(name, inputs) {
        this.namedInputs[name] = inputs;
    }
    /** Set `targetDefaults` helper */
    setTargetDefault(name, target, merge = false) {
        this.targetDefaults[name] = (0, common_1.deepMerge)([merge ? this.targetDefaults[name] || {} : {}, target], { append: true });
    }
    /** @internal */
    _recursivelyApplyToProject(project, fn) {
        fn(project);
        project.subprojects.forEach(fn);
    }
    /** @internal */
    _applyNonNativeHasher(project) {
        project.tasks.addEnvironment("NX_NON_NATIVE_HASHER", "true");
    }
    /** @internal */
    _applyCacheDirectory(project) {
        this.cacheDirectory &&
            project.tasks.addEnvironment("NX_CACHE_DIRECTORY", this.cacheDirectory);
    }
    /** @inheritdoc */
    preSynthesize() {
        super.preSynthesize();
        if (this.cacheDirectory) {
            this.project.logger.warn("[NxWorkspace] Overriding nx cacheDirectory is experimental and may cause `Could not find 'nx' module in this workspace.` issue. \nIf you experience this issue, please remove cacheDirectory override. \nhttps://github.com/nrwl/nx/issues/8929");
            this.project.addGitIgnore(this.cacheDirectory);
            // https://github.com/nrwl/nx/issues/8929
            // For cacheDirectory override to propagate during initialization we need to set as env var
            this._recursivelyApplyToProject(this.project, this._applyCacheDirectory.bind(this));
        }
        if (this.nonNativeHasher) {
            this._recursivelyApplyToProject(this.project, this._applyNonNativeHasher.bind(this));
        }
    }
    /** @inheritdoc */
    synthesize() {
        super.synthesize();
    }
}
exports.NxWorkspace = NxWorkspace;
_a = JSII_RTTI_SYMBOL_1;
NxWorkspace[_a] = { fqn: "@aws/pdk.monorepo.NxWorkspace", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,