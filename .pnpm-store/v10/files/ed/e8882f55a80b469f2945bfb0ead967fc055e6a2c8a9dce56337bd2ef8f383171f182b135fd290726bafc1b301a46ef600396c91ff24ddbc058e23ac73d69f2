"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCfnType = parseCfnType;
exports.findCfnTypeAssets = findCfnTypeAssets;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const assets_1 = require("../../generated/assets");
const utils_1 = require("../../utils");
const helpers_1 = require("../resources/helpers");
const helpers_2 = require("../services/helpers");
/** Parse CloudFormation resource type string into parts */
function parseCfnType(cfnType) {
    return cfnType.match(/(?<provider>\w+)::(?<serviceName>\w+)::(?<resourceName>\w+)/).groups;
}
// VPC is nested in EC2 within CloudFormation but separate in other systems
const VpcAssetComparables = Object.fromEntries(Object.keys(assets_1.AwsAsset.Resources).reduce((entries, key) => {
    if (key.startsWith("vpc_")) {
        entries.push([(0, utils_1.normalizeComparisonString)(key.replace("vpc_", "")), key]);
    }
    return entries;
}, []));
/** Find asset type details for given CloudFormation type */
function findCfnTypeAssets(cfnType) {
    const cfn = parseCfnType(cfnType);
    let serviceName;
    let resourceName;
    // handle edge cases (eg: EC2::VPCxxx is vpc:xxx in assets)
    if (cfn.serviceName === "EC2") {
        if (cfn.resourceName.startsWith("VPC")) {
            serviceName = "vpc";
            cfn.resourceName = cfn.resourceName.replace(/^VPC/, "");
        }
        else if ((0, utils_1.normalizeComparisonString)(cfn.resourceName) in VpcAssetComparables) {
            serviceName = "vpc";
            cfn.resourceName = (0, utils_1.normalizeComparisonString)(cfn.resourceName);
        }
    }
    if (serviceName == null) {
        try {
            serviceName = (0, helpers_2.resolveServiceName)(cfn.serviceName);
        }
        catch (e) {
            console.warn(e.message, cfnType);
        }
    }
    if (resourceName == null) {
        // There are lots of low-level cfn resource definitions without mappings to other systems,
        // for this reason we just ignore unresolved resources without spamming the console or
        // bubbling the error as this is expected in large percent of cases.
        try {
            resourceName = (0, helpers_1.resolveResourceName)(cfn.resourceName, serviceName);
        }
        catch { }
    }
    const generalIcon = resolveGeneralIcon(cfn.resourceName);
    return {
        serviceName,
        resourceName,
        generalIcon,
    };
}
/** Resolve general icon for a given value.  */
function resolveGeneralIcon(value) {
    value = (0, utils_1.normalizeComparisonString)(value);
    if (value.match(/(configuration|config|setting)$/i)) {
        return "config";
    }
    if (value.match(/^(client)?(certificate)$/i)) {
        return "ssl_padlock";
    }
    if (value.match(/(user)$/i)) {
        return "user";
    }
    if (value.match(/(policy|permissions?)$/i)) {
        return "policy";
    }
    if (value.match(/(key)$/i)) {
        return "key";
    }
    if (value.match(/(role)$/i)) {
        return "role";
    }
    if (value.match(/(server)$/i)) {
        return "traditional_server";
    }
    if (value.match(/(database)$/i)) {
        return "generic_database";
    }
    if (value.match(/(log)s?$/i)) {
        return "logs";
    }
    if (value.match(/(alarm|alert)s?$/i)) {
        return "alarm";
    }
    if (value.match(/(event)s?$/i)) {
        return "event";
    }
    if (value.match(/(rule)s?$/i)) {
        return "rule";
    }
    if (value.match(/(branch)$/i)) {
        return "git_repository";
    }
    if (value.match(/^(app|application)$/i)) {
        return "generic_application";
    }
    if (value.match(/^(documentation)/i)) {
        return "document";
    }
    if (value.match(/^(model)$/i)) {
        return "document";
    }
    if (value.match(/(template)/i)) {
        return "template";
    }
    if (value.match(/(attachment)$/i)) {
        return "attachment";
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,