"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptTranspile = void 0;
const reflect = __importStar(require("jsii-reflect"));
const transpile = __importStar(require("./transpile"));
const schema_1 = require("../schema");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const Case = require('case');
// Helpers
const toCamelCase = (text) => {
    return Case.camel(text !== null && text !== void 0 ? text : '');
};
const formatArguments = (inputs) => {
    return inputs.join(', ');
};
const formatStructInitialization = (type) => {
    const target = type.submodule ? `${type.namespace}.${type.name}` : type.name;
    return `const ${toCamelCase(type.name)}: ${target} = { ... }`;
};
const formatClassInitialization = (type, inputs) => {
    const target = type.submodule ? `${type.namespace}.${type.name}` : type.name;
    return `new ${target}(${formatArguments(inputs)})`;
};
const formatInvocation = (type, inputs, method) => {
    let target = type.submodule ? `${type.namespace}.${type.name}` : type.name;
    if (method) {
        target = `${target}.${method}`;
    }
    return `${target}(${formatArguments(inputs)})`;
};
const formatImport = (type) => {
    if (type.submodule) {
        return `import { ${type.submodule} } from '${type.module}'`;
    }
    else {
        return `import { ${type.name} } from '${type.module}'`;
    }
};
const formatSignature = (name, inputs, returns) => {
    return `public ${name}(${formatArguments(inputs)})${returns ? ': ' + returns : ''}`;
};
/**
 * A TypeScript transpiler.
 */
class TypeScriptTranspile extends transpile.TranspileBase {
    constructor() {
        super(transpile.Language.TYPESCRIPT);
    }
    readme(readme) {
        return readme;
    }
    unionOf(types) {
        return `${types.join(' | ')}`;
    }
    listOf(type) {
        return `${type}[]`;
    }
    variadicOf(type) {
        return `...${this.listOf(type)}`;
    }
    mapOf(type) {
        return `{[ key: string ]: ${type}}`;
    }
    any() {
        return 'any';
    }
    void() {
        return 'void';
    }
    boolean() {
        return 'boolean';
    }
    str() {
        return 'string';
    }
    number() {
        return 'number';
    }
    date() {
        return 'Date';
    }
    json() {
        return 'object';
    }
    enum(enu) {
        return {
            fqn: this.type(enu).fqn,
            name: enu.name,
        };
    }
    enumMember(em) {
        return {
            fqn: `${this.enum(em.enumType).fqn}.${em.name}`,
            name: em.name,
        };
    }
    property(property) {
        const typeRef = this.typeReference(property.type);
        return {
            name: property.name,
            parentType: this.type(property.parentType),
            typeReference: typeRef,
            optional: property.optional,
            declaration: this.formatProperty(property.name, typeRef),
        };
    }
    class(klass) {
        return {
            name: klass.name,
            type: this.type(klass),
        };
    }
    parameter(parameter) {
        const typeRef = this.typeReference(parameter.type);
        return {
            name: parameter.name,
            parentType: this.type(parameter.parentType),
            typeReference: typeRef,
            optional: parameter.optional,
            variadic: parameter.variadic,
            declaration: this.formatProperty(parameter.name, typeRef),
        };
    }
    struct(struct) {
        const type = this.type(struct);
        return {
            type: type,
            name: struct.name,
            import: formatImport(type),
            initialization: formatStructInitialization(type),
        };
    }
    callable(callable) {
        const type = this.type(callable.parentType);
        const parameters = callable.parameters.sort(this.optionalityCompare);
        const name = callable.name;
        const inputs = parameters.map((p) => this.formatParameters(this.parameter(p)));
        const invocation = reflect.Initializer.isInitializer(callable)
            ? formatClassInitialization(type, inputs)
            : formatInvocation(type, inputs, name);
        let returnType;
        if (reflect.Initializer.isInitializer(callable)) {
            returnType = this.typeReference(callable.parentType.reference);
        }
        else if (reflect.Method.isMethod(callable)) {
            returnType = this.typeReference(callable.returns.type);
        }
        const returns = returnType === null || returnType === void 0 ? void 0 : returnType.toString({
            typeFormatter: (t) => t.name,
        });
        return {
            name,
            parentType: type,
            import: formatImport(type),
            parameters,
            signatures: [formatSignature(name, inputs, returns)],
            invocations: [invocation],
            returnType,
        };
    }
    interface(iface) {
        return {
            name: iface.name,
            type: this.type(iface),
        };
    }
    type(type) {
        const submodule = this.findSubmodule(type);
        const moduleLike = this.moduleLike(submodule ? submodule : type.assembly);
        const fqn = [moduleLike.name];
        if (type.namespace) {
            fqn.push(type.namespace);
        }
        fqn.push(type.name);
        return new transpile.TranspiledType({
            fqn: fqn.join('.'),
            name: type.name,
            namespace: type.namespace,
            module: moduleLike.name,
            submodule: moduleLike.submodule,
            submodulePath: (0, schema_1.submodulePath)(submodule),
            source: type,
            language: this.language,
        });
    }
    moduleLike(moduleLike) {
        if (moduleLike instanceof reflect.Submodule) {
            const fqnParts = moduleLike.fqn.split('.');
            return { name: fqnParts[0], submodule: fqnParts[1] };
        }
        return { name: moduleLike.fqn };
    }
    formatParameters(transpiled) {
        const tf = transpiled.typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        if (transpiled.variadic) {
            return `${transpiled.name}: ${this.variadicOf(tf)}`;
        }
        return `${transpiled.name}${transpiled.optional ? '?' : ''}: ${tf}`;
    }
    formatProperty(name, typeReference) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return `public readonly ${name}: ${tf};`;
    }
}
exports.TypeScriptTranspile = TypeScriptTranspile;
//# sourceMappingURL=data:application/json;base64,