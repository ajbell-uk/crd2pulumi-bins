"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDiagram = buildDiagram;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const aws_arch_1 = require("../../../aws-arch");
const cdk_graph_1 = require("../../../cdk-graph");
const uniqBy = require("lodash.uniqby"); // eslint-disable-line @typescript-eslint/no-require-imports
const Diagram = require("./entities");
const entities_1 = require("./entities");
const theme_1 = require("./theme");
const debug_1 = require("../debug");
/**
 * EdgeResolver class resolves edges within a diagram for rendering
 * @internal
 */
class EdgeResolver {
    constructor() {
        /** @internal */
        this._edges = new Map();
    }
    /** Adds diagram edge to the resolver to be resolved */
    trackEdge(edge) {
        let fromId;
        let toId;
        if (edge instanceof Diagram.Edge) {
            fromId = edge.graphEdge.source.uuid;
            toId = edge.graphEdge.target.uuid;
        }
        else {
            fromId = edge.from.graphNode.uuid;
            toId = edge.to.graphNode.uuid;
        }
        const key = fromId < toId ? `${fromId}:${toId}` : `${toId}:${fromId}`;
        const edgeSet = this._edges.get(key) || [];
        this._edges.set(key, edgeSet.concat([edge]));
    }
    /** Resolve all edges based on diagram options */
    resolveEdges(options) {
        const compact = options.preset === cdk_graph_1.FilterPreset.COMPACT;
        const resolvedEdges = [];
        for (let edges of this._edges.values()) {
            if (compact) {
                edges = edges.filter((edge) => !edge.isVerbose);
            }
            if (edges.length === 0) {
                continue;
            }
            edges.sort((a, b) => {
                const _a = getEdgeRank(a);
                const _b = getEdgeRank(b);
                if (_a === _b)
                    return 0;
                if (_a < _b)
                    return -1;
                return 1;
            });
            edges = uniqBy(edges, getEdgeRank);
            // only return highest ranked edge unless verbose
            if (compact) {
                resolvedEdges.push(edges[0]);
                continue;
            }
            for (const _edge1 of edges) {
                for (const _edge2 of edges) {
                    if (_edge1 === _edge2)
                        continue;
                    const _id1 = _edge1.attributes.get("id");
                    const _id2 = _edge2.attributes.get("id");
                    let _sameHead1 = _edge1.attributes.get("samehead");
                    _edge1.attributes.set("samehead", !_sameHead1 ? _id2 : `${_sameHead1},${_id2}`);
                    let _sameTail1 = _edge1.attributes.get("sametail");
                    _edge1.attributes.set("sametail", !_sameTail1 ? _id2 : `${_sameTail1},${_id2}`);
                    let _sameHead2 = _edge2.attributes.get("samehead");
                    _edge2.attributes.set("samehead", !_sameHead2 ? _id1 : `${_sameHead2},${_id1}`);
                    let _sameTail2 = _edge2.attributes.get("sametail");
                    _edge2.attributes.set("sametail", !_sameTail2 ? _id1 : `${_sameTail2},${_id1}`);
                }
            }
            resolvedEdges.push(...edges);
        }
        return resolvedEdges;
    }
}
/**
 * Build a {@link Diagram.Diagram Diagram} for a given {@link Graph.Store} based on {@link DiagramOptions Options}
 * @internal
 */
function buildDiagram(store, options) {
    const { title, nodePositions } = options;
    const edgeResolve = new EdgeResolver();
    theme_1.GraphTheme.init(options.theme);
    const entities = new Map();
    const diagram = new Diagram.Diagram(title, aws_arch_1.AwsArchitecture.assetDirectory);
    function visit(gNode, parent) {
        if (gNode.isDestroyed)
            return;
        let entity;
        switch (gNode.nodeType) {
            case cdk_graph_1.NodeTypeEnum.RESOURCE: {
                entity = new Diagram.ResourceNode(gNode);
                break;
            }
            case cdk_graph_1.NodeTypeEnum.CFN_RESOURCE: {
                entity = new Diagram.CfnResourceNode(gNode);
                break;
            }
            case cdk_graph_1.NodeTypeEnum.NESTED_STACK: {
                entity = new Diagram.NestedStackCluster(gNode);
                break;
            }
            case cdk_graph_1.NodeTypeEnum.STACK: {
                if (theme_1.GraphTheme.instance.rendering.stack &&
                    new RegExp(theme_1.GraphTheme.instance.rendering.stack).test(gNode.id) ===
                        false) {
                    // Ignore non-matching root stacks
                    return;
                }
                entity = new Diagram.StackCluster(gNode);
                break;
            }
            default: {
                if (gNode.isLeaf) {
                    if (gNode.hasFlag(cdk_graph_1.FlagEnum.CUSTOM_RESOURCE)) {
                        entity = new Diagram.CustomResourceNode(gNode);
                    }
                    else {
                        entity = new Diagram.Node(gNode);
                    }
                }
                else {
                    entity = new Diagram.Cluster(gNode);
                    gNode.addFlag(cdk_graph_1.FlagEnum.CLUSTER);
                }
                break;
            }
        }
        if (nodePositions && entity instanceof Diagram.Node) {
            if (entity.graphNode.id in nodePositions) {
                entity.position = nodePositions[entity.graphNode.id];
            }
        }
        if (entity instanceof entities_1.ImageNode && entity.image) {
            diagram.trackImage(entity.image);
        }
        if (parent instanceof Diagram.Container && parent.linkChildren) {
            edgeResolve.trackEdge(new entities_1.ChildLink(parent, entity));
        }
        if (gNode.isLeaf) {
            entities.set(gNode.uuid, entity);
            parent.addNode(entity);
        }
        else {
            if (entity instanceof Diagram.Node) {
                entity = asContainer(entity);
            }
            parent.addSubgraph(entity);
            entities.set(gNode.uuid, entity);
            gNode.children.forEach((child) => visit(child, entity));
        }
    }
    if (store.stages.length > 1) {
        const stageRendering = theme_1.GraphTheme.instance.rendering.stage || "last";
        let stages;
        switch (stageRendering) {
            case "all": {
                stages = store.stages;
                break;
            }
            case "first": {
                stages = store.stages.slice(0, 1);
                break;
            }
            case "last": {
                stages = store.stages.slice(-1);
                break;
            }
            default: {
                stages = store.stages.filter((stage) => stage.id.match(stageRendering));
            }
        }
        // traverse all stages
        stages.forEach((gStage) => {
            const dStage = new Diagram.StageCluster(gStage);
            diagram.addSubgraph(dStage);
            entities.set(gStage.uuid, dStage);
            gStage.children.forEach((child) => visit(child, dStage));
        });
    }
    else if (store.rootStacks.length) {
        // traverse all root stack
        store.rootStacks.forEach((gStack) => {
            const dStack = new Diagram.StackCluster(gStack);
            diagram.addSubgraph(dStack);
            entities.set(gStack.uuid, dStack);
            gStack.children.forEach((child) => visit(child, dStack));
        });
    }
    else {
        store.root.children.forEach((gChild) => {
            if (gChild.isGraphContainer) {
                gChild.children.forEach((_gChild) => {
                    visit(_gChild, diagram);
                });
            }
            else {
                visit(gChild, diagram);
            }
        });
    }
    // apply all edges
    store.edges.forEach((gEdge) => {
        if (gEdge.isDestroyed)
            return;
        const dSource = entities.get(gEdge.source.uuid);
        const dTarget = entities.get(gEdge.target.uuid);
        if (!dSource || !dTarget) {
            debug_1.IS_DEBUG &&
                console.warn("Diagram.Edge unresolved source and/or target:", `source(${gEdge.source} => ${dSource})`, `target(${gEdge.target} => ${dTarget})`);
            return;
        }
        let edge = undefined;
        switch (gEdge.edgeType) {
            case cdk_graph_1.EdgeTypeEnum.REFERENCE: {
                edge = new Diagram.ReferenceLink(gEdge, dSource, dTarget);
                break;
            }
            case cdk_graph_1.EdgeTypeEnum.DEPENDENCY: {
                edge = new Diagram.DependencyLink(gEdge, dSource, dTarget);
                break;
            }
        }
        if (edge) {
            entities.set(gEdge.uuid, edge);
            edgeResolve.trackEdge(edge);
        }
    });
    edgeResolve.resolveEdges(options).forEach((edge) => {
        diagram.addEdge(edge);
    });
    return diagram;
}
/**
 * Wrap a {@link Diagram.Node} with {@link Diagram.Container} to support adding child {@link Diagram.Node}s
 * @internal
 */
function asContainer(node) {
    const container = new Diagram.Container(node.graphNode);
    container.addNode(node);
    return container;
}
/**
 * Get the rank score of an {@link Diagram.BaseEdge Edge} used to sort and prioritize edges
 * @internal
 */
function getEdgeRank(edge) {
    if (edge instanceof Diagram.ChildLink) {
        return 0;
    }
    if (edge instanceof Diagram.ReferenceLink) {
        return 1;
    }
    if (edge instanceof Diagram.DependencyLink) {
        return 2;
    }
    return 3;
}
//# sourceMappingURL=data:application/json;base64,