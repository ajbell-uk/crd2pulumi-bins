"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyohIENvcHlyaWdodCBbQW1hem9uLmNvbV0oaHR0cDovL2FtYXpvbi5jb20vKSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wICovXG4vKipcbiAqIEEgc21pdGh5IGJ1aWxkIHRyYW5zZm9ybVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNtaXRoeVRyYW5zZm9ybSB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSB0cmFuc2Zvcm1cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIEFyZ3VtZW50cyBmb3IgdGhlIHRyYW5zZm9ybVxuICAgKi9cbiAgcmVhZG9ubHkgYXJnczogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGNvbW1vbiB0byBzbWl0aHkgcGx1Z2lucyBhbmQgdGhlIHJvb3Qgc21pdGh5IGJ1aWxkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU21pdGh5Q29tbW9uIHtcbiAgLyoqXG4gICAqIExpc3Qgb2YgaW1wb3J0c1xuICAgKi9cbiAgcmVhZG9ubHkgaW1wb3J0cz86IHN0cmluZ1tdO1xuICAvKipcbiAgICogUGx1Z2lucyBrZXllZCBieSBwbHVnaW4gaWRcbiAgICovXG4gIHJlYWRvbmx5IHBsdWdpbnM/OiBTbWl0aHlQbHVnaW5zO1xufVxuXG4vKipcbiAqIEEgc21pdGh5IHBsdWdpblxuICovXG5leHBvcnQgdHlwZSBTbWl0aHlQbHVnaW4gPSB7XG4gIC8qKlxuICAgKiBUaGUgc2VydmljZSB0byB3aGljaCB0aGUgcGx1Z2luIHNob3VsZCBhcHBseVxuICAgKi9cbiAgcmVhZG9ubHkgc2VydmljZT86IHN0cmluZztcbiAgLyoqXG4gICAqIE90aGVyIHBsdWdpbiBzZXR0aW5nc1xuICAgKi9cbiAgcmVhZG9ubHkgW2tleTogc3RyaW5nXTogYW55O1xufTtcblxuLyoqXG4gKiBBIHNtaXRoeSBidWlsZCBwcm9qZWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU21pdGh5UHJvamVjdGlvbiBleHRlbmRzIFNtaXRoeUNvbW1vbiB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvamVjdGlvbiBpcyBhYnN0cmFjdFxuICAgKi9cbiAgcmVhZG9ubHkgYWJzdHJhY3Q/OiBib29sZWFuO1xuICAvKipcbiAgICogVHJhbnNmb3JtcyB0byBhcHBseSB0byB0aGUgcHJvamVjdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgdHJhbnNmb3Jtcz86IFNtaXRoeVRyYW5zZm9ybVtdO1xufVxuXG4vKipcbiAqIFByb2plY3Rpb24ga2V5LCB1c2VkIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBwcm9qZWN0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIFNtaXRoeVByb2plY3Rpb25LZXkgPSBzdHJpbmc7XG4vKipcbiAqIFByb2plY3Rpb25zIGtleWVkIGJ5IGlkXG4gKi9cbmV4cG9ydCB0eXBlIFNtaXRoeVByb2plY3Rpb25zID0gUmVjb3JkPFNtaXRoeVByb2plY3Rpb25LZXksIFNtaXRoeVByb2plY3Rpb24+O1xuLyoqXG4gKiBQbHVnaW4ga2V5LCB1c2VkIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBwbHVnaW5cbiAqL1xuZXhwb3J0IHR5cGUgU21pdGh5UGx1Z2luS2V5ID0gc3RyaW5nO1xuLyoqXG4gKiBQbHVnaW5zIGtleWVkIGJ5IGlkXG4gKi9cbmV4cG9ydCB0eXBlIFNtaXRoeVBsdWdpbnMgPSBSZWNvcmQ8U21pdGh5UGx1Z2luS2V5LCBTbWl0aHlQbHVnaW4+O1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIHNtaXRoeSBtYXZlbiBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTbWl0aHlNYXZlbkNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogVGhlIGRlcGVuZGVuY2llcyB1c2VkIGluIHRoZSBidWlsZC5ncmFkbGUgYW5kIHNtaXRoeS1idWlsZC5qc29uIGZpbGVzXG4gICAqIGVnLiBzb2Z0d2FyZS5hbWF6b24uc21pdGh5OnNtaXRoeS12YWxpZGF0aW9uLW1vZGVsOjEuMjguMFxuICAgKiBUaGUgZm9sbG93aW5nIHJlcXVpcmVkIGRlcGVuZGVuY2llcyBhcmUgYWx3YXlzIGFkZGVkOlxuICAgKiAtIHNvZnR3YXJlLmFtYXpvbi5zbWl0aHk6c21pdGh5LWNsaToxLjI4LjBcbiAgICogLSBzb2Z0d2FyZS5hbWF6b24uc21pdGh5OnNtaXRoeS1tb2RlbDoxLjI4LjBcbiAgICogLSBzb2Z0d2FyZS5hbWF6b24uc21pdGh5OnNtaXRoeS1vcGVuYXBpOjEuMjguMFxuICAgKiAtIHNvZnR3YXJlLmFtYXpvbi5zbWl0aHk6c21pdGh5LWF3cy10cmFpdHM6MS4yOC4wXG4gICAqIFlvdSBjYW4gaG93ZXZlciBvdmVycmlkZSB0aGUgdmVyc2lvbiBvZiB0aGVzZSBkZXBlbmRlbmNpZXMgaWYgcmVxdWlyZWQuXG4gICAqL1xuICByZWFkb25seSBkZXBlbmRlbmNpZXM/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSByZXBvc2l0b3J5IHVybHMgdXNlZCBpbiB0aGUgYnVpbGQuZ3JhZGxlIGFuZCBzbWl0aHktYnVpbGQuanNvbiBmaWxlc1xuICAgKiBAZGVmYXVsdCBtYXZlbiBjZW50cmFsIGFuZCBtYXZlbiBsb2NhbFxuICAgKi9cbiAgcmVhZG9ubHkgcmVwb3NpdG9yeVVybHM/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgc21pdGh5IGJ1aWxkIGZpbGVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU21pdGh5QnVpbGRPcHRpb25zIGV4dGVuZHMgU21pdGh5Q29tbW9uIHtcbiAgLyoqXG4gICAqIE1hcCBvZiBwcm9qZWN0aW9ucyBuYW1lIHRvIHByb2plY3Rpb24gY29uZmlndXJhdGlvbnNcbiAgICogaHR0cHM6Ly9hd3NsYWJzLmdpdGh1Yi5pby9zbWl0aHkvMi4wL2d1aWRlcy9idWlsZGluZy1tb2RlbHMvYnVpbGQtY29uZmlnLmh0bWwjcHJvamVjdGlvbnNcbiAgICogQGRlZmF1bHQgLSBubyBwcm9qZWN0aW9uc1xuICAgKi9cbiAgcmVhZG9ubHkgcHJvamVjdGlvbnM/OiBTbWl0aHlQcm9qZWN0aW9ucztcbiAgLyoqXG4gICAqIElmIGEgcGx1Z2luIGNhbid0IGJlIGZvdW5kLCBTbWl0aHkgd2lsbCBieSBkZWZhdWx0IGZhaWwgdGhlIGJ1aWxkLlxuICAgKiBUaGlzIHNldHRpbmcgY2FuIGJlIHNldCB0byB0cnVlIHRvIGFsbG93IHRoZSBidWlsZCB0byBwcm9ncmVzc1xuICAgKiBldmVuIGlmIGEgcGx1Z2luIGNhbid0IGJlIGZvdW5kIG9uIHRoZSBjbGFzc3BhdGguXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gaWdub3JlTWlzc2luZ1BsdWdpbnMgc2V0IGluIHRoZSBzbWl0aHktYnVpbGQuanNvbiBmaWxlXG4gICAqL1xuICByZWFkb25seSBpZ25vcmVNaXNzaW5nUGx1Z2lucz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBNYXZlbiBjb25maWd1cmF0aW9uIGZvciB0aGUgU21pdGh5IGJ1aWxkIHByb2plY3QsIHVzZWQgdG8gc3BlY2lmeSBkZXBlbmRlbmNpZXMgYW5kIHJlcG9zaXRvcmllcyBpbiB0aGUgYnVpbGQuZ3JhZGxlXG4gICAqIGFuZCBzbWl0aHktYnVpbGQuanNvbiBmaWxlcy5cbiAgICogQGRlZmF1bHQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiByZXF1aXJlZCBmb3IgU21pdGh5IHRvIE9wZW5BUEkgY29udmVyc2lvblxuICAgKi9cbiAgcmVhZG9ubHkgbWF2ZW4/OiBTbWl0aHlNYXZlbkNvbmZpZ3VyYXRpb247XG4gIC8qKlxuICAgKiBQYXRocyB0byBhbnkgYWRkaXRpb25hbCBtb2RlbCBmaWxlcyBvciBkaXJlY3RvcmllcyB0byBiZSB1c2VkIGFzIHNvdXJjZXMgZm9yXG4gICAqIHRoZSBzbWl0aHkgYnVpbGQuIFRoZSBzcmMvbWFpbi9zbWl0aHkgZGlyZWN0b3J5IGlzIGFsd2F5cyBpbmNsdWRlZC5cbiAgICogUGF0aHMgbXVzdCBiZSByZWxhdGl2ZSB0byB0aGUgbW9kZWwgcHJvamVjdCBkaXJlY3RvcnkuIEFic29sdXRlIHBhdGhzIHdpbGxcbiAgICogYmUgcmVzb2x2ZWQgYXMgcmVsYXRpdmUgcGF0aHMuXG4gICAqL1xuICByZWFkb25seSBhZGRpdGlvbmFsU291cmNlcz86IHN0cmluZ1tdO1xufVxuIl19