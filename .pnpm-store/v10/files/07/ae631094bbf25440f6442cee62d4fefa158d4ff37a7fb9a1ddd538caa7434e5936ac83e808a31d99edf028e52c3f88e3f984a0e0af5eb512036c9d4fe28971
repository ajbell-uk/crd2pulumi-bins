"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrailingCommas2 = exports.TrailingCommas = exports.Semicolons = exports.QuoteProperties = exports.OperatorLinebreak = exports.ArrowParentheses = exports.WhitespaceSensitivity = exports.SelfCloseVoidElements = exports.QuoteStyle = exports.VcsClientKind = exports.RuleDomainValue = exports.JsxRuntime = exports.LineEnding = exports.IndentStyle = exports.Expand = exports.AttributePosition = void 0;
exports.toJson_BiomeConfiguration = toJson_BiomeConfiguration;
exports.toJson_AssistConfiguration = toJson_AssistConfiguration;
exports.toJson_CssConfiguration = toJson_CssConfiguration;
exports.toJson_FilesConfiguration = toJson_FilesConfiguration;
exports.toJson_FormatterConfiguration = toJson_FormatterConfiguration;
exports.toJson_GraphqlConfiguration = toJson_GraphqlConfiguration;
exports.toJson_GritConfiguration = toJson_GritConfiguration;
exports.toJson_HtmlConfiguration = toJson_HtmlConfiguration;
exports.toJson_JsConfiguration = toJson_JsConfiguration;
exports.toJson_JsonConfiguration = toJson_JsonConfiguration;
exports.toJson_LinterConfiguration = toJson_LinterConfiguration;
exports.toJson_OverridePattern = toJson_OverridePattern;
exports.toJson_VcsConfiguration = toJson_VcsConfiguration;
exports.toJson_Actions = toJson_Actions;
exports.toJson_CssAssistConfiguration = toJson_CssAssistConfiguration;
exports.toJson_CssFormatterConfiguration = toJson_CssFormatterConfiguration;
exports.toJson_CssLinterConfiguration = toJson_CssLinterConfiguration;
exports.toJson_CssParserConfiguration = toJson_CssParserConfiguration;
exports.toJson_GraphqlAssistConfiguration = toJson_GraphqlAssistConfiguration;
exports.toJson_GraphqlFormatterConfiguration = toJson_GraphqlFormatterConfiguration;
exports.toJson_GraphqlLinterConfiguration = toJson_GraphqlLinterConfiguration;
exports.toJson_GritAssistConfiguration = toJson_GritAssistConfiguration;
exports.toJson_GritFormatterConfiguration = toJson_GritFormatterConfiguration;
exports.toJson_GritLinterConfiguration = toJson_GritLinterConfiguration;
exports.toJson_HtmlFormatterConfiguration = toJson_HtmlFormatterConfiguration;
exports.toJson_HtmlParserConfiguration = toJson_HtmlParserConfiguration;
exports.toJson_JsAssistConfiguration = toJson_JsAssistConfiguration;
exports.toJson_JsFormatterConfiguration = toJson_JsFormatterConfiguration;
exports.toJson_JsLinterConfiguration = toJson_JsLinterConfiguration;
exports.toJson_JsParserConfiguration = toJson_JsParserConfiguration;
exports.toJson_JsonAssistConfiguration = toJson_JsonAssistConfiguration;
exports.toJson_JsonFormatterConfiguration = toJson_JsonFormatterConfiguration;
exports.toJson_JsonLinterConfiguration = toJson_JsonLinterConfiguration;
exports.toJson_JsonParserConfiguration = toJson_JsonParserConfiguration;
exports.toJson_Rules = toJson_Rules;
exports.toJson_OverrideAssistConfiguration = toJson_OverrideAssistConfiguration;
exports.toJson_OverrideFilesConfiguration = toJson_OverrideFilesConfiguration;
exports.toJson_OverrideFormatterConfiguration = toJson_OverrideFormatterConfiguration;
exports.toJson_OverrideLinterConfiguration = toJson_OverrideLinterConfiguration;
exports.toJson_Source = toJson_Source;
/**
 * Converts an object of type 'BiomeConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_BiomeConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        '$schema': obj.schema,
        'assist': toJson_AssistConfiguration(obj.assist),
        'css': toJson_CssConfiguration(obj.css),
        'extends': obj.extends?.map(y => y),
        'files': toJson_FilesConfiguration(obj.files),
        'formatter': toJson_FormatterConfiguration(obj.formatter),
        'graphql': toJson_GraphqlConfiguration(obj.graphql),
        'grit': toJson_GritConfiguration(obj.grit),
        'html': toJson_HtmlConfiguration(obj.html),
        'javascript': toJson_JsConfiguration(obj.javascript),
        'json': toJson_JsonConfiguration(obj.json),
        'linter': toJson_LinterConfiguration(obj.linter),
        'overrides': obj.overrides?.map(y => toJson_OverridePattern(y)),
        'plugins': obj.plugins?.map(y => y),
        'root': obj.root,
        'vcs': toJson_VcsConfiguration(obj.vcs),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'AssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_AssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'actions': toJson_Actions(obj.actions),
        'enabled': obj.enabled,
        'includes': obj.includes?.map(y => y),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'CssConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_CssConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_CssAssistConfiguration(obj.assist),
        'formatter': toJson_CssFormatterConfiguration(obj.formatter),
        'globals': obj.globals?.map(y => y),
        'linter': toJson_CssLinterConfiguration(obj.linter),
        'parser': toJson_CssParserConfiguration(obj.parser),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'FilesConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_FilesConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'experimentalScannerIgnores': obj.experimentalScannerIgnores?.map(y => y),
        'ignoreUnknown': obj.ignoreUnknown,
        'includes': obj.includes?.map(y => y),
        'maxSize': obj.maxSize,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'FormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_FormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'attributePosition': obj.attributePosition,
        'bracketSameLine': obj.bracketSameLine,
        'bracketSpacing': obj.bracketSpacing,
        'enabled': obj.enabled,
        'expand': obj.expand,
        'formatWithErrors': obj.formatWithErrors,
        'includes': obj.includes?.map(y => y),
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'useEditorconfig': obj.useEditorconfig,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GraphqlConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GraphqlConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_GraphqlAssistConfiguration(obj.assist),
        'formatter': toJson_GraphqlFormatterConfiguration(obj.formatter),
        'linter': toJson_GraphqlLinterConfiguration(obj.linter),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GritConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GritConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_GritAssistConfiguration(obj.assist),
        'formatter': toJson_GritFormatterConfiguration(obj.formatter),
        'linter': toJson_GritLinterConfiguration(obj.linter),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'HtmlConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_HtmlConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'formatter': toJson_HtmlFormatterConfiguration(obj.formatter),
        'parser': toJson_HtmlParserConfiguration(obj.parser),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_JsAssistConfiguration(obj.assist),
        'formatter': toJson_JsFormatterConfiguration(obj.formatter),
        'globals': obj.globals?.map(y => y),
        'jsxRuntime': obj.jsxRuntime,
        'linter': toJson_JsLinterConfiguration(obj.linter),
        'parser': toJson_JsParserConfiguration(obj.parser),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsonConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsonConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_JsonAssistConfiguration(obj.assist),
        'formatter': toJson_JsonFormatterConfiguration(obj.formatter),
        'linter': toJson_JsonLinterConfiguration(obj.linter),
        'parser': toJson_JsonParserConfiguration(obj.parser),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'LinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_LinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'domains': ((obj.domains) === undefined) ? undefined : (Object.entries(obj.domains).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
        'enabled': obj.enabled,
        'includes': obj.includes?.map(y => y),
        'rules': toJson_Rules(obj.rules),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'OverridePattern' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_OverridePattern(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'assist': toJson_OverrideAssistConfiguration(obj.assist),
        'css': toJson_CssConfiguration(obj.css),
        'files': toJson_OverrideFilesConfiguration(obj.files),
        'formatter': toJson_OverrideFormatterConfiguration(obj.formatter),
        'graphql': toJson_GraphqlConfiguration(obj.graphql),
        'grit': toJson_GritConfiguration(obj.grit),
        'html': toJson_HtmlConfiguration(obj.html),
        'includes': obj.includes?.map(y => y),
        'javascript': toJson_JsConfiguration(obj.javascript),
        'json': toJson_JsonConfiguration(obj.json),
        'linter': toJson_OverrideLinterConfiguration(obj.linter),
        'plugins': obj.plugins?.map(y => y),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'VcsConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_VcsConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'clientKind': obj.clientKind,
        'defaultBranch': obj.defaultBranch,
        'enabled': obj.enabled,
        'root': obj.root,
        'useIgnoreFile': obj.useIgnoreFile,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'Actions' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_Actions(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'recommended': obj.recommended,
        'source': toJson_Source(obj.source),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'CssAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_CssAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'CssFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_CssFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'quoteStyle': obj.quoteStyle,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'CssLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_CssLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'CssParserConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_CssParserConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'allowWrongLineComments': obj.allowWrongLineComments,
        'cssModules': obj.cssModules,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * @schema AttributePosition
 */
var AttributePosition;
(function (AttributePosition) {
    /** auto */
    AttributePosition["AUTO"] = "auto";
    /** multiline */
    AttributePosition["MULTILINE"] = "multiline";
})(AttributePosition || (exports.AttributePosition = AttributePosition = {}));
/**
 * @schema Expand
 */
var Expand;
(function (Expand) {
    /** auto */
    Expand["AUTO"] = "auto";
    /** always */
    Expand["ALWAYS"] = "always";
    /** never */
    Expand["NEVER"] = "never";
})(Expand || (exports.Expand = Expand = {}));
/**
 * @schema IndentStyle
 */
var IndentStyle;
(function (IndentStyle) {
    /** tab */
    IndentStyle["TAB"] = "tab";
    /** space */
    IndentStyle["SPACE"] = "space";
})(IndentStyle || (exports.IndentStyle = IndentStyle = {}));
/**
 * @schema LineEnding
 */
var LineEnding;
(function (LineEnding) {
    /** lf */
    LineEnding["LF"] = "lf";
    /** crlf */
    LineEnding["CRLF"] = "crlf";
    /** cr */
    LineEnding["CR"] = "cr";
})(LineEnding || (exports.LineEnding = LineEnding = {}));
/**
 * Converts an object of type 'GraphqlAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GraphqlAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GraphqlFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GraphqlFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'bracketSpacing': obj.bracketSpacing,
        'enabled': obj.enabled,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'quoteStyle': obj.quoteStyle,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GraphqlLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GraphqlLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GritAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GritAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GritFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GritFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'GritLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_GritLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'HtmlFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_HtmlFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'attributePosition': obj.attributePosition,
        'bracketSameLine': obj.bracketSameLine,
        'enabled': obj.enabled,
        'indentScriptAndStyle': obj.indentScriptAndStyle,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'selfCloseVoidElements': obj.selfCloseVoidElements,
        'whitespaceSensitivity': obj.whitespaceSensitivity,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'HtmlParserConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_HtmlParserConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'interpolation': obj.interpolation,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'arrowParentheses': obj.arrowParentheses,
        'attributePosition': obj.attributePosition,
        'bracketSameLine': obj.bracketSameLine,
        'bracketSpacing': obj.bracketSpacing,
        'enabled': obj.enabled,
        'expand': obj.expand,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'jsxQuoteStyle': obj.jsxQuoteStyle,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'operatorLinebreak': obj.operatorLinebreak,
        'quoteProperties': obj.quoteProperties,
        'quoteStyle': obj.quoteStyle,
        'semicolons': obj.semicolons,
        'trailingCommas': obj.trailingCommas,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * Indicates the type of runtime or transformation used for interpreting JSX.
 *
 * @schema JsxRuntime
 */
var JsxRuntime;
(function (JsxRuntime) {
    /** transparent */
    JsxRuntime["TRANSPARENT"] = "transparent";
    /** reactClassic */
    JsxRuntime["REACT_CLASSIC"] = "reactClassic";
})(JsxRuntime || (exports.JsxRuntime = JsxRuntime = {}));
/**
 * Converts an object of type 'JsLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsParserConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsParserConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'gritMetavariables': obj.gritMetavariables,
        'jsxEverywhere': obj.jsxEverywhere,
        'unsafeParameterDecoratorsEnabled': obj.unsafeParameterDecoratorsEnabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsonAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsonAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsonFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsonFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'bracketSpacing': obj.bracketSpacing,
        'enabled': obj.enabled,
        'expand': obj.expand,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
        'trailingCommas': obj.trailingCommas,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsonLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsonLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'JsonParserConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_JsonParserConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'allowComments': obj.allowComments,
        'allowTrailingCommas': obj.allowTrailingCommas,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * @schema RuleDomainValue
 */
var RuleDomainValue;
(function (RuleDomainValue) {
    /** all */
    RuleDomainValue["ALL"] = "all";
    /** none */
    RuleDomainValue["NONE"] = "none";
    /** recommended */
    RuleDomainValue["RECOMMENDED"] = "recommended";
})(RuleDomainValue || (exports.RuleDomainValue = RuleDomainValue = {}));
/**
 * Converts an object of type 'Rules' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_Rules(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'a11y': obj.a11Y,
        'complexity': obj.complexity,
        'correctness': obj.correctness,
        'nursery': obj.nursery,
        'performance': obj.performance,
        'recommended': obj.recommended,
        'security': obj.security,
        'style': obj.style,
        'suspicious': obj.suspicious,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'OverrideAssistConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_OverrideAssistConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'actions': toJson_Actions(obj.actions),
        'enabled': obj.enabled,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'OverrideFilesConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_OverrideFilesConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'maxSize': obj.maxSize,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'OverrideFormatterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_OverrideFormatterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'attributePosition': obj.attributePosition,
        'bracketSameLine': obj.bracketSameLine,
        'bracketSpacing': obj.bracketSpacing,
        'enabled': obj.enabled,
        'expand': obj.expand,
        'formatWithErrors': obj.formatWithErrors,
        'indentSize': obj.indentSize,
        'indentStyle': obj.indentStyle,
        'indentWidth': obj.indentWidth,
        'lineEnding': obj.lineEnding,
        'lineWidth': obj.lineWidth,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/**
 * Converts an object of type 'OverrideLinterConfiguration' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_OverrideLinterConfiguration(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'domains': ((obj.domains) === undefined) ? undefined : (Object.entries(obj.domains).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
        'enabled': obj.enabled,
        'rules': toJson_Rules(obj.rules),
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * Integration with the git client as VCS
 *
 * @schema VcsClientKind
 */
var VcsClientKind;
(function (VcsClientKind) {
    /** git */
    VcsClientKind["GIT"] = "git";
})(VcsClientKind || (exports.VcsClientKind = VcsClientKind = {}));
/**
 * Converts an object of type 'Source' to JSON representation.
 * @internal
 */
/* eslint-disable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
function toJson_Source(obj) {
    if (obj === undefined) {
        return undefined;
    }
    const result = {
        'organizeImports': obj.organizeImports,
        'recommended': obj.recommended,
        'useSortedAttributes': obj.useSortedAttributes,
        'useSortedKeys': obj.useSortedKeys,
        'useSortedProperties': obj.useSortedProperties,
    };
    // filter undefined values
    return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, @stylistic/max-len, quote-props, @stylistic/quote-props */
/**
 * @schema QuoteStyle
 */
var QuoteStyle;
(function (QuoteStyle) {
    /** double */
    QuoteStyle["DOUBLE"] = "double";
    /** single */
    QuoteStyle["SINGLE"] = "single";
})(QuoteStyle || (exports.QuoteStyle = QuoteStyle = {}));
/**
 * Controls whether void-elements should be self closed
 *
 * @schema SelfCloseVoidElements
 */
var SelfCloseVoidElements;
(function (SelfCloseVoidElements) {
    /** never */
    SelfCloseVoidElements["NEVER"] = "never";
    /** always */
    SelfCloseVoidElements["ALWAYS"] = "always";
})(SelfCloseVoidElements || (exports.SelfCloseVoidElements = SelfCloseVoidElements = {}));
/**
 * Whitespace sensitivity for HTML formatting.
 *
 * The following two cases won't produce the same output:
 *
 * |                |      html      |    output    | | -------------- | :------------: | :----------: | | with spaces    | `1<b> 2 </b>3` | 1<b> 2 </b>3 | | without spaces |  `1<b>2</b>3`  |  1<b>2</b>3  |
 *
 * This happens because whitespace is significant in inline elements.
 *
 * As a consequence of this, the formatter must format blocks that look like this (assume a small line width, <20): ```html <span>really long content</span> ``` as this, where the content hugs the tags: ```html <span >really long content</span > ```
 *
 * Note that this is only necessary for inline elements. Block elements do not have this restriction.
 *
 * @schema WhitespaceSensitivity
 */
var WhitespaceSensitivity;
(function (WhitespaceSensitivity) {
    /** css */
    WhitespaceSensitivity["CSS"] = "css";
    /** strict */
    WhitespaceSensitivity["STRICT"] = "strict";
    /** ignore */
    WhitespaceSensitivity["IGNORE"] = "ignore";
})(WhitespaceSensitivity || (exports.WhitespaceSensitivity = WhitespaceSensitivity = {}));
/**
 * @schema ArrowParentheses
 */
var ArrowParentheses;
(function (ArrowParentheses) {
    /** always */
    ArrowParentheses["ALWAYS"] = "always";
    /** asNeeded */
    ArrowParentheses["AS_NEEDED"] = "asNeeded";
})(ArrowParentheses || (exports.ArrowParentheses = ArrowParentheses = {}));
/**
 * @schema OperatorLinebreak
 */
var OperatorLinebreak;
(function (OperatorLinebreak) {
    /** after */
    OperatorLinebreak["AFTER"] = "after";
    /** before */
    OperatorLinebreak["BEFORE"] = "before";
})(OperatorLinebreak || (exports.OperatorLinebreak = OperatorLinebreak = {}));
/**
 * @schema QuoteProperties
 */
var QuoteProperties;
(function (QuoteProperties) {
    /** asNeeded */
    QuoteProperties["AS_NEEDED"] = "asNeeded";
    /** preserve */
    QuoteProperties["PRESERVE"] = "preserve";
})(QuoteProperties || (exports.QuoteProperties = QuoteProperties = {}));
/**
 * @schema Semicolons
 */
var Semicolons;
(function (Semicolons) {
    /** always */
    Semicolons["ALWAYS"] = "always";
    /** asNeeded */
    Semicolons["AS_NEEDED"] = "asNeeded";
})(Semicolons || (exports.Semicolons = Semicolons = {}));
/**
 * Print trailing commas wherever possible in multi-line comma-separated syntactic structures.
 *
 * @schema TrailingCommas
 */
var TrailingCommas;
(function (TrailingCommas) {
    /** all */
    TrailingCommas["ALL"] = "all";
    /** es5 */
    TrailingCommas["ES5"] = "es5";
    /** none */
    TrailingCommas["NONE"] = "none";
})(TrailingCommas || (exports.TrailingCommas = TrailingCommas = {}));
/**
 * @schema TrailingCommas2
 */
var TrailingCommas2;
(function (TrailingCommas2) {
    /** none */
    TrailingCommas2["NONE"] = "none";
    /** all */
    TrailingCommas2["ALL"] = "all";
})(TrailingCommas2 || (exports.TrailingCommas2 = TrailingCommas2 = {}));
//# sourceMappingURL=data:application/json;base64,