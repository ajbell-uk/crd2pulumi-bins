"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = main;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("node:path"));
const yargs = __importStar(require("yargs"));
const transpile_1 = require("./docgen/transpile/transpile");
const index_1 = require("./index");
async function generateForLanguage(docs, options) {
    const { format, output } = options;
    // e.g. API.typescript as name
    const splitByLanguage = output.endsWith(`.${options.language.name}`);
    const submoduleSuffix = splitByLanguage ? `${options.language.name}.${format}` : format;
    // Ensure the output path exists
    const outputPath = path.dirname(output);
    await fs.mkdir(outputPath, { recursive: true });
    if (options.splitBySubmodules) {
        if (format !== 'md') {
            throw new Error('split-by-submodule is only supported for markdown');
        }
        const submodules = await docs.listSubmodules();
        for (const submodule of submodules) {
            const content = await docs.toMarkdown({
                ...options,
                submodule: submodule.fqn,
                allSubmodules: false,
                header: { title: `\`${(0, transpile_1.submoduleRelName)(submodule)}\` Submodule`, id: submodule.fqn },
            });
            await fs.writeFile(path.join(outputPath, `${(0, transpile_1.submoduleRelName)(submodule)}.${submoduleSuffix}`), content.render());
        }
        await fs.writeFile(`${output}.${format}`, await (await docs.toIndexMarkdown(submoduleSuffix, options)).render());
    }
    else {
        const content = await (format === 'md' ? docs.toMarkdown(options) : docs.toJson(options));
        await fs.writeFile(`${output}.${format}`, content.render());
    }
}
async function main() {
    const args = await yargs
        .usage('Usage: $0')
        .option('output', { alias: 'o', type: 'string', required: false, desc: 'Output filename, the file type is automatically added. Defaults to API.md if format is markdown (-f md) or API.json if format is JSON (-f json). If more than one language is passed, then the language will be included in the filename e.g. API.typescript.md' })
        .option('format', { alias: 'f', default: 'md', choices: ['md', 'json'], desc: 'Output format, markdown or json' })
        .option('language', { array: true, alias: 'l', default: ['typescript'], choices: transpile_1.Language.values().map(x => x.toString()), desc: 'Output language' })
        .option('package', { alias: 'p', type: 'string', required: false, desc: 'The name@version of an NPM package to document', defaultDescription: 'The package in the current directory' })
        .option('readme', { alias: 'r', type: 'boolean', required: false, desc: 'Include the user defined README.md in the documentation.' })
        .option('submodule', { alias: 's', type: 'string', required: false, desc: 'Generate docs for a specific submodule (or "root")' })
        .option('split-by-submodule', { type: 'boolean', required: false, desc: 'Generate a separate file for each submodule' })
        .example('$0', 'Generate documentation for the current module as a single file (auto-resolves node dependencies)')
        .argv;
    const submodule = args.submodule === 'root' ? undefined : args.submodule;
    const allSubmodules = !args.submodule;
    const readme = args.readme;
    const splitBySubmodules = args['split-by-submodule'];
    const docs = await (args.package
        ? index_1.Documentation.forPackage(args.package)
        : index_1.Documentation.forProject(process.cwd()));
    const options = (lang, output = 'API', includeLanguageInOutputName = false) => {
        const format = args.format === 'md' ? 'md' : 'json';
        // Clean the user provided output of a possible file ending
        let outputFileName = output.endsWith(`.${format}`)
            ? output.slice(0, -(format.length + 1))
            : output;
        // for multi language docs, include the language in the filename
        if (includeLanguageInOutputName) {
            outputFileName = `${outputFileName}.${lang}`;
        }
        return ({
            readme,
            language: transpile_1.Language.fromString(lang),
            submodule,
            allSubmodules,
            splitBySubmodules,
            format,
            output: outputFileName,
        });
    };
    if (args.language.length <= 1) {
        await generateForLanguage(docs, options(args.language[0], args.output));
    }
    else {
        for (const lang of args.language) {
            await generateForLanguage(docs, options(lang, args.output, true));
        }
    }
}
main().catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,