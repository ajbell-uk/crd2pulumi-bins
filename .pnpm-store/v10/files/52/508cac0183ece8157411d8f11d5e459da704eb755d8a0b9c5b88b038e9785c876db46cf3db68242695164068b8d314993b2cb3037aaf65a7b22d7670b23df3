"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyLink = exports.ReferenceLink = exports.ChildLink = exports.Link = exports.Edge = exports.BaseEdge = void 0;
const Dot = require("ts-graphviz");
const subgraphs_1 = require("./subgraphs");
const theme_1 = require("../theme");
/**
 * BaseEdge class is the base class for defining a {@link Dot.Edge}.
 * @internal
 */
class BaseEdge extends Dot.Edge {
    /** Indicates if edge is considered **extraneous** */
    get isExtraneous() {
        return this.isSynthetic;
    }
    /** Indicates if edge is considered **verbose** */
    get isVerbose() {
        return this.isExtraneous || this.isClosedLoop;
    }
    /** Indicates if edge is a *closed loop*, meaning its *leaf* and *head* are the same entity */
    get isClosedLoop() {
        const [from, to] = this.targets;
        if (from.id === to.id)
            return true;
        if (from.id === this.attributes.get("lhead"))
            return true;
        if (to.id === this.attributes.get("ltail"))
            return true;
        return false;
    }
    /** @internal */
    constructor(from, to // TODO: support edge chain (need to handle subgraph case) // ...rest: EdgeTarget[]
    ) {
        const _attributes = {};
        let isCompound = false;
        let isSynthetic = false;
        // [compound](https://graphviz.org/docs/attrs/compound/) support - referencing container rather than node
        let _from;
        if (from instanceof subgraphs_1.Container) {
            isCompound = true;
            _from = from.nodes[0];
            if (_from == null) {
                isSynthetic = true;
                _from = {
                    id: `synthetic_${from.id}`,
                    style: "none",
                    shape: "none",
                    label: "",
                };
            }
            // https://graphviz.org/docs/attrs/ltail/
            _attributes.ltail = from.id;
        }
        else {
            _from = from;
        }
        let _to;
        if (to instanceof subgraphs_1.Container) {
            _to = to.nodes[0];
            isCompound = true;
            if (_to == null) {
                isSynthetic = true;
                _to = {
                    id: `synthetic_${to.id}`,
                    style: "none",
                    shape: "none",
                    label: "",
                };
            }
            // https://graphviz.org/docs/attrs/lhead/
            _attributes.lhead = to.id;
        }
        else {
            _to = to;
        }
        super([_from, _to], _attributes);
        this.from = from;
        this.to = to;
        this._extraneous = false;
        this.isCompound = isCompound;
        this.isSynthetic = isSynthetic;
        // Experimental: attempting to improve layout control of subgraphs (disabled by default)
        if (theme_1.GraphTheme.instance.rendering.unconstrainedCrossClusterEdges) {
            // Prevent cross-cluster edges from mangling the cluster layout
            if (this.isClosedLoop ||
                this.isCompound ||
                this.isSynthetic ||
                this.from.graphNode.findAncestor({
                    filter: (node) => node.isCluster,
                }) !==
                    this.to.graphNode.findAncestor({ filter: (node) => node.isCluster })) {
                this.attributes.set("constraint", false);
                if (!this.isClosedLoop &&
                    this.from instanceof Dot.Node &&
                    this.to instanceof Dot.Node) {
                    const group = "group_" +
                        this.from.graphNode.getNearestAncestor(this.to.graphNode).uuid;
                    this.from.attributes.set("group", group);
                    this.to.attributes.set("group", group);
                }
            }
        }
    }
}
exports.BaseEdge = BaseEdge;
/**
 * Edge class is the base class for {@link Graph.Edge} based {@link Dot.Edge} entities
 * @internal
 */
class Edge extends BaseEdge {
    /** @internal */
    constructor(edge, from, to
    // TODO: support edge chain (need to handle subgraph case)
    // Need to have specific use case before implementing this, but Dot.Edge supports chaining
    // ...rest: EdgeTarget[]
    ) {
        super(from, to);
        this.attributes.set("id", edge.uuid);
        this.graphEdge = edge;
        this._extraneous = edge.isExtraneous;
    }
}
exports.Edge = Edge;
/**
 * Link class defines a {@link Graph.Edge} defined by a {@link Graph.Node}
 * @internal
 */
class Link extends Edge {
    /** @internal */
    constructor(edge, from, to) {
        super(edge, from, to);
    }
}
exports.Link = Link;
/**
 * ChildLink class defines a {@link Dot.Edge} for a {@link Graph.Edge} that describes a parent-child {@link Graph.Node} relationship
 * @internal
 */
class ChildLink extends BaseEdge {
    /** @internal */
    constructor(from, to) {
        super(from, to);
        this.attributes.apply(theme_1.GraphTheme.instance.childLink);
    }
}
exports.ChildLink = ChildLink;
/**
 * ReferenceLink class defines a {@link Dot.Edge} for a {@link Graph.Reference} edge
 * @internal
 */
class ReferenceLink extends Link {
    /** @internal */
    constructor(edge, from, to) {
        super(edge, from, to);
        this.attributes.apply(theme_1.GraphTheme.instance.referenceLink);
    }
}
exports.ReferenceLink = ReferenceLink;
/**
 * DependencyLink class defines a {@link Dot.Edge} for a {@link Graph.Dependency} edge
 * @internal
 */
class DependencyLink extends Link {
    /** @internal */
    constructor(edge, from, to) {
        super(edge, from, to);
        this.attributes.apply(theme_1.GraphTheme.instance.dependencyLink);
    }
}
exports.DependencyLink = DependencyLink;
//# sourceMappingURL=data:application/json;base64,