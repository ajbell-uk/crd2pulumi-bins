"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaTranspile = void 0;
const Case = __importStar(require("case"));
const reflect = __importStar(require("jsii-reflect"));
const transpile = __importStar(require("./transpile"));
const schema_1 = require("../schema");
// Helper methods
const toCamelCase = (text) => {
    return Case.camel(text !== null && text !== void 0 ? text : '');
};
const toUpperCamelCase = (test) => {
    const camelCase = toCamelCase(test);
    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
};
// [1, 2, 3] -> [[], [1], [1, 2], [1, 2, 3]]
const prefixArrays = (arr) => {
    const out = [[]];
    const prefix = [];
    for (const elem of arr) {
        prefix.push(elem);
        out.push([...prefix]);
    }
    return out;
};
/**
 * Hack to convert a jsii property to a parameter for
 * parameter expansion.
 */
const propertyToParameter = (callable, property) => {
    return {
        docs: property.docs,
        method: callable,
        name: property.name,
        optional: property.optional,
        parentType: callable.parentType,
        spec: property.spec,
        system: property.system,
        type: property.type,
        variadic: false,
    };
};
class JavaTranspile extends transpile.TranspileBase {
    constructor() {
        super(transpile.Language.JAVA);
    }
    moduleLike(moduleLike) {
        var _a, _b, _c, _d;
        const javaPackage = (_b = (_a = moduleLike.targets) === null || _a === void 0 ? void 0 : _a.java) === null || _b === void 0 ? void 0 : _b.package;
        // if this is a submodule, we need to break the package name down into the
        // parent name and the submodule. we also allow submodules not to have
        // explicit target names, in which case we need to append the snake-cased
        // submodule name to the parent package name.
        if (moduleLike instanceof reflect.Submodule) {
            const parent = this.getParentModule(moduleLike);
            const parentFqn = (_d = (_c = parent.targets) === null || _c === void 0 ? void 0 : _c.java) === null || _d === void 0 ? void 0 : _d.package;
            // if the submodule does not explicitly define a java package name, we need to deduce it from the parent
            // based on jsii-pacmak package naming conventions.
            // see https://github.com/aws/jsii/blob/b329670bf9ec222fad5fc0d614dcddd5daca7af5/packages/jsii-pacmak/lib/targets/java.ts#L3150
            const submoduleJavaPackage = javaPackage !== null && javaPackage !== void 0 ? javaPackage : `${parentFqn}.${Case.snake(moduleLike.name)}`;
            // for some modules, the parent module's Java package is a prefix of
            // the submodule's Java package, e.g.
            // { name: "software.amazon.awscdk", submodule: "software.amazon.awscdk.services.ecr" }
            //
            // but it's possible the names differ, for example in aws-cdk-lib:
            // { name: "software.amazon.awscdk.core", submodule: "software.amazon.awscdk.services.ecr" }
            return { name: parentFqn, submodule: submoduleJavaPackage };
        }
        return { name: javaPackage };
    }
    type(type) {
        const submodule = this.findSubmodule(type);
        const moduleLike = this.moduleLike(submodule ? submodule : type.assembly);
        const fqn = [];
        let namespace = type.namespace;
        if (namespace) {
            if (submodule && moduleLike.submodule) {
                // if the type is in a submodule, submodule.name is a substring of the namespace
                // so we update that part with the language-specific submodule string
                fqn.push(namespace.replace(submodule.name, moduleLike.submodule));
            }
            else {
                fqn.push(moduleLike.name);
                fqn.push(namespace);
            }
        }
        else {
            fqn.push(moduleLike.name);
        }
        fqn.push(type.name);
        return new transpile.TranspiledType({
            fqn: fqn.join('.'),
            name: type.name,
            namespace: namespace,
            module: moduleLike.name,
            submodule: moduleLike.submodule,
            submodulePath: (0, schema_1.submodulePath)(submodule),
            source: type,
            language: this.language,
        });
    }
    callable(callable) {
        const type = this.type(callable.parentType);
        const parameters = callable.parameters.sort(this.optionalityCompare);
        const requiredParams = parameters.filter((p) => !p.optional);
        const optionalParams = parameters.filter((p) => p.optional);
        const name = callable.name;
        // simulate Java method overloading
        const inputLists = prefixArrays(optionalParams).map((optionals) => {
            return [...requiredParams, ...optionals].map((p) => this.formatParameter(this.parameter(p)));
        });
        let returnType;
        if (reflect.Initializer.isInitializer(callable)) {
            returnType = this.typeReference(callable.parentType.reference);
        }
        else if (reflect.Method.isMethod(callable)) {
            returnType = this.typeReference(callable.returns.type);
        }
        const returns = returnType === null || returnType === void 0 ? void 0 : returnType.toString({
            typeFormatter: (t) => t.name,
        });
        const signatures = inputLists.map((inputs) => {
            return this.formatSignature(name, inputs, returns);
        });
        let invocations;
        if (this.isClassBuilderGenerated(callable)) {
            const struct = this.extractFirstStruct(parameters);
            // render using Java builder syntax (show no overloads)
            invocations = [this.formatClassBuilder(type, parameters, struct)];
            // flatten out the parameters so the user doesn't have to jump between
            // docs of Foo and FooProps
            for (const property of struct.allProperties) {
                const parameter = propertyToParameter(callable, property);
                parameters.push(parameter);
            }
        }
        else {
            invocations = reflect.Initializer.isInitializer(callable)
                // render with `new Class` syntax (showing all constructor overloads)
                ? inputLists.map((inputs) => this.formatClassInitialization(type, inputs))
                // render invocation as method calls (showing all method overloads)
                : inputLists.map((inputs) => this.formatInvocation(type, inputs, name));
        }
        return {
            name,
            parentType: type,
            import: this.formatImport(type),
            parameters,
            signatures,
            invocations,
        };
    }
    class(klass) {
        return {
            name: klass.name,
            type: this.type(klass),
        };
    }
    struct(struct) {
        const type = this.type(struct);
        const indent = ' '.repeat(4);
        const inputs = struct.allProperties.map((p) => this.formatBuilderMethod(this.property(p), indent)).flat();
        return {
            type: type,
            name: struct.name,
            import: this.formatImport(type),
            initialization: this.formatStructBuilder(type, inputs),
        };
    }
    interface(iface) {
        return {
            name: iface.name,
            type: this.type(iface),
        };
    }
    parameter(parameter) {
        const typeRef = this.typeReference(parameter.type);
        return {
            name: parameter.name,
            parentType: this.type(parameter.parentType),
            typeReference: typeRef,
            optional: parameter.optional,
            variadic: parameter.variadic,
            declaration: this.formatProperty(parameter.name, typeRef),
        };
    }
    property(property) {
        const typeRef = this.typeReference(property.type);
        return {
            name: property.name,
            parentType: this.type(property.parentType),
            typeReference: typeRef,
            optional: property.optional,
            declaration: this.formatProperty(property.name, typeRef),
        };
    }
    enum(enu) {
        return {
            fqn: this.type(enu).fqn,
            name: enu.name,
        };
    }
    enumMember(em) {
        return {
            fqn: `${this.enum(em.enumType).fqn}.${em.name}`,
            name: em.name,
        };
    }
    unionOf(types) {
        return types.join(' OR ');
    }
    listOf(type) {
        return `java.util.List<${type}>`;
    }
    variadicOf(type) {
        return `${type}...`;
    }
    mapOf(type) {
        return `java.util.Map<java.lang.String, ${type}>`;
    }
    any() {
        return 'java.lang.Object';
    }
    void() {
        return 'void';
    }
    str() {
        return 'java.lang.String';
    }
    number() {
        return 'java.lang.Number';
    }
    boolean() {
        return 'java.lang.Boolean';
    }
    json() {
        return 'com.fasterxml.jackson.databind.node.ObjectNode';
    }
    date() {
        return 'java.time.Instant';
    }
    readme(readme) {
        return readme;
    }
    formatImport(type) {
        return `import ${type.fqn};`;
    }
    ;
    formatParameter(transpiled) {
        const tf = transpiled.typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        if (transpiled.variadic) {
            return `${this.variadicOf(tf)} ${transpiled.name}`;
        }
        return `${tf} ${transpiled.name}`;
    }
    formatInputs(inputs) {
        return inputs.join(', ');
    }
    ;
    formatStructBuilder(type, methods) {
        const builder = `${type.name}.builder()`;
        return [
            builder,
            ...methods,
            '    .build();',
        ].join('\n');
    }
    ;
    formatClassInitialization(type, inputs) {
        return `new ${type.name}(${this.formatInputs(inputs)});`;
    }
    ;
    formatClassBuilder(type, parameters, struct) {
        const createArgs = this.formatInputs(parameters.map((p) => this.formatParameter(this.parameter(p))));
        const indent = ' '.repeat(4);
        const methods = struct.allProperties.map((p) => this.formatBuilderMethod(this.property(p), indent)).flat();
        return [
            `${type.name}.Builder.create(${createArgs})`,
            ...methods,
            `${indent}.build();`,
        ].join('\n');
    }
    ;
    formatSignature(name, inputs, returns) {
        return `public ${returns ? returns + ' ' : ''}${name}(${this.formatInputs(inputs)})`;
    }
    ;
    formatBuilderMethod(transpiled, indent) {
        if (transpiled.optional)
            indent = '//' + indent.slice(2);
        const lowerCamel = toCamelCase(transpiled.name);
        const base = `${indent}.${lowerCamel}`;
        const tf = transpiled.typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        // allow rendering union types as multiple overrided builder methods
        if (tf.includes(' OR ')) {
            const choices = tf.split(' OR ');
            return choices.map((typ) => `${base}(${typ})`);
        }
        else {
            return [`${base}(${tf})`];
        }
    }
    formatInvocation(type, inputs, method) {
        let target = type.name;
        if (method) {
            target = `${target}.${method}`;
        }
        return `${target}(${this.formatInputs(inputs)})`;
    }
    ;
    isStruct(p) {
        return p.type.fqn ? p.system.findFqn(p.type.fqn).isDataType() : false;
    }
    isClassBuilderGenerated(callable) {
        if (callable.kind !== reflect.MemberKind.Initializer) {
            return false;
        }
        const parameters = callable.parameters.sort(this.optionalityCompare);
        const firstStruct = parameters.find((param) => this.isStruct(param));
        // no builder is generated if there is no struct parameter
        if (!firstStruct) {
            return false;
        }
        return true;
    }
    ;
    /**
     * Extracts the first struct out of a list of parameters (and throws
     * if there is none), removing it from the array.
     */
    extractFirstStruct(parameters) {
        const firstStruct = parameters.find((param) => this.isStruct(param));
        if (!firstStruct) {
            throw new Error('No struct found in parameter list.');
        }
        const struct = firstStruct.parentType.system.findInterface(firstStruct.type.fqn);
        parameters.splice(parameters.indexOf(firstStruct), 1);
        return struct;
    }
    formatProperty(name, typeReference) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        if (tf.includes(' OR ')) {
            return `public java.lang.Object get${toUpperCamelCase(name)}();`;
        }
        else {
            return `public ${tf} get${toUpperCamelCase(name)}();`;
        }
    }
}
exports.JavaTranspile = JavaTranspile;
//# sourceMappingURL=data:application/json;base64,