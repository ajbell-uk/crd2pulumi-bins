"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphTheme = void 0;
exports.getBaseTheme = getBaseTheme;
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const aws_arch_1 = require("../../../../aws-arch");
const cloneDeep = require("lodash.clonedeep"); // eslint-disable-line @typescript-eslint/no-require-imports
const theme_1 = require("./theme");
const fonts_1 = require("../../fonts");
const DEFAULT_RENDERING = {
    resourceIconMin: theme_1.GraphThemeRenderingIconTarget.DATA,
    resourceIconMax: theme_1.GraphThemeRenderingIconTarget.CATEGORY,
    cfnResourceIconMin: theme_1.GraphThemeRenderingIconTarget.DATA,
    cfnResourceIconMax: theme_1.GraphThemeRenderingIconTarget.SERVICE,
};
/** GraphTheme class is the implementation of diagram graph based theme */
class GraphTheme {
    /** Initializes the theme based on {@link aws_arch.Theme} definition */
    static init(config) {
        if (config == null || typeof config === "string") {
            this._instance = new GraphTheme(generateGraphThemeFromAwsTheme(aws_arch_1.aws_arch.resolveTheme(config)));
        }
        else if (Object.keys(config).length <= 2) {
            const { theme, rendering } = config;
            this._instance = new GraphTheme(generateGraphThemeFromAwsTheme(aws_arch_1.aws_arch.resolveTheme(theme), rendering));
        }
        else {
            this._instance = new GraphTheme(config);
        }
        return this.instance;
    }
    /** Get the current singleton instance for the theme being utilized for the diagram */
    static get instance() {
        if (this._instance == null) {
            throw new Error("Must init GraphTheme before requesting instance");
        }
        return this._instance;
    }
    /** @internal */
    constructor(theme) {
        this.rendering = theme.rendering;
        this.graph = theme.graph;
        this.subgraph = theme.subgraph;
        this.cluster = theme.cluster;
        this.node = theme.node;
        this.edge = theme.edge;
        this.cloud = theme.cloud;
        this.stage = theme.stage;
        this.stack = theme.stack;
        this.nestedStack = theme.nestedStack;
        this.imageNode = theme.imageNode;
        this.cfnResourceNode = theme.cfnResourceNode;
        this.resourceNode = theme.resourceNode;
        this.childLink = theme.childLink;
        this.referenceLink = theme.referenceLink;
        this.dependencyLink = theme.dependencyLink;
        this.awsTheme = theme.awsTheme;
    }
}
exports.GraphTheme = GraphTheme;
/** Get the base theme */
function getBaseTheme(rendering) {
    return cloneDeep({
        rendering: {
            ...DEFAULT_RENDERING,
            ...rendering,
        },
        graph: GRAPH_ATTRIBUTES,
        subgraph: SUBGRAPH_ATTRIBUTES,
        cluster: CLUSTER_ATTRIBUTES,
        node: NODE_ATTRIBUTES,
        edge: EDGE_ATTRIBUTES,
        cloud: CLOUD_ATTRIBUTES,
        stage: STAGE_ATTRIBUTES,
        stack: STACK_ATTRIBUTES,
        nestedStack: NESTED_STACK_ATTRIBUTES,
        imageNode: IMAGE_NODE_ATTRIBUTES,
        cfnResourceNode: CFN_RESOURCE_NODE_ATTRIBUTES,
        resourceNode: RESOURCE_NODE_ATTRIBUTES,
        childLink: CHILD_LINK_ATTRIBUTES,
        referenceLink: REFERENCE_LINK_ATTRIBUTES,
        dependencyLink: DEPENDENCY_LINK_ATTRIBUTES,
    });
}
/** Generate {@link IGraphTheme} from {@link aws_arch.Theme} */
function generateGraphThemeFromAwsTheme(awsTheme, rendering) {
    const theme = getBaseTheme(rendering);
    Object.assign(theme, {
        awsTheme,
    });
    Object.assign(theme.graph, {
        bgcolor: awsTheme.backgrounds.base,
        fontcolor: awsTheme.text.default,
    });
    Object.assign(theme.node, {
        fontcolor: awsTheme.text.primary,
    });
    Object.assign(theme.edge, awsArrowToEdgeAtts(awsTheme.arrows.default));
    // containers
    Object.assign(theme.cloud, awsGroupToSubgraphAtts(awsTheme.groups.cloud));
    Object.assign(theme.stage, awsGroupToSubgraphAtts(awsTheme.groups.awsAccount, true));
    Object.assign(theme.stack, awsGroupToSubgraphAtts(awsTheme.groups.genericAlt, true));
    Object.assign(theme.nestedStack, awsGroupToSubgraphAtts(awsTheme.groups.genericAlt, true));
    // nodes
    Object.assign(theme.cfnResourceNode, {
        color: awsTheme.text.secondary,
        fontcolor: awsTheme.text.secondary,
    });
    Object.assign(theme.resourceNode, {
        color: awsTheme.text.primary,
        fontcolor: awsTheme.text.primary,
    });
    Object.assign(theme.childLink, awsArrowToEdgeAtts(awsTheme.arrows.child));
    Object.assign(theme.referenceLink, awsArrowToEdgeAtts(awsTheme.arrows.reference));
    Object.assign(theme.dependencyLink, awsArrowToEdgeAtts(awsTheme.arrows.dependency));
    return theme;
}
/** Base graph attributes */
const GRAPH_ATTRIBUTES = {
    ...fonts_1.GraphFonts.REGULAR,
    center: true,
    compound: true,
    concentrate: true,
    dpi: 300,
    fontcolor: "#222222",
    fontnames: "ps",
    fontsize: 14,
    forcelabels: true,
    labelloc: "tc",
    nodesep: 0.8,
    pad: "%2,%1",
    // @ts-ignore
    rankdir: "TB",
    ranksep: 0.75,
    ratio: "compress",
    remincross: true,
    size: "%1024,%1024!",
    splines: "ortho",
    stylesheet: fonts_1.FONT_STYLESHEET,
};
/** Base subgraph attributes */
const SUBGRAPH_ATTRIBUTES = {
    ...fonts_1.GraphFonts.LIGHT_ITALIC,
    labelloc: "tc",
    fontsize: 12,
    style: "rounded,solid",
};
/** Base cluster attributes */
const CLUSTER_ATTRIBUTES = {
    ...fonts_1.GraphFonts.LIGHT,
    labelloc: "tc",
    fontsize: 12,
    style: "rounded,dashed",
};
/** Base cloud container attributes */
const CLOUD_ATTRIBUTES = {
    ...fonts_1.GraphFonts.BOLD,
    style: "solid",
};
/** Base stage attributes */
const STAGE_ATTRIBUTES = {
    ...fonts_1.GraphFonts.BOLD_ITALIC,
    style: "dashed",
    margin: 6,
    rank: "same",
};
/** Base stack attributes */
const STACK_ATTRIBUTES = {
    ...fonts_1.GraphFonts.LIGHT,
    style: "solid,bold,filled",
    fillcolor: "#5A6B861A", // 10%
    margin: 10,
};
/** Base nested stack attributes */
const NESTED_STACK_ATTRIBUTES = {
    ...fonts_1.GraphFonts.LIGHT_ITALIC,
    style: "solid,filled",
    fillcolor: "#5A6B861A", // 10%
    margin: 6,
};
/** Base node attributes */
const NODE_ATTRIBUTES = {
    ...fonts_1.GraphFonts.REGULAR,
    shape: "box",
    style: "solid",
    fixedsize: false,
    width: 0.25,
    height: 0.25,
    labelloc: "c",
    imagescale: true,
    fontsize: 10,
    penwidth: 0,
};
/** Base image based node attributes */
const IMAGE_NODE_ATTRIBUTES = {
    shape: "box",
    style: "solid,rounded",
    fixedsize: true,
    width: 1,
    height: 1,
    labelloc: "b",
    imagescale: true,
    imagepos: "tc",
    fillcolor: "transparent",
};
/** Base cfn resource node attributes */
const CFN_RESOURCE_NODE_ATTRIBUTES = {
    width: 1,
    height: 1,
    fixedsize: true,
    imagescale: true,
    style: "solid,rounded",
    color: "#999999",
    fontcolor: "#999999",
};
/** Base resource node attributes */
const RESOURCE_NODE_ATTRIBUTES = {
    width: 1,
    height: 1,
    fixedsize: true,
    imagescale: true,
    color: "#666666",
    fontcolor: "#666666",
};
/** Base edge attributes */
const EDGE_ATTRIBUTES = {
    ...fonts_1.GraphFonts.LIGHT_ITALIC,
    dir: "both",
    color: "#545B64",
    penwidth: 0.75,
    arrowhead: "dot",
    arrowtail: "dot",
    arrowsize: 0.5,
    fontsize: 9,
    style: "solid",
};
/** Base child link attributes */
const CHILD_LINK_ATTRIBUTES = {
    penwidth: 1,
    arrowhead: "none",
    arrowtail: "normal",
    arrowsize: 1,
    style: "solid",
};
/** Base reference link attributes */
const REFERENCE_LINK_ATTRIBUTES = {
    penwidth: 1,
    arrowhead: "none",
    arrowtail: "normal",
    arrowsize: 0.75,
    style: "solid",
};
/** Base dependency link attributes */
const DEPENDENCY_LINK_ATTRIBUTES = {
    penwidth: 0.75,
    arrowhead: "dot",
    arrowtail: "odot",
    arrowsize: 0.75,
    style: "dotted",
};
/** Convert {@link aws_arch.GroupFormat} to {@link Dot.SubgraphAttributesObject} */
function awsGroupToSubgraphAtts(group, ignoreStyle = false) {
    const attributes = {};
    if (!ignoreStyle) {
        if (group.borderStyle === "none") {
            attributes.style = "solid";
            attributes.penwidth = 0;
        }
        else {
            attributes.style = group.borderStyle;
        }
    }
    attributes.color = group.color || "transparent";
    attributes.bgcolor = group.bgcolor || "transparent";
    attributes.fillcolor = group.bgcolor || "transparent";
    attributes.pencolor = (group.borderColor || "transparent");
    if (group.color && group.color !== "transparent") {
        attributes.fontcolor = group.color;
    }
    return attributes;
}
/** Convert {@link aws_arch.ArrowFormat} to {@link Dot.EdgeAttributesObject} */
function awsArrowToEdgeAtts(arrow) {
    return {
        color: arrow.color,
        fontcolor: arrow.color,
        arrowtail: arrow.tail,
        arrowhead: arrow.head,
        penwidth: arrow.width,
        style: arrow.style,
    };
}
//# sourceMappingURL=data:application/json;base64,