"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Integration = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const integration_1 = require("./integration");
const integration_response_sets_1 = require("./integration-response-sets");
const utils_1 = require("../spec/utils");
/**
 * An S3 integration
 * @see https://docs.aws.amazon.com/apigateway/latest/developerguide/integrating-api-with-aws-services-s3.html
 */
class S3Integration extends integration_1.Integration {
    constructor(props) {
        super();
        this.executionRoleId = "S3IntegrationsExecutionRole";
        this.bucket = props.bucket;
        this.method = props.method;
        this.path = props.path;
        this.integrationResponseSet = props.integrationResponseSet;
        this.additionalRequestParameters = Object.fromEntries([
            ...(props.queryStringRequestParameters ?? []).map((param) => [
                `integration.request.path.${param}`,
                `method.request.querystring.${param}`,
            ]),
            ...(props.headerRequestParameters ?? []).map((header) => [
                `integration.request.path.${header}`,
                `method.request.header.${header}`,
            ]),
        ]);
    }
    isRole(construct) {
        return "roleArn" in construct && "grantPrincipal" in construct;
    }
    executionRole(scope) {
        // Retrieve or create the shared S3 execution role
        const existingExecutionRole = scope.node.tryFindChild(this.executionRoleId);
        if (existingExecutionRole) {
            if (this.isRole(existingExecutionRole)) {
                return existingExecutionRole;
            }
            throw new Error(`Found construct with ID ${this.executionRoleId} in API scope which was not a role`);
        }
        return new aws_iam_1.Role(scope, this.executionRoleId, {
            assumedBy: new aws_iam_1.ServicePrincipal("apigateway.amazonaws.com"),
        });
    }
    /**
     * Render the S3 integration as a snippet of OpenAPI
     */
    render(props) {
        return {
            type: "AWS",
            httpMethod: (this.method ?? props.method).toUpperCase(),
            uri: (0, utils_1.bucketInvocationUri)(this.bucket, this.path ?? props.path),
            credentials: this.executionRole(props.scope).roleArn,
            requestParameters: {
                // Add every path parameter to the integration request
                ...Object.fromEntries([...props.path.matchAll(/\{([^\}]*)\}/g)]
                    .map((m) => m[1])
                    .map((param) => [
                    `integration.request.path.${param}`,
                    `method.request.path.${param}`,
                ])),
                ...this.additionalRequestParameters,
            },
            responses: {
                ...(this.integrationResponseSet ??
                    integration_response_sets_1.IntegrationResponseSets.composite(integration_response_sets_1.IntegrationResponseSets.defaultPassthrough(), integration_response_sets_1.IntegrationResponseSets.s3JsonErrorMessage())).render(props),
            },
        };
    }
    /**
     * Grant API Gateway permissions to invoke the S3 bucket
     */
    grant({ scope, method, path }) {
        const executionRole = this.executionRole(scope);
        // Replace path parameters with * to grant access to arbitrary values for path parameters
        const permissionPath = (this.path ?? path).replace(/{[^\}]*\}/g, "*");
        // Grant read access for GET/HEAD/OPTIONS/TRACE, otherwise write
        if (["get", "head", "options", "trace"].includes((this.method ?? method).toLowerCase())) {
            this.bucket.grantRead(executionRole, permissionPath);
        }
        else {
            this.bucket.grantWrite(executionRole, permissionPath);
        }
    }
}
exports.S3Integration = S3Integration;
_a = JSII_RTTI_SYMBOL_1;
S3Integration[_a] = { fqn: "@aws/pdk.type_safe_api.S3Integration", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,