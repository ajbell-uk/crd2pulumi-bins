"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmithyProjectDefinition = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const path = require("path");
const projen_1 = require("projen");
const smithy_build_1 = require("projen/lib/smithy/smithy-build");
const smithy_build_gradle_file_1 = require("./components/smithy-build-gradle-file");
const smithy_settings_gradle_file_1 = require("./components/smithy-settings-gradle-file");
const version_1 = require("./version");
const generate_task_1 = require("../../codegen/components/generate-task");
const utils_1 = require("../../codegen/components/utils");
/**
 * Definition for a Smithy project
 */
class SmithyProjectDefinition extends projen_1.Component {
    constructor(project, options) {
        super(project);
        /**
         * Set of dependencies used to avoid adding duplicates
         */
        this.dependencySet = new Set();
        // Ignore gradle wrapper by default
        if (options.ignoreGradleWrapper ?? true) {
            project.gitignore.addPatterns("gradle");
            project.gitignore.addPatterns("gradlew");
            project.gitignore.addPatterns("gradlew.bat");
        }
        // Always ignore the .gradle dir which the wrapper downloads gradle into
        project.gitignore.addPatterns(".gradle");
        this.gradleProjectName = project.name.replace(/[\/\\:<>"?\*|]/g, "-");
        // Add settings.gradle
        new smithy_settings_gradle_file_1.SmithySettingsGradleFile(project, {
            gradleProjectName: this.gradleProjectName,
        });
        const modelDir = "src/main/smithy";
        this.modelDir = modelDir;
        // Always add the following required dependencies
        const requiredDependencies = [
            "software.amazon.smithy:smithy-cli",
            "software.amazon.smithy:smithy-model",
        ];
        // Ensure dependencies always include the required dependencies, allowing users to customise the version
        const userSpecifiedDependencies = options.smithyBuildOptions?.maven?.dependencies ?? [];
        const userSpecifiedDependencySet = new Set(userSpecifiedDependencies.map((dep) => dep.split(":").slice(0, -1).join(":")));
        const dependencies = [
            ...requiredDependencies
                .filter((requiredDep) => !userSpecifiedDependencySet.has(requiredDep))
                .map((dep) => `${dep}:${version_1.DEFAULT_SMITHY_VERSION}`),
            ...userSpecifiedDependencies,
        ];
        // Add build.gradle
        this.smithyBuildGradleFile = new smithy_build_gradle_file_1.SmithyBuildGradleFile(project, {
            modelDir,
            dependencies: [],
            repositoryUrls: options.smithyBuildOptions?.maven?.repositoryUrls,
        });
        // Create the smithy build json file
        this.smithyBuild = new smithy_build_1.SmithyBuild(project, {
            version: "2.0",
            ...options.smithyBuildOptions,
            sources: [
                modelDir,
                ...this.asRelativePathsToProject(options.smithyBuildOptions?.additionalSources ?? []),
            ],
            projections: {
                ...options.smithyBuildOptions?.projections,
            },
            maven: {
                dependencies: [],
                repositories: (options.smithyBuildOptions?.maven?.repositoryUrls ?? [
                    "https://repo.maven.apache.org/maven2/",
                    "file://~/.m2/repository",
                ]).map((url) => ({ url })),
            },
        });
        this.addDeps(...dependencies);
        const generateTask = generate_task_1.GenerateTask.ensure(project);
        // Copy the gradle files during build if they don't exist. We don't overwrite to allow users to BYO gradle wrapper
        // and set `ignoreGradleWrapper: false`.
        generateTask.exec((0, utils_1.buildTypeSafeApiExecCommand)(utils_1.TypeSafeApiScript.COPY_GRADLE_WRAPPER));
        // Build with gradle to generate smithy projections, and any other tasks
        generateTask.exec("./gradlew build");
        if (options.ignoreSmithyBuildOutput ?? true) {
            // Ignore the build directory, and smithy-output which was the old build directory for the cli-based generation
            project.gitignore.addPatterns("build", "smithy-output");
        }
    }
    /**
     * Add maven-style or local file dependencies to the smithy model project
     * @param deps dependencies to add, eg "software.amazon.smithy:smithy-validation-model:1.27.2" or "file://../some/path/build/lib/my-shapes.jar
     */
    addDeps(...deps) {
        const depsToAdd = deps.filter((dep) => !this.dependencySet.has(dep));
        depsToAdd.forEach((dep) => this.dependencySet.add(dep));
        this.smithyBuildGradleFile.addDeps(...depsToAdd);
        this.smithyBuild.addMavenDependencies(...depsToAdd.filter((dep) => !dep.startsWith(smithy_build_gradle_file_1.SmithyBuildGradleFile.fileDependencyPrefix)));
    }
    /**
     * Add dependencies on other smithy models, such that their shapes can be imported in this project
     * @param deps smithy definitions to depend on
     */
    addSmithyDeps(...deps) {
        this.addDeps(...deps.map((dep) => `${smithy_build_gradle_file_1.SmithyBuildGradleFile.fileDependencyPrefix}${path.join(path.relative(this.project.outdir, dep.project.outdir), "build", "libs", `${dep.gradleProjectName}.jar`)}`));
    }
    /**
     * Add additional paths to model source files or directories.
     * Paths should be relative to the project outdir. Any absolute paths will be
     * resolved as relative paths.
     */
    addSources(...sources) {
        const relativeSources = this.asRelativePathsToProject(sources);
        this.smithyBuild.addSources(...relativeSources);
        this.smithyBuildGradleFile.addSources(...relativeSources);
    }
    /**
     * Convert any given absolute paths to relative paths to the project outdir
     * @private
     */
    asRelativePathsToProject(paths) {
        return paths.map((p) => path.isAbsolute(p) ? path.relative(this.project.outdir, p) : p);
    }
}
exports.SmithyProjectDefinition = SmithyProjectDefinition;
_a = JSII_RTTI_SYMBOL_1;
SmithyProjectDefinition[_a] = { fqn: "@aws/pdk.type_safe_api.SmithyProjectDefinition", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,