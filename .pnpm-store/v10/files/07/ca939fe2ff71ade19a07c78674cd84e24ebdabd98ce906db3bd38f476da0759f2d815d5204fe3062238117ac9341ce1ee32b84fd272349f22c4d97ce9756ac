"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeSafeWebsocketApi = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const fs = require("fs");
const path = require("path");
const monorepo_1 = require("../../monorepo");
const pdk_nag_1 = require("../../pdk-nag");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
const aws_apigatewayv2_integrations_1 = require("aws-cdk-lib/aws-apigatewayv2-integrations");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const aws_s3_assets_1 = require("aws-cdk-lib/aws-s3-assets");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const websocket_schema_1 = require("./prepare-spec-event-handler/websocket-schema");
/**
 * A construct for creating a websocket API, based on the provided spec and integrations
 */
class TypeSafeWebsocketApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        (0, monorepo_1.addMetric)(scope, "type-safe-websocket-api");
        this._props = props;
        // Create the WebSocket API
        this.api = new aws_apigatewayv2_1.WebSocketApi(this, id, {
            ...props,
            routeSelectionExpression: "$request.body.route",
        });
        // Add the connect/disconnect routes
        this.addRoute("$connect", {
            integration: props.connect?.integration ??
                new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("ConnectIntegration"),
            authorizer: props.authorizer,
        });
        const disconnectRoute = this.addRoute("$disconnect", {
            integration: props.connect?.integration ??
                new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("DisconnectIntegration"),
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(disconnectRoute, ["AwsPrototyping-APIGWAuthorization", "AwsSolutions-APIG4"].map((ruleId) => ({
            id: ruleId,
            reason: `Authorizers only apply to the $connect route`,
        })), true);
        // Create a default stage
        this.defaultStage = new aws_apigatewayv2_1.WebSocketStage(this, "default", {
            webSocketApi: this.api,
            autoDeploy: true,
            stageName: "default",
            ...props.stageProps,
        });
        // Enable execution logs by default
        this.defaultStage.node.defaultChild.defaultRouteSettings = {
            loggingLevel: "INFO",
            dataTraceEnabled: false,
        };
        // Enable access logging by default
        if (!props.disableAccessLogging) {
            const logGroup = new aws_logs_1.LogGroup(this, `AccessLogs`);
            this.defaultStage.node.defaultChild.accessLogSettings = {
                destinationArn: logGroup.logGroupArn,
                format: `$context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId`,
            };
        }
        const lambdaHandlers = [
            ...Object.values(props.integrations),
            props.connect,
            props.disconnect,
        ].flatMap((integration) => integration?.integration instanceof aws_apigatewayv2_integrations_1.WebSocketLambdaIntegration &&
            integration.integration.handler?.grantPrincipal
            ? [integration.integration.handler]
            : []);
        const stack = aws_cdk_lib_1.Stack.of(this);
        // By default, grant lambda handlers access to the management api
        if (!props.disableGrantManagementAccessToLambdas) {
            lambdaHandlers.forEach((fn) => {
                this.defaultStage.grantManagementApiAccess(fn);
                cdk_nag_1.NagSuppressions.addResourceSuppressions(fn, ["AwsPrototyping-IAMNoWildcardPermissions", "AwsSolutions-IAM5"].map((ruleId) => ({
                    id: ruleId,
                    reason: "WebSocket handlers are granted permissions to manage arbitrary connections",
                    appliesTo: [
                        {
                            regex: `/^Resource::arn:${pdk_nag_1.PDKNag.getStackPartitionRegex(stack)}:execute-api:${pdk_nag_1.PDKNag.getStackRegionRegex(stack)}:${pdk_nag_1.PDKNag.getStackAccountRegex(stack)}:.*\\/${this.defaultStage.stageName}\\/\\*\\/@connections\\/\\*$/g`,
                        },
                    ],
                })), true);
            });
        }
        // Where the same function is used for multiple routes, grant permission for API gateway to invoke
        // the lambda for all routes
        const uniqueLambdaHandlers = new Set();
        const duplicateLambdaHandlers = new Set();
        lambdaHandlers.forEach((fn) => {
            if (uniqueLambdaHandlers.has(fn)) {
                duplicateLambdaHandlers.add(fn);
            }
            uniqueLambdaHandlers.add(fn);
        });
        [...duplicateLambdaHandlers].forEach((fn, i) => {
            new aws_lambda_1.CfnPermission(this, `GrantRouteInvoke${i}`, {
                action: "lambda:InvokeFunction",
                principal: "apigateway.amazonaws.com",
                functionName: fn.functionArn,
                sourceArn: stack.formatArn({
                    service: "execute-api",
                    resource: this.api.apiId,
                    resourceName: "*",
                }),
            });
        });
        // Read and parse the spec
        const spec = JSON.parse(fs.readFileSync(props.specPath, "utf-8"));
        // Map of route key to paths
        const serverOperationPaths = Object.fromEntries(Object.values(props.operationLookup).map((details) => [
            details.path.replace(/\//g, ""),
            details.path,
        ]));
        // Locally check that we can extract the schema for every operation
        const schemas = (0, websocket_schema_1.extractWebSocketSchemas)(Object.keys(serverOperationPaths), serverOperationPaths, spec);
        // Check that every operation has an integration
        const missingIntegrations = Object.keys(props.operationLookup).filter((operationId) => !props.integrations[operationId]);
        if (missingIntegrations.length > 0) {
            throw new Error(`Missing integrations for operations ${missingIntegrations.join(", ")}`);
        }
        // Create an asset for the spec, which we'll read from the custom resource
        const inputSpec = new aws_s3_assets_1.Asset(this, "InputSpec", {
            path: props.specPath,
        });
        // Function for managing schemas/models associated with routes
        const schemaHandler = new aws_lambda_1.Function(this, "SchemaHandler", {
            handler: "websocket-schema-handler.handler",
            runtime: aws_lambda_1.Runtime.NODEJS_20_X,
            code: aws_lambda_1.Code.fromAsset(path.join(__dirname, "./prepare-spec-event-handler")),
            timeout: aws_cdk_lib_1.Duration.minutes(1),
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(schemaHandler, ["AwsPrototyping-IAMNoManagedPolicies", "AwsSolutions-IAM4"].map((ruleId) => ({
            id: ruleId,
            reason: `AWSLambdaBasicExecutionRole grants minimal permissions required for lambda execution`,
        })), true);
        schemaHandler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ["s3:GetObject"],
            resources: [inputSpec.bucket.arnForObjects(inputSpec.s3ObjectKey)],
        }));
        schemaHandler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: [
                "apigateway:DELETE",
                "apigateway:PATCH",
                "apigateway:POST",
                "apigateway:GET",
            ],
            resources: [
                stack.formatArn({
                    service: "apigateway",
                    account: "",
                    resource: `/apis/${this.api.apiId}/models`,
                }),
                stack.formatArn({
                    service: "apigateway",
                    account: "",
                    resource: `/apis/${this.api.apiId}/models/*`,
                }),
            ],
        }));
        schemaHandler.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ["apigateway:PATCH", "apigateway:GET"],
            resources: [
                stack.formatArn({
                    service: "apigateway",
                    account: "",
                    resource: `/apis/${this.api.apiId}/routes`,
                }),
                stack.formatArn({
                    service: "apigateway",
                    account: "",
                    resource: `/apis/${this.api.apiId}/routes/*`,
                }),
            ],
        }));
        cdk_nag_1.NagSuppressions.addResourceSuppressions(schemaHandler, ["AwsPrototyping-IAMNoWildcardPermissions", "AwsSolutions-IAM5"].map((ruleId) => ({
            id: ruleId,
            reason: `Schema custom resource manages all routes and models`,
        })), true);
        const providerRole = new aws_iam_1.Role(this, "PrepareSpecProviderRole", {
            assumedBy: new aws_iam_1.ServicePrincipal("lambda.amazonaws.com"),
            inlinePolicies: {
                logs: new aws_iam_1.PolicyDocument({
                    statements: [
                        new aws_iam_1.PolicyStatement({
                            effect: aws_iam_1.Effect.ALLOW,
                            actions: [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                            ],
                            resources: [
                                `arn:aws:logs:${stack.region}:${stack.account}:log-group:/aws/lambda/*`,
                            ],
                        }),
                    ],
                }),
            },
        });
        const provider = new custom_resources_1.Provider(this, "SchemaProvider", {
            onEventHandler: schemaHandler,
            role: providerRole,
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(providerRole, ["AwsPrototyping-IAMNoWildcardPermissions", "AwsSolutions-IAM5"].map((ruleId) => ({
            id: ruleId,
            reason: `Custom resource provider may invoke arbitrary lambda versions`,
        })), true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(provider, ["AwsPrototyping-LambdaLatestVersion", "AwsSolutions-L1"].map((ruleId) => ({
            id: ruleId,
            reason: `Provider framework lambda is managed by CDK`,
        })), true);
        const schemaCustomResourceProperties = {
            apiId: this.api.apiId,
            inputSpecLocation: {
                bucket: inputSpec.s3BucketName,
                key: inputSpec.s3ObjectKey,
            },
            serverOperationPaths,
        };
        const schemaCustomResource = new aws_cdk_lib_1.CustomResource(this, "SchemaCustomResource", {
            serviceToken: provider.serviceToken,
            properties: schemaCustomResourceProperties,
        });
        // Add a route for every integration
        Object.entries(props.integrations).forEach(([operationId, integration]) => {
            const op = props.operationLookup[operationId];
            if (!op) {
                throw new Error(`Integration not found in operation lookup for operation ${operationId}`);
            }
            // Add the route
            const routeKey = op.path.replace(/\//g, "");
            const route = this.addRoute(routeKey, {
                integration: integration.integration,
            });
            cdk_nag_1.NagSuppressions.addResourceSuppressions(route, ["AwsPrototyping-APIGWAuthorization", "AwsSolutions-APIG4"].map((ruleId) => ({
                id: ruleId,
                reason: `Authorizers only apply to the $connect route`,
            })), true);
            // Associate the route with its corresponding schema (which is created by the custom resource)
            if (schemas[routeKey]) {
                route.node.defaultChild.requestModels = {
                    model: routeKey,
                };
                route.node.defaultChild.modelSelectionExpression =
                    "model";
            }
            route.node.addDependency(schemaCustomResource);
        });
    }
    /**
     * Add a route to the websocket api
     */
    addRoute(routeKey, options) {
        // Unless disableMockIntegrationResponses is true, we automatically configure the integration requests and responses
        // required to successfully mock the route, when the integration is a mock integration
        const shouldAddMockResponse = !this._props.disableMockIntegrationResponses &&
            options.integration instanceof aws_apigatewayv2_integrations_1.WebSocketMockIntegration;
        const route = this.api.addRoute(routeKey, {
            ...options,
            returnResponse: shouldAddMockResponse,
        });
        if (shouldAddMockResponse &&
            options.integration?.integration
                ?.integrationId) {
            const integration = options.integration
                ?.integration;
            integration.node.defaultChild.requestTemplates = {
                "application/json": '{"statusCode":200}',
            };
            new aws_apigatewayv2_1.CfnIntegrationResponse(this, `${routeKey}IntegRes`, {
                apiId: this.api.apiId,
                integrationId: integration.integrationId,
                integrationResponseKey: "/2\\d\\d/",
                templateSelectionExpression: "/2\\d\\d/",
                responseTemplates: {
                    "200": '{"statusCode":200}',
                },
            });
        }
        return route;
    }
}
exports.TypeSafeWebsocketApi = TypeSafeWebsocketApi;
_a = JSII_RTTI_SYMBOL_1;
TypeSafeWebsocketApi[_a] = { fqn: "@aws/pdk.type_safe_api.TypeSafeWebsocketApi", version: "0.26.14" };
//# sourceMappingURL=data:application/json;base64,