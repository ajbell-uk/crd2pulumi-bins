"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnSpec = void 0;
// AUTO-GENERATED - DO NOT EDIT
/* eslint-disable */
var CfnSpec;
(function (CfnSpec) {
    CfnSpec.ServiceNames = {
        ACMPCA: "ACMPCA",
        APS: "APS",
        ASK: "ASK",
        AccessAnalyzer: "AccessAnalyzer",
        AmazonMQ: "AmazonMQ",
        Amplify: "Amplify",
        AmplifyUIBuilder: "AmplifyUIBuilder",
        ApiGateway: "ApiGateway",
        ApiGatewayV2: "ApiGatewayV2",
        AppConfig: "AppConfig",
        AppFlow: "AppFlow",
        AppIntegrations: "AppIntegrations",
        AppMesh: "AppMesh",
        AppRunner: "AppRunner",
        AppStream: "AppStream",
        AppSync: "AppSync",
        ApplicationAutoScaling: "ApplicationAutoScaling",
        ApplicationInsights: "ApplicationInsights",
        Athena: "Athena",
        AuditManager: "AuditManager",
        AutoScaling: "AutoScaling",
        AutoScalingPlans: "AutoScalingPlans",
        Backup: "Backup",
        Batch: "Batch",
        BillingConductor: "BillingConductor",
        Budgets: "Budgets",
        CE: "CE",
        CUR: "CUR",
        Cassandra: "Cassandra",
        CertificateManager: "CertificateManager",
        Chatbot: "Chatbot",
        Cloud9: "Cloud9",
        CloudFormation: "CloudFormation",
        CloudFront: "CloudFront",
        CloudTrail: "CloudTrail",
        CloudWatch: "CloudWatch",
        CodeArtifact: "CodeArtifact",
        CodeBuild: "CodeBuild",
        CodeCommit: "CodeCommit",
        CodeDeploy: "CodeDeploy",
        CodeGuruProfiler: "CodeGuruProfiler",
        CodeGuruReviewer: "CodeGuruReviewer",
        CodePipeline: "CodePipeline",
        CodeStar: "CodeStar",
        CodeStarConnections: "CodeStarConnections",
        CodeStarNotifications: "CodeStarNotifications",
        Cognito: "Cognito",
        Comprehend: "Comprehend",
        Config: "Config",
        Connect: "Connect",
        ConnectCampaigns: "ConnectCampaigns",
        ControlTower: "ControlTower",
        CustomerProfiles: "CustomerProfiles",
        DAX: "DAX",
        DLM: "DLM",
        DMS: "DMS",
        DataBrew: "DataBrew",
        DataPipeline: "DataPipeline",
        DataSync: "DataSync",
        Detective: "Detective",
        DevOpsGuru: "DevOpsGuru",
        DeviceFarm: "DeviceFarm",
        DirectoryService: "DirectoryService",
        DocDB: "DocDB",
        DocDBElastic: "DocDBElastic",
        DynamoDB: "DynamoDB",
        EC2: "EC2",
        ECR: "ECR",
        ECS: "ECS",
        EFS: "EFS",
        EKS: "EKS",
        EMR: "EMR",
        EMRContainers: "EMRContainers",
        EMRServerless: "EMRServerless",
        ElastiCache: "ElastiCache",
        ElasticBeanstalk: "ElasticBeanstalk",
        ElasticLoadBalancing: "ElasticLoadBalancing",
        ElasticLoadBalancingV2: "ElasticLoadBalancingV2",
        Elasticsearch: "Elasticsearch",
        EventSchemas: "EventSchemas",
        Events: "Events",
        Evidently: "Evidently",
        FIS: "FIS",
        FMS: "FMS",
        FSx: "FSx",
        FinSpace: "FinSpace",
        Forecast: "Forecast",
        FraudDetector: "FraudDetector",
        GameLift: "GameLift",
        GlobalAccelerator: "GlobalAccelerator",
        Glue: "Glue",
        Grafana: "Grafana",
        Greengrass: "Greengrass",
        GreengrassV2: "GreengrassV2",
        GroundStation: "GroundStation",
        GuardDuty: "GuardDuty",
        HealthLake: "HealthLake",
        IAM: "IAM",
        IVS: "IVS",
        IVSChat: "IVSChat",
        IdentityStore: "IdentityStore",
        ImageBuilder: "ImageBuilder",
        Inspector: "Inspector",
        InspectorV2: "InspectorV2",
        InternetMonitor: "InternetMonitor",
        IoT: "IoT",
        IoT1Click: "IoT1Click",
        IoTAnalytics: "IoTAnalytics",
        IoTCoreDeviceAdvisor: "IoTCoreDeviceAdvisor",
        IoTEvents: "IoTEvents",
        IoTFleetHub: "IoTFleetHub",
        IoTFleetWise: "IoTFleetWise",
        IoTSiteWise: "IoTSiteWise",
        IoTThingsGraph: "IoTThingsGraph",
        IoTTwinMaker: "IoTTwinMaker",
        IoTWireless: "IoTWireless",
        KMS: "KMS",
        KafkaConnect: "KafkaConnect",
        Kendra: "Kendra",
        KendraRanking: "KendraRanking",
        Kinesis: "Kinesis",
        KinesisAnalytics: "KinesisAnalytics",
        KinesisAnalyticsV2: "KinesisAnalyticsV2",
        KinesisFirehose: "KinesisFirehose",
        KinesisVideo: "KinesisVideo",
        LakeFormation: "LakeFormation",
        Lambda: "Lambda",
        Lex: "Lex",
        LicenseManager: "LicenseManager",
        Lightsail: "Lightsail",
        Location: "Location",
        Logs: "Logs",
        LookoutEquipment: "LookoutEquipment",
        LookoutMetrics: "LookoutMetrics",
        LookoutVision: "LookoutVision",
        M2: "M2",
        MSK: "MSK",
        MWAA: "MWAA",
        Macie: "Macie",
        ManagedBlockchain: "ManagedBlockchain",
        MediaConnect: "MediaConnect",
        MediaConvert: "MediaConvert",
        MediaLive: "MediaLive",
        MediaPackage: "MediaPackage",
        MediaStore: "MediaStore",
        MediaTailor: "MediaTailor",
        MemoryDB: "MemoryDB",
        Neptune: "Neptune",
        NetworkFirewall: "NetworkFirewall",
        NetworkManager: "NetworkManager",
        NimbleStudio: "NimbleStudio",
        Oam: "Oam",
        Omics: "Omics",
        OpenSearchServerless: "OpenSearchServerless",
        OpenSearchService: "OpenSearchService",
        OpsWorks: "OpsWorks",
        OpsWorksCM: "OpsWorksCM",
        Organizations: "Organizations",
        Panorama: "Panorama",
        Personalize: "Personalize",
        Pinpoint: "Pinpoint",
        PinpointEmail: "PinpointEmail",
        Pipes: "Pipes",
        QLDB: "QLDB",
        QuickSight: "QuickSight",
        RAM: "RAM",
        RDS: "RDS",
        RUM: "RUM",
        Redshift: "Redshift",
        RedshiftServerless: "RedshiftServerless",
        RefactorSpaces: "RefactorSpaces",
        Rekognition: "Rekognition",
        ResilienceHub: "ResilienceHub",
        ResourceExplorer2: "ResourceExplorer2",
        ResourceGroups: "ResourceGroups",
        RoboMaker: "RoboMaker",
        RolesAnywhere: "RolesAnywhere",
        Route53: "Route53",
        Route53RecoveryControl: "Route53RecoveryControl",
        Route53RecoveryReadiness: "Route53RecoveryReadiness",
        Route53Resolver: "Route53Resolver",
        S3: "S3",
        S3ObjectLambda: "S3ObjectLambda",
        S3Outposts: "S3Outposts",
        SDB: "SDB",
        SES: "SES",
        SNS: "SNS",
        SQS: "SQS",
        SSM: "SSM",
        SSMContacts: "SSMContacts",
        SSMIncidents: "SSMIncidents",
        SSO: "SSO",
        SageMaker: "SageMaker",
        Scheduler: "Scheduler",
        SecretsManager: "SecretsManager",
        SecurityHub: "SecurityHub",
        Serverless: "Serverless",
        ServiceCatalog: "ServiceCatalog",
        ServiceCatalogAppRegistry: "ServiceCatalogAppRegistry",
        ServiceDiscovery: "ServiceDiscovery",
        Signer: "Signer",
        SimSpaceWeaver: "SimSpaceWeaver",
        StepFunctions: "StepFunctions",
        SupportApp: "SupportApp",
        Synthetics: "Synthetics",
        SystemsManagerSAP: "SystemsManagerSAP",
        Timestream: "Timestream",
        Transfer: "Transfer",
        VoiceID: "VoiceID",
        VpcLattice: "VpcLattice",
        WAF: "WAF",
        WAFRegional: "WAFRegional",
        WAFv2: "WAFv2",
        Wisdom: "Wisdom",
        WorkSpaces: "WorkSpaces",
        XRay: "XRay",
    };
    CfnSpec.ResourceTypes = [
        "AWS::ACMPCA::Certificate",
        "AWS::ACMPCA::CertificateAuthority",
        "AWS::ACMPCA::CertificateAuthorityActivation",
        "AWS::ACMPCA::Permission",
        "AWS::APS::RuleGroupsNamespace",
        "AWS::APS::Workspace",
        "AWS::AccessAnalyzer::Analyzer",
        "AWS::AmazonMQ::Broker",
        "AWS::AmazonMQ::Configuration",
        "AWS::AmazonMQ::ConfigurationAssociation",
        "AWS::Amplify::App",
        "AWS::Amplify::Branch",
        "AWS::Amplify::Domain",
        "AWS::AmplifyUIBuilder::Component",
        "AWS::AmplifyUIBuilder::Form",
        "AWS::AmplifyUIBuilder::Theme",
        "AWS::ApiGateway::Account",
        "AWS::ApiGateway::ApiKey",
        "AWS::ApiGateway::Authorizer",
        "AWS::ApiGateway::BasePathMapping",
        "AWS::ApiGateway::ClientCertificate",
        "AWS::ApiGateway::Deployment",
        "AWS::ApiGateway::DocumentationPart",
        "AWS::ApiGateway::DocumentationVersion",
        "AWS::ApiGateway::DomainName",
        "AWS::ApiGateway::GatewayResponse",
        "AWS::ApiGateway::Method",
        "AWS::ApiGateway::Model",
        "AWS::ApiGateway::RequestValidator",
        "AWS::ApiGateway::Resource",
        "AWS::ApiGateway::RestApi",
        "AWS::ApiGateway::Stage",
        "AWS::ApiGateway::UsagePlan",
        "AWS::ApiGateway::UsagePlanKey",
        "AWS::ApiGateway::VpcLink",
        "AWS::ApiGatewayV2::Api",
        "AWS::ApiGatewayV2::ApiGatewayManagedOverrides",
        "AWS::ApiGatewayV2::ApiMapping",
        "AWS::ApiGatewayV2::Authorizer",
        "AWS::ApiGatewayV2::Deployment",
        "AWS::ApiGatewayV2::DomainName",
        "AWS::ApiGatewayV2::Integration",
        "AWS::ApiGatewayV2::IntegrationResponse",
        "AWS::ApiGatewayV2::Model",
        "AWS::ApiGatewayV2::Route",
        "AWS::ApiGatewayV2::RouteResponse",
        "AWS::ApiGatewayV2::Stage",
        "AWS::ApiGatewayV2::VpcLink",
        "AWS::AppConfig::Application",
        "AWS::AppConfig::ConfigurationProfile",
        "AWS::AppConfig::Deployment",
        "AWS::AppConfig::DeploymentStrategy",
        "AWS::AppConfig::Environment",
        "AWS::AppConfig::HostedConfigurationVersion",
        "AWS::AppFlow::Connector",
        "AWS::AppFlow::ConnectorProfile",
        "AWS::AppFlow::Flow",
        "AWS::AppIntegrations::DataIntegration",
        "AWS::AppIntegrations::EventIntegration",
        "AWS::AppMesh::GatewayRoute",
        "AWS::AppMesh::Mesh",
        "AWS::AppMesh::Route",
        "AWS::AppMesh::VirtualGateway",
        "AWS::AppMesh::VirtualNode",
        "AWS::AppMesh::VirtualRouter",
        "AWS::AppMesh::VirtualService",
        "AWS::AppRunner::ObservabilityConfiguration",
        "AWS::AppRunner::Service",
        "AWS::AppRunner::VpcConnector",
        "AWS::AppRunner::VpcIngressConnection",
        "AWS::AppStream::AppBlock",
        "AWS::AppStream::Application",
        "AWS::AppStream::ApplicationEntitlementAssociation",
        "AWS::AppStream::ApplicationFleetAssociation",
        "AWS::AppStream::DirectoryConfig",
        "AWS::AppStream::Entitlement",
        "AWS::AppStream::Fleet",
        "AWS::AppStream::ImageBuilder",
        "AWS::AppStream::Stack",
        "AWS::AppStream::StackFleetAssociation",
        "AWS::AppStream::StackUserAssociation",
        "AWS::AppStream::User",
        "AWS::AppSync::ApiCache",
        "AWS::AppSync::ApiKey",
        "AWS::AppSync::DataSource",
        "AWS::AppSync::DomainName",
        "AWS::AppSync::DomainNameApiAssociation",
        "AWS::AppSync::FunctionConfiguration",
        "AWS::AppSync::GraphQLApi",
        "AWS::AppSync::GraphQLSchema",
        "AWS::AppSync::Resolver",
        "AWS::ApplicationAutoScaling::ScalableTarget",
        "AWS::ApplicationAutoScaling::ScalingPolicy",
        "AWS::ApplicationInsights::Application",
        "AWS::Athena::DataCatalog",
        "AWS::Athena::NamedQuery",
        "AWS::Athena::PreparedStatement",
        "AWS::Athena::WorkGroup",
        "AWS::AuditManager::Assessment",
        "AWS::AutoScaling::AutoScalingGroup",
        "AWS::AutoScaling::LaunchConfiguration",
        "AWS::AutoScaling::LifecycleHook",
        "AWS::AutoScaling::ScalingPolicy",
        "AWS::AutoScaling::ScheduledAction",
        "AWS::AutoScaling::WarmPool",
        "AWS::AutoScalingPlans::ScalingPlan",
        "AWS::Backup::BackupPlan",
        "AWS::Backup::BackupSelection",
        "AWS::Backup::BackupVault",
        "AWS::Backup::Framework",
        "AWS::Backup::ReportPlan",
        "AWS::Batch::ComputeEnvironment",
        "AWS::Batch::JobDefinition",
        "AWS::Batch::JobQueue",
        "AWS::Batch::SchedulingPolicy",
        "AWS::BillingConductor::BillingGroup",
        "AWS::BillingConductor::CustomLineItem",
        "AWS::BillingConductor::PricingPlan",
        "AWS::BillingConductor::PricingRule",
        "AWS::Budgets::Budget",
        "AWS::Budgets::BudgetsAction",
        "AWS::CE::AnomalyMonitor",
        "AWS::CE::AnomalySubscription",
        "AWS::CE::CostCategory",
        "AWS::CUR::ReportDefinition",
        "AWS::Cassandra::Keyspace",
        "AWS::Cassandra::Table",
        "AWS::CertificateManager::Account",
        "AWS::CertificateManager::Certificate",
        "AWS::Chatbot::MicrosoftTeamsChannelConfiguration",
        "AWS::Chatbot::SlackChannelConfiguration",
        "AWS::Cloud9::EnvironmentEC2",
        "AWS::CloudFormation::CustomResource",
        "AWS::CloudFormation::HookDefaultVersion",
        "AWS::CloudFormation::HookTypeConfig",
        "AWS::CloudFormation::HookVersion",
        "AWS::CloudFormation::Macro",
        "AWS::CloudFormation::ModuleDefaultVersion",
        "AWS::CloudFormation::ModuleVersion",
        "AWS::CloudFormation::PublicTypeVersion",
        "AWS::CloudFormation::Publisher",
        "AWS::CloudFormation::ResourceDefaultVersion",
        "AWS::CloudFormation::ResourceVersion",
        "AWS::CloudFormation::Stack",
        "AWS::CloudFormation::StackSet",
        "AWS::CloudFormation::TypeActivation",
        "AWS::CloudFormation::WaitCondition",
        "AWS::CloudFormation::WaitConditionHandle",
        "AWS::CloudFront::CachePolicy",
        "AWS::CloudFront::CloudFrontOriginAccessIdentity",
        "AWS::CloudFront::ContinuousDeploymentPolicy",
        "AWS::CloudFront::Distribution",
        "AWS::CloudFront::Function",
        "AWS::CloudFront::KeyGroup",
        "AWS::CloudFront::MonitoringSubscription",
        "AWS::CloudFront::OriginAccessControl",
        "AWS::CloudFront::OriginRequestPolicy",
        "AWS::CloudFront::PublicKey",
        "AWS::CloudFront::RealtimeLogConfig",
        "AWS::CloudFront::ResponseHeadersPolicy",
        "AWS::CloudFront::StreamingDistribution",
        "AWS::CloudTrail::Channel",
        "AWS::CloudTrail::EventDataStore",
        "AWS::CloudTrail::ResourcePolicy",
        "AWS::CloudTrail::Trail",
        "AWS::CloudWatch::Alarm",
        "AWS::CloudWatch::AnomalyDetector",
        "AWS::CloudWatch::CompositeAlarm",
        "AWS::CloudWatch::Dashboard",
        "AWS::CloudWatch::InsightRule",
        "AWS::CloudWatch::MetricStream",
        "AWS::CodeArtifact::Domain",
        "AWS::CodeArtifact::Repository",
        "AWS::CodeBuild::Project",
        "AWS::CodeBuild::ReportGroup",
        "AWS::CodeBuild::SourceCredential",
        "AWS::CodeCommit::Repository",
        "AWS::CodeDeploy::Application",
        "AWS::CodeDeploy::DeploymentConfig",
        "AWS::CodeDeploy::DeploymentGroup",
        "AWS::CodeGuruProfiler::ProfilingGroup",
        "AWS::CodeGuruReviewer::RepositoryAssociation",
        "AWS::CodePipeline::CustomActionType",
        "AWS::CodePipeline::Pipeline",
        "AWS::CodePipeline::Webhook",
        "AWS::CodeStar::GitHubRepository",
        "AWS::CodeStarConnections::Connection",
        "AWS::CodeStarNotifications::NotificationRule",
        "AWS::Cognito::IdentityPool",
        "AWS::Cognito::IdentityPoolRoleAttachment",
        "AWS::Cognito::UserPool",
        "AWS::Cognito::UserPoolClient",
        "AWS::Cognito::UserPoolDomain",
        "AWS::Cognito::UserPoolGroup",
        "AWS::Cognito::UserPoolIdentityProvider",
        "AWS::Cognito::UserPoolResourceServer",
        "AWS::Cognito::UserPoolRiskConfigurationAttachment",
        "AWS::Cognito::UserPoolUICustomizationAttachment",
        "AWS::Cognito::UserPoolUser",
        "AWS::Cognito::UserPoolUserToGroupAttachment",
        "AWS::Comprehend::Flywheel",
        "AWS::Config::AggregationAuthorization",
        "AWS::Config::ConfigRule",
        "AWS::Config::ConfigurationAggregator",
        "AWS::Config::ConfigurationRecorder",
        "AWS::Config::ConformancePack",
        "AWS::Config::DeliveryChannel",
        "AWS::Config::OrganizationConfigRule",
        "AWS::Config::OrganizationConformancePack",
        "AWS::Config::RemediationConfiguration",
        "AWS::Config::StoredQuery",
        "AWS::Connect::ApprovedOrigin",
        "AWS::Connect::ContactFlow",
        "AWS::Connect::ContactFlowModule",
        "AWS::Connect::HoursOfOperation",
        "AWS::Connect::Instance",
        "AWS::Connect::InstanceStorageConfig",
        "AWS::Connect::IntegrationAssociation",
        "AWS::Connect::PhoneNumber",
        "AWS::Connect::QuickConnect",
        "AWS::Connect::Rule",
        "AWS::Connect::SecurityKey",
        "AWS::Connect::TaskTemplate",
        "AWS::Connect::User",
        "AWS::Connect::UserHierarchyGroup",
        "AWS::ConnectCampaigns::Campaign",
        "AWS::ControlTower::EnabledControl",
        "AWS::CustomerProfiles::Domain",
        "AWS::CustomerProfiles::Integration",
        "AWS::CustomerProfiles::ObjectType",
        "AWS::DAX::Cluster",
        "AWS::DAX::ParameterGroup",
        "AWS::DAX::SubnetGroup",
        "AWS::DLM::LifecyclePolicy",
        "AWS::DMS::Certificate",
        "AWS::DMS::Endpoint",
        "AWS::DMS::EventSubscription",
        "AWS::DMS::ReplicationInstance",
        "AWS::DMS::ReplicationSubnetGroup",
        "AWS::DMS::ReplicationTask",
        "AWS::DataBrew::Dataset",
        "AWS::DataBrew::Job",
        "AWS::DataBrew::Project",
        "AWS::DataBrew::Recipe",
        "AWS::DataBrew::Ruleset",
        "AWS::DataBrew::Schedule",
        "AWS::DataPipeline::Pipeline",
        "AWS::DataSync::Agent",
        "AWS::DataSync::LocationEFS",
        "AWS::DataSync::LocationFSxLustre",
        "AWS::DataSync::LocationFSxONTAP",
        "AWS::DataSync::LocationFSxOpenZFS",
        "AWS::DataSync::LocationFSxWindows",
        "AWS::DataSync::LocationHDFS",
        "AWS::DataSync::LocationNFS",
        "AWS::DataSync::LocationObjectStorage",
        "AWS::DataSync::LocationS3",
        "AWS::DataSync::LocationSMB",
        "AWS::DataSync::Task",
        "AWS::Detective::Graph",
        "AWS::Detective::MemberInvitation",
        "AWS::DevOpsGuru::NotificationChannel",
        "AWS::DevOpsGuru::ResourceCollection",
        "AWS::DeviceFarm::DevicePool",
        "AWS::DeviceFarm::InstanceProfile",
        "AWS::DeviceFarm::NetworkProfile",
        "AWS::DeviceFarm::Project",
        "AWS::DeviceFarm::TestGridProject",
        "AWS::DeviceFarm::VPCEConfiguration",
        "AWS::DirectoryService::MicrosoftAD",
        "AWS::DirectoryService::SimpleAD",
        "AWS::DocDB::DBCluster",
        "AWS::DocDB::DBClusterParameterGroup",
        "AWS::DocDB::DBInstance",
        "AWS::DocDB::DBSubnetGroup",
        "AWS::DocDBElastic::Cluster",
        "AWS::DynamoDB::GlobalTable",
        "AWS::DynamoDB::Table",
        "AWS::EC2::CapacityReservation",
        "AWS::EC2::CapacityReservationFleet",
        "AWS::EC2::CarrierGateway",
        "AWS::EC2::ClientVpnAuthorizationRule",
        "AWS::EC2::ClientVpnEndpoint",
        "AWS::EC2::ClientVpnRoute",
        "AWS::EC2::ClientVpnTargetNetworkAssociation",
        "AWS::EC2::CustomerGateway",
        "AWS::EC2::DHCPOptions",
        "AWS::EC2::EC2Fleet",
        "AWS::EC2::EIP",
        "AWS::EC2::EIPAssociation",
        "AWS::EC2::EgressOnlyInternetGateway",
        "AWS::EC2::EnclaveCertificateIamRoleAssociation",
        "AWS::EC2::FlowLog",
        "AWS::EC2::GatewayRouteTableAssociation",
        "AWS::EC2::Host",
        "AWS::EC2::IPAM",
        "AWS::EC2::IPAMAllocation",
        "AWS::EC2::IPAMPool",
        "AWS::EC2::IPAMPoolCidr",
        "AWS::EC2::IPAMResourceDiscovery",
        "AWS::EC2::IPAMResourceDiscoveryAssociation",
        "AWS::EC2::IPAMScope",
        "AWS::EC2::Instance",
        "AWS::EC2::InternetGateway",
        "AWS::EC2::KeyPair",
        "AWS::EC2::LaunchTemplate",
        "AWS::EC2::LocalGatewayRoute",
        "AWS::EC2::LocalGatewayRouteTable",
        "AWS::EC2::LocalGatewayRouteTableVPCAssociation",
        "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
        "AWS::EC2::NatGateway",
        "AWS::EC2::NetworkAcl",
        "AWS::EC2::NetworkAclEntry",
        "AWS::EC2::NetworkInsightsAccessScope",
        "AWS::EC2::NetworkInsightsAccessScopeAnalysis",
        "AWS::EC2::NetworkInsightsAnalysis",
        "AWS::EC2::NetworkInsightsPath",
        "AWS::EC2::NetworkInterface",
        "AWS::EC2::NetworkInterfaceAttachment",
        "AWS::EC2::NetworkInterfacePermission",
        "AWS::EC2::NetworkPerformanceMetricSubscription",
        "AWS::EC2::PlacementGroup",
        "AWS::EC2::PrefixList",
        "AWS::EC2::Route",
        "AWS::EC2::RouteTable",
        "AWS::EC2::SecurityGroup",
        "AWS::EC2::SecurityGroupEgress",
        "AWS::EC2::SecurityGroupIngress",
        "AWS::EC2::SpotFleet",
        "AWS::EC2::Subnet",
        "AWS::EC2::SubnetCidrBlock",
        "AWS::EC2::SubnetNetworkAclAssociation",
        "AWS::EC2::SubnetRouteTableAssociation",
        "AWS::EC2::TrafficMirrorFilter",
        "AWS::EC2::TrafficMirrorFilterRule",
        "AWS::EC2::TrafficMirrorSession",
        "AWS::EC2::TrafficMirrorTarget",
        "AWS::EC2::TransitGateway",
        "AWS::EC2::TransitGatewayAttachment",
        "AWS::EC2::TransitGatewayConnect",
        "AWS::EC2::TransitGatewayMulticastDomain",
        "AWS::EC2::TransitGatewayMulticastDomainAssociation",
        "AWS::EC2::TransitGatewayMulticastGroupMember",
        "AWS::EC2::TransitGatewayMulticastGroupSource",
        "AWS::EC2::TransitGatewayPeeringAttachment",
        "AWS::EC2::TransitGatewayRoute",
        "AWS::EC2::TransitGatewayRouteTable",
        "AWS::EC2::TransitGatewayRouteTableAssociation",
        "AWS::EC2::TransitGatewayRouteTablePropagation",
        "AWS::EC2::TransitGatewayVpcAttachment",
        "AWS::EC2::VPC",
        "AWS::EC2::VPCCidrBlock",
        "AWS::EC2::VPCDHCPOptionsAssociation",
        "AWS::EC2::VPCEndpoint",
        "AWS::EC2::VPCEndpointConnectionNotification",
        "AWS::EC2::VPCEndpointService",
        "AWS::EC2::VPCEndpointServicePermissions",
        "AWS::EC2::VPCGatewayAttachment",
        "AWS::EC2::VPCPeeringConnection",
        "AWS::EC2::VPNConnection",
        "AWS::EC2::VPNConnectionRoute",
        "AWS::EC2::VPNGateway",
        "AWS::EC2::VPNGatewayRoutePropagation",
        "AWS::EC2::Volume",
        "AWS::EC2::VolumeAttachment",
        "AWS::ECR::PublicRepository",
        "AWS::ECR::PullThroughCacheRule",
        "AWS::ECR::RegistryPolicy",
        "AWS::ECR::ReplicationConfiguration",
        "AWS::ECR::Repository",
        "AWS::ECS::CapacityProvider",
        "AWS::ECS::Cluster",
        "AWS::ECS::ClusterCapacityProviderAssociations",
        "AWS::ECS::PrimaryTaskSet",
        "AWS::ECS::Service",
        "AWS::ECS::TaskDefinition",
        "AWS::ECS::TaskSet",
        "AWS::EFS::AccessPoint",
        "AWS::EFS::FileSystem",
        "AWS::EFS::MountTarget",
        "AWS::EKS::Addon",
        "AWS::EKS::Cluster",
        "AWS::EKS::FargateProfile",
        "AWS::EKS::IdentityProviderConfig",
        "AWS::EKS::Nodegroup",
        "AWS::EMR::Cluster",
        "AWS::EMR::InstanceFleetConfig",
        "AWS::EMR::InstanceGroupConfig",
        "AWS::EMR::SecurityConfiguration",
        "AWS::EMR::Step",
        "AWS::EMR::Studio",
        "AWS::EMR::StudioSessionMapping",
        "AWS::EMRContainers::VirtualCluster",
        "AWS::EMRServerless::Application",
        "AWS::ElastiCache::CacheCluster",
        "AWS::ElastiCache::GlobalReplicationGroup",
        "AWS::ElastiCache::ParameterGroup",
        "AWS::ElastiCache::ReplicationGroup",
        "AWS::ElastiCache::SecurityGroup",
        "AWS::ElastiCache::SecurityGroupIngress",
        "AWS::ElastiCache::SubnetGroup",
        "AWS::ElastiCache::User",
        "AWS::ElastiCache::UserGroup",
        "AWS::ElasticBeanstalk::Application",
        "AWS::ElasticBeanstalk::ApplicationVersion",
        "AWS::ElasticBeanstalk::ConfigurationTemplate",
        "AWS::ElasticBeanstalk::Environment",
        "AWS::ElasticLoadBalancing::LoadBalancer",
        "AWS::ElasticLoadBalancingV2::Listener",
        "AWS::ElasticLoadBalancingV2::ListenerCertificate",
        "AWS::ElasticLoadBalancingV2::ListenerRule",
        "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "AWS::ElasticLoadBalancingV2::TargetGroup",
        "AWS::Elasticsearch::Domain",
        "AWS::EventSchemas::Discoverer",
        "AWS::EventSchemas::Registry",
        "AWS::EventSchemas::RegistryPolicy",
        "AWS::EventSchemas::Schema",
        "AWS::Events::ApiDestination",
        "AWS::Events::Archive",
        "AWS::Events::Connection",
        "AWS::Events::Endpoint",
        "AWS::Events::EventBus",
        "AWS::Events::EventBusPolicy",
        "AWS::Events::Rule",
        "AWS::Evidently::Experiment",
        "AWS::Evidently::Feature",
        "AWS::Evidently::Launch",
        "AWS::Evidently::Project",
        "AWS::Evidently::Segment",
        "AWS::FIS::ExperimentTemplate",
        "AWS::FMS::NotificationChannel",
        "AWS::FMS::Policy",
        "AWS::FMS::ResourceSet",
        "AWS::FSx::DataRepositoryAssociation",
        "AWS::FSx::FileSystem",
        "AWS::FSx::Snapshot",
        "AWS::FSx::StorageVirtualMachine",
        "AWS::FSx::Volume",
        "AWS::FinSpace::Environment",
        "AWS::Forecast::Dataset",
        "AWS::Forecast::DatasetGroup",
        "AWS::FraudDetector::Detector",
        "AWS::FraudDetector::EntityType",
        "AWS::FraudDetector::EventType",
        "AWS::FraudDetector::Label",
        "AWS::FraudDetector::Outcome",
        "AWS::FraudDetector::Variable",
        "AWS::GameLift::Alias",
        "AWS::GameLift::Build",
        "AWS::GameLift::Fleet",
        "AWS::GameLift::GameServerGroup",
        "AWS::GameLift::GameSessionQueue",
        "AWS::GameLift::Location",
        "AWS::GameLift::MatchmakingConfiguration",
        "AWS::GameLift::MatchmakingRuleSet",
        "AWS::GameLift::Script",
        "AWS::GlobalAccelerator::Accelerator",
        "AWS::GlobalAccelerator::EndpointGroup",
        "AWS::GlobalAccelerator::Listener",
        "AWS::Glue::Classifier",
        "AWS::Glue::Connection",
        "AWS::Glue::Crawler",
        "AWS::Glue::DataCatalogEncryptionSettings",
        "AWS::Glue::Database",
        "AWS::Glue::DevEndpoint",
        "AWS::Glue::Job",
        "AWS::Glue::MLTransform",
        "AWS::Glue::Partition",
        "AWS::Glue::Registry",
        "AWS::Glue::Schema",
        "AWS::Glue::SchemaVersion",
        "AWS::Glue::SchemaVersionMetadata",
        "AWS::Glue::SecurityConfiguration",
        "AWS::Glue::Table",
        "AWS::Glue::Trigger",
        "AWS::Glue::Workflow",
        "AWS::Grafana::Workspace",
        "AWS::Greengrass::ConnectorDefinition",
        "AWS::Greengrass::ConnectorDefinitionVersion",
        "AWS::Greengrass::CoreDefinition",
        "AWS::Greengrass::CoreDefinitionVersion",
        "AWS::Greengrass::DeviceDefinition",
        "AWS::Greengrass::DeviceDefinitionVersion",
        "AWS::Greengrass::FunctionDefinition",
        "AWS::Greengrass::FunctionDefinitionVersion",
        "AWS::Greengrass::Group",
        "AWS::Greengrass::GroupVersion",
        "AWS::Greengrass::LoggerDefinition",
        "AWS::Greengrass::LoggerDefinitionVersion",
        "AWS::Greengrass::ResourceDefinition",
        "AWS::Greengrass::ResourceDefinitionVersion",
        "AWS::Greengrass::SubscriptionDefinition",
        "AWS::Greengrass::SubscriptionDefinitionVersion",
        "AWS::GreengrassV2::ComponentVersion",
        "AWS::GreengrassV2::Deployment",
        "AWS::GroundStation::Config",
        "AWS::GroundStation::DataflowEndpointGroup",
        "AWS::GroundStation::MissionProfile",
        "AWS::GuardDuty::Detector",
        "AWS::GuardDuty::Filter",
        "AWS::GuardDuty::IPSet",
        "AWS::GuardDuty::Master",
        "AWS::GuardDuty::Member",
        "AWS::GuardDuty::ThreatIntelSet",
        "AWS::HealthLake::FHIRDatastore",
        "AWS::IAM::AccessKey",
        "AWS::IAM::Group",
        "AWS::IAM::InstanceProfile",
        "AWS::IAM::ManagedPolicy",
        "AWS::IAM::OIDCProvider",
        "AWS::IAM::Policy",
        "AWS::IAM::Role",
        "AWS::IAM::SAMLProvider",
        "AWS::IAM::ServerCertificate",
        "AWS::IAM::ServiceLinkedRole",
        "AWS::IAM::User",
        "AWS::IAM::UserToGroupAddition",
        "AWS::IAM::VirtualMFADevice",
        "AWS::IVS::Channel",
        "AWS::IVS::PlaybackKeyPair",
        "AWS::IVS::RecordingConfiguration",
        "AWS::IVS::StreamKey",
        "AWS::IVSChat::LoggingConfiguration",
        "AWS::IVSChat::Room",
        "AWS::IdentityStore::Group",
        "AWS::IdentityStore::GroupMembership",
        "AWS::ImageBuilder::Component",
        "AWS::ImageBuilder::ContainerRecipe",
        "AWS::ImageBuilder::DistributionConfiguration",
        "AWS::ImageBuilder::Image",
        "AWS::ImageBuilder::ImagePipeline",
        "AWS::ImageBuilder::ImageRecipe",
        "AWS::ImageBuilder::InfrastructureConfiguration",
        "AWS::Inspector::AssessmentTarget",
        "AWS::Inspector::AssessmentTemplate",
        "AWS::Inspector::ResourceGroup",
        "AWS::InspectorV2::Filter",
        "AWS::InternetMonitor::Monitor",
        "AWS::IoT1Click::Device",
        "AWS::IoT1Click::Placement",
        "AWS::IoT1Click::Project",
        "AWS::IoT::AccountAuditConfiguration",
        "AWS::IoT::Authorizer",
        "AWS::IoT::CACertificate",
        "AWS::IoT::Certificate",
        "AWS::IoT::CustomMetric",
        "AWS::IoT::Dimension",
        "AWS::IoT::DomainConfiguration",
        "AWS::IoT::FleetMetric",
        "AWS::IoT::JobTemplate",
        "AWS::IoT::Logging",
        "AWS::IoT::MitigationAction",
        "AWS::IoT::Policy",
        "AWS::IoT::PolicyPrincipalAttachment",
        "AWS::IoT::ProvisioningTemplate",
        "AWS::IoT::ResourceSpecificLogging",
        "AWS::IoT::RoleAlias",
        "AWS::IoT::ScheduledAudit",
        "AWS::IoT::SecurityProfile",
        "AWS::IoT::Thing",
        "AWS::IoT::ThingPrincipalAttachment",
        "AWS::IoT::TopicRule",
        "AWS::IoT::TopicRuleDestination",
        "AWS::IoTAnalytics::Channel",
        "AWS::IoTAnalytics::Dataset",
        "AWS::IoTAnalytics::Datastore",
        "AWS::IoTAnalytics::Pipeline",
        "AWS::IoTCoreDeviceAdvisor::SuiteDefinition",
        "AWS::IoTEvents::AlarmModel",
        "AWS::IoTEvents::DetectorModel",
        "AWS::IoTEvents::Input",
        "AWS::IoTFleetHub::Application",
        "AWS::IoTFleetWise::Campaign",
        "AWS::IoTFleetWise::DecoderManifest",
        "AWS::IoTFleetWise::Fleet",
        "AWS::IoTFleetWise::ModelManifest",
        "AWS::IoTFleetWise::SignalCatalog",
        "AWS::IoTFleetWise::Vehicle",
        "AWS::IoTSiteWise::AccessPolicy",
        "AWS::IoTSiteWise::Asset",
        "AWS::IoTSiteWise::AssetModel",
        "AWS::IoTSiteWise::Dashboard",
        "AWS::IoTSiteWise::Gateway",
        "AWS::IoTSiteWise::Portal",
        "AWS::IoTSiteWise::Project",
        "AWS::IoTThingsGraph::FlowTemplate",
        "AWS::IoTTwinMaker::ComponentType",
        "AWS::IoTTwinMaker::Entity",
        "AWS::IoTTwinMaker::Scene",
        "AWS::IoTTwinMaker::SyncJob",
        "AWS::IoTTwinMaker::Workspace",
        "AWS::IoTWireless::Destination",
        "AWS::IoTWireless::DeviceProfile",
        "AWS::IoTWireless::FuotaTask",
        "AWS::IoTWireless::MulticastGroup",
        "AWS::IoTWireless::NetworkAnalyzerConfiguration",
        "AWS::IoTWireless::PartnerAccount",
        "AWS::IoTWireless::ServiceProfile",
        "AWS::IoTWireless::TaskDefinition",
        "AWS::IoTWireless::WirelessDevice",
        "AWS::IoTWireless::WirelessGateway",
        "AWS::KMS::Alias",
        "AWS::KMS::Key",
        "AWS::KMS::ReplicaKey",
        "AWS::KafkaConnect::Connector",
        "AWS::Kendra::DataSource",
        "AWS::Kendra::Faq",
        "AWS::Kendra::Index",
        "AWS::KendraRanking::ExecutionPlan",
        "AWS::Kinesis::Stream",
        "AWS::Kinesis::StreamConsumer",
        "AWS::KinesisAnalytics::Application",
        "AWS::KinesisAnalytics::ApplicationOutput",
        "AWS::KinesisAnalytics::ApplicationReferenceDataSource",
        "AWS::KinesisAnalyticsV2::Application",
        "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
        "AWS::KinesisAnalyticsV2::ApplicationOutput",
        "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource",
        "AWS::KinesisFirehose::DeliveryStream",
        "AWS::KinesisVideo::SignalingChannel",
        "AWS::KinesisVideo::Stream",
        "AWS::LakeFormation::DataCellsFilter",
        "AWS::LakeFormation::DataLakeSettings",
        "AWS::LakeFormation::Permissions",
        "AWS::LakeFormation::PrincipalPermissions",
        "AWS::LakeFormation::Resource",
        "AWS::LakeFormation::Tag",
        "AWS::LakeFormation::TagAssociation",
        "AWS::Lambda::Alias",
        "AWS::Lambda::CodeSigningConfig",
        "AWS::Lambda::EventInvokeConfig",
        "AWS::Lambda::EventSourceMapping",
        "AWS::Lambda::Function",
        "AWS::Lambda::LayerVersion",
        "AWS::Lambda::LayerVersionPermission",
        "AWS::Lambda::Permission",
        "AWS::Lambda::Url",
        "AWS::Lambda::Version",
        "AWS::Lex::Bot",
        "AWS::Lex::BotAlias",
        "AWS::Lex::BotVersion",
        "AWS::Lex::ResourcePolicy",
        "AWS::LicenseManager::Grant",
        "AWS::LicenseManager::License",
        "AWS::Lightsail::Alarm",
        "AWS::Lightsail::Bucket",
        "AWS::Lightsail::Certificate",
        "AWS::Lightsail::Container",
        "AWS::Lightsail::Database",
        "AWS::Lightsail::Disk",
        "AWS::Lightsail::Distribution",
        "AWS::Lightsail::Instance",
        "AWS::Lightsail::LoadBalancer",
        "AWS::Lightsail::LoadBalancerTlsCertificate",
        "AWS::Lightsail::StaticIp",
        "AWS::Location::GeofenceCollection",
        "AWS::Location::Map",
        "AWS::Location::PlaceIndex",
        "AWS::Location::RouteCalculator",
        "AWS::Location::Tracker",
        "AWS::Location::TrackerConsumer",
        "AWS::Logs::Destination",
        "AWS::Logs::LogGroup",
        "AWS::Logs::LogStream",
        "AWS::Logs::MetricFilter",
        "AWS::Logs::QueryDefinition",
        "AWS::Logs::ResourcePolicy",
        "AWS::Logs::SubscriptionFilter",
        "AWS::LookoutEquipment::InferenceScheduler",
        "AWS::LookoutMetrics::Alert",
        "AWS::LookoutMetrics::AnomalyDetector",
        "AWS::LookoutVision::Project",
        "AWS::M2::Application",
        "AWS::M2::Environment",
        "AWS::MSK::BatchScramSecret",
        "AWS::MSK::Cluster",
        "AWS::MSK::Configuration",
        "AWS::MSK::ServerlessCluster",
        "AWS::MWAA::Environment",
        "AWS::Macie::AllowList",
        "AWS::Macie::CustomDataIdentifier",
        "AWS::Macie::FindingsFilter",
        "AWS::Macie::Session",
        "AWS::ManagedBlockchain::Accessor",
        "AWS::ManagedBlockchain::Member",
        "AWS::ManagedBlockchain::Node",
        "AWS::MediaConnect::Flow",
        "AWS::MediaConnect::FlowEntitlement",
        "AWS::MediaConnect::FlowOutput",
        "AWS::MediaConnect::FlowSource",
        "AWS::MediaConnect::FlowVpcInterface",
        "AWS::MediaConvert::JobTemplate",
        "AWS::MediaConvert::Preset",
        "AWS::MediaConvert::Queue",
        "AWS::MediaLive::Channel",
        "AWS::MediaLive::Input",
        "AWS::MediaLive::InputSecurityGroup",
        "AWS::MediaPackage::Asset",
        "AWS::MediaPackage::Channel",
        "AWS::MediaPackage::OriginEndpoint",
        "AWS::MediaPackage::PackagingConfiguration",
        "AWS::MediaPackage::PackagingGroup",
        "AWS::MediaStore::Container",
        "AWS::MediaTailor::PlaybackConfiguration",
        "AWS::MemoryDB::ACL",
        "AWS::MemoryDB::Cluster",
        "AWS::MemoryDB::ParameterGroup",
        "AWS::MemoryDB::SubnetGroup",
        "AWS::MemoryDB::User",
        "AWS::Neptune::DBCluster",
        "AWS::Neptune::DBClusterParameterGroup",
        "AWS::Neptune::DBInstance",
        "AWS::Neptune::DBParameterGroup",
        "AWS::Neptune::DBSubnetGroup",
        "AWS::NetworkFirewall::Firewall",
        "AWS::NetworkFirewall::FirewallPolicy",
        "AWS::NetworkFirewall::LoggingConfiguration",
        "AWS::NetworkFirewall::RuleGroup",
        "AWS::NetworkManager::ConnectAttachment",
        "AWS::NetworkManager::ConnectPeer",
        "AWS::NetworkManager::CoreNetwork",
        "AWS::NetworkManager::CustomerGatewayAssociation",
        "AWS::NetworkManager::Device",
        "AWS::NetworkManager::GlobalNetwork",
        "AWS::NetworkManager::Link",
        "AWS::NetworkManager::LinkAssociation",
        "AWS::NetworkManager::Site",
        "AWS::NetworkManager::SiteToSiteVpnAttachment",
        "AWS::NetworkManager::TransitGatewayPeering",
        "AWS::NetworkManager::TransitGatewayRegistration",
        "AWS::NetworkManager::TransitGatewayRouteTableAttachment",
        "AWS::NetworkManager::VpcAttachment",
        "AWS::NimbleStudio::LaunchProfile",
        "AWS::NimbleStudio::StreamingImage",
        "AWS::NimbleStudio::Studio",
        "AWS::NimbleStudio::StudioComponent",
        "AWS::Oam::Link",
        "AWS::Oam::Sink",
        "AWS::Omics::AnnotationStore",
        "AWS::Omics::ReferenceStore",
        "AWS::Omics::RunGroup",
        "AWS::Omics::SequenceStore",
        "AWS::Omics::VariantStore",
        "AWS::Omics::Workflow",
        "AWS::OpenSearchServerless::AccessPolicy",
        "AWS::OpenSearchServerless::Collection",
        "AWS::OpenSearchServerless::SecurityConfig",
        "AWS::OpenSearchServerless::SecurityPolicy",
        "AWS::OpenSearchServerless::VpcEndpoint",
        "AWS::OpenSearchService::Domain",
        "AWS::OpsWorks::App",
        "AWS::OpsWorks::ElasticLoadBalancerAttachment",
        "AWS::OpsWorks::Instance",
        "AWS::OpsWorks::Layer",
        "AWS::OpsWorks::Stack",
        "AWS::OpsWorks::UserProfile",
        "AWS::OpsWorks::Volume",
        "AWS::OpsWorksCM::Server",
        "AWS::Organizations::Account",
        "AWS::Organizations::OrganizationalUnit",
        "AWS::Organizations::Policy",
        "AWS::Organizations::ResourcePolicy",
        "AWS::Panorama::ApplicationInstance",
        "AWS::Panorama::Package",
        "AWS::Panorama::PackageVersion",
        "AWS::Personalize::Dataset",
        "AWS::Personalize::DatasetGroup",
        "AWS::Personalize::Schema",
        "AWS::Personalize::Solution",
        "AWS::Pinpoint::ADMChannel",
        "AWS::Pinpoint::APNSChannel",
        "AWS::Pinpoint::APNSSandboxChannel",
        "AWS::Pinpoint::APNSVoipChannel",
        "AWS::Pinpoint::APNSVoipSandboxChannel",
        "AWS::Pinpoint::App",
        "AWS::Pinpoint::ApplicationSettings",
        "AWS::Pinpoint::BaiduChannel",
        "AWS::Pinpoint::Campaign",
        "AWS::Pinpoint::EmailChannel",
        "AWS::Pinpoint::EmailTemplate",
        "AWS::Pinpoint::EventStream",
        "AWS::Pinpoint::GCMChannel",
        "AWS::Pinpoint::InAppTemplate",
        "AWS::Pinpoint::PushTemplate",
        "AWS::Pinpoint::SMSChannel",
        "AWS::Pinpoint::Segment",
        "AWS::Pinpoint::SmsTemplate",
        "AWS::Pinpoint::VoiceChannel",
        "AWS::PinpointEmail::ConfigurationSet",
        "AWS::PinpointEmail::ConfigurationSetEventDestination",
        "AWS::PinpointEmail::DedicatedIpPool",
        "AWS::PinpointEmail::Identity",
        "AWS::Pipes::Pipe",
        "AWS::QLDB::Ledger",
        "AWS::QLDB::Stream",
        "AWS::QuickSight::Analysis",
        "AWS::QuickSight::Dashboard",
        "AWS::QuickSight::DataSet",
        "AWS::QuickSight::DataSource",
        "AWS::QuickSight::Template",
        "AWS::QuickSight::Theme",
        "AWS::RAM::ResourceShare",
        "AWS::RDS::DBCluster",
        "AWS::RDS::DBClusterParameterGroup",
        "AWS::RDS::DBInstance",
        "AWS::RDS::DBParameterGroup",
        "AWS::RDS::DBProxy",
        "AWS::RDS::DBProxyEndpoint",
        "AWS::RDS::DBProxyTargetGroup",
        "AWS::RDS::DBSecurityGroup",
        "AWS::RDS::DBSecurityGroupIngress",
        "AWS::RDS::DBSubnetGroup",
        "AWS::RDS::EventSubscription",
        "AWS::RDS::GlobalCluster",
        "AWS::RDS::OptionGroup",
        "AWS::RUM::AppMonitor",
        "AWS::Redshift::Cluster",
        "AWS::Redshift::ClusterParameterGroup",
        "AWS::Redshift::ClusterSecurityGroup",
        "AWS::Redshift::ClusterSecurityGroupIngress",
        "AWS::Redshift::ClusterSubnetGroup",
        "AWS::Redshift::EndpointAccess",
        "AWS::Redshift::EndpointAuthorization",
        "AWS::Redshift::EventSubscription",
        "AWS::Redshift::ScheduledAction",
        "AWS::RedshiftServerless::Namespace",
        "AWS::RedshiftServerless::Workgroup",
        "AWS::RefactorSpaces::Application",
        "AWS::RefactorSpaces::Environment",
        "AWS::RefactorSpaces::Route",
        "AWS::RefactorSpaces::Service",
        "AWS::Rekognition::Collection",
        "AWS::Rekognition::Project",
        "AWS::Rekognition::StreamProcessor",
        "AWS::ResilienceHub::App",
        "AWS::ResilienceHub::ResiliencyPolicy",
        "AWS::ResourceExplorer2::DefaultViewAssociation",
        "AWS::ResourceExplorer2::Index",
        "AWS::ResourceExplorer2::View",
        "AWS::ResourceGroups::Group",
        "AWS::RoboMaker::Fleet",
        "AWS::RoboMaker::Robot",
        "AWS::RoboMaker::RobotApplication",
        "AWS::RoboMaker::RobotApplicationVersion",
        "AWS::RoboMaker::SimulationApplication",
        "AWS::RoboMaker::SimulationApplicationVersion",
        "AWS::RolesAnywhere::CRL",
        "AWS::RolesAnywhere::Profile",
        "AWS::RolesAnywhere::TrustAnchor",
        "AWS::Route53::CidrCollection",
        "AWS::Route53::DNSSEC",
        "AWS::Route53::HealthCheck",
        "AWS::Route53::HostedZone",
        "AWS::Route53::KeySigningKey",
        "AWS::Route53::RecordSet",
        "AWS::Route53::RecordSetGroup",
        "AWS::Route53RecoveryControl::Cluster",
        "AWS::Route53RecoveryControl::ControlPanel",
        "AWS::Route53RecoveryControl::RoutingControl",
        "AWS::Route53RecoveryControl::SafetyRule",
        "AWS::Route53RecoveryReadiness::Cell",
        "AWS::Route53RecoveryReadiness::ReadinessCheck",
        "AWS::Route53RecoveryReadiness::RecoveryGroup",
        "AWS::Route53RecoveryReadiness::ResourceSet",
        "AWS::Route53Resolver::FirewallDomainList",
        "AWS::Route53Resolver::FirewallRuleGroup",
        "AWS::Route53Resolver::FirewallRuleGroupAssociation",
        "AWS::Route53Resolver::ResolverConfig",
        "AWS::Route53Resolver::ResolverDNSSECConfig",
        "AWS::Route53Resolver::ResolverEndpoint",
        "AWS::Route53Resolver::ResolverQueryLoggingConfig",
        "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
        "AWS::Route53Resolver::ResolverRule",
        "AWS::Route53Resolver::ResolverRuleAssociation",
        "AWS::S3::AccessPoint",
        "AWS::S3::Bucket",
        "AWS::S3::BucketPolicy",
        "AWS::S3::MultiRegionAccessPoint",
        "AWS::S3::MultiRegionAccessPointPolicy",
        "AWS::S3::StorageLens",
        "AWS::S3ObjectLambda::AccessPoint",
        "AWS::S3ObjectLambda::AccessPointPolicy",
        "AWS::S3Outposts::AccessPoint",
        "AWS::S3Outposts::Bucket",
        "AWS::S3Outposts::BucketPolicy",
        "AWS::S3Outposts::Endpoint",
        "AWS::SDB::Domain",
        "AWS::SES::ConfigurationSet",
        "AWS::SES::ConfigurationSetEventDestination",
        "AWS::SES::ContactList",
        "AWS::SES::DedicatedIpPool",
        "AWS::SES::EmailIdentity",
        "AWS::SES::ReceiptFilter",
        "AWS::SES::ReceiptRule",
        "AWS::SES::ReceiptRuleSet",
        "AWS::SES::Template",
        "AWS::SES::VdmAttributes",
        "AWS::SNS::Subscription",
        "AWS::SNS::Topic",
        "AWS::SNS::TopicPolicy",
        "AWS::SQS::Queue",
        "AWS::SQS::QueuePolicy",
        "AWS::SSM::Association",
        "AWS::SSM::Document",
        "AWS::SSM::MaintenanceWindow",
        "AWS::SSM::MaintenanceWindowTarget",
        "AWS::SSM::MaintenanceWindowTask",
        "AWS::SSM::Parameter",
        "AWS::SSM::PatchBaseline",
        "AWS::SSM::ResourceDataSync",
        "AWS::SSM::ResourcePolicy",
        "AWS::SSMContacts::Contact",
        "AWS::SSMContacts::ContactChannel",
        "AWS::SSMIncidents::ReplicationSet",
        "AWS::SSMIncidents::ResponsePlan",
        "AWS::SSO::Assignment",
        "AWS::SSO::InstanceAccessControlAttributeConfiguration",
        "AWS::SSO::PermissionSet",
        "AWS::SageMaker::App",
        "AWS::SageMaker::AppImageConfig",
        "AWS::SageMaker::CodeRepository",
        "AWS::SageMaker::DataQualityJobDefinition",
        "AWS::SageMaker::Device",
        "AWS::SageMaker::DeviceFleet",
        "AWS::SageMaker::Domain",
        "AWS::SageMaker::Endpoint",
        "AWS::SageMaker::EndpointConfig",
        "AWS::SageMaker::FeatureGroup",
        "AWS::SageMaker::Image",
        "AWS::SageMaker::ImageVersion",
        "AWS::SageMaker::InferenceExperiment",
        "AWS::SageMaker::Model",
        "AWS::SageMaker::ModelBiasJobDefinition",
        "AWS::SageMaker::ModelCard",
        "AWS::SageMaker::ModelExplainabilityJobDefinition",
        "AWS::SageMaker::ModelPackage",
        "AWS::SageMaker::ModelPackageGroup",
        "AWS::SageMaker::ModelQualityJobDefinition",
        "AWS::SageMaker::MonitoringSchedule",
        "AWS::SageMaker::NotebookInstance",
        "AWS::SageMaker::NotebookInstanceLifecycleConfig",
        "AWS::SageMaker::Pipeline",
        "AWS::SageMaker::Project",
        "AWS::SageMaker::Space",
        "AWS::SageMaker::UserProfile",
        "AWS::SageMaker::Workteam",
        "AWS::Scheduler::Schedule",
        "AWS::Scheduler::ScheduleGroup",
        "AWS::SecretsManager::ResourcePolicy",
        "AWS::SecretsManager::RotationSchedule",
        "AWS::SecretsManager::Secret",
        "AWS::SecretsManager::SecretTargetAttachment",
        "AWS::SecurityHub::Hub",
        "AWS::Serverless::Api",
        "AWS::Serverless::Application",
        "AWS::Serverless::Function",
        "AWS::Serverless::HttpApi",
        "AWS::Serverless::LayerVersion",
        "AWS::Serverless::SimpleTable",
        "AWS::Serverless::StateMachine",
        "AWS::ServiceCatalog::AcceptedPortfolioShare",
        "AWS::ServiceCatalog::CloudFormationProduct",
        "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
        "AWS::ServiceCatalog::LaunchNotificationConstraint",
        "AWS::ServiceCatalog::LaunchRoleConstraint",
        "AWS::ServiceCatalog::LaunchTemplateConstraint",
        "AWS::ServiceCatalog::Portfolio",
        "AWS::ServiceCatalog::PortfolioPrincipalAssociation",
        "AWS::ServiceCatalog::PortfolioProductAssociation",
        "AWS::ServiceCatalog::PortfolioShare",
        "AWS::ServiceCatalog::ResourceUpdateConstraint",
        "AWS::ServiceCatalog::ServiceAction",
        "AWS::ServiceCatalog::ServiceActionAssociation",
        "AWS::ServiceCatalog::StackSetConstraint",
        "AWS::ServiceCatalog::TagOption",
        "AWS::ServiceCatalog::TagOptionAssociation",
        "AWS::ServiceCatalogAppRegistry::Application",
        "AWS::ServiceCatalogAppRegistry::AttributeGroup",
        "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
        "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
        "AWS::ServiceDiscovery::HttpNamespace",
        "AWS::ServiceDiscovery::Instance",
        "AWS::ServiceDiscovery::PrivateDnsNamespace",
        "AWS::ServiceDiscovery::PublicDnsNamespace",
        "AWS::ServiceDiscovery::Service",
        "AWS::Signer::ProfilePermission",
        "AWS::Signer::SigningProfile",
        "AWS::SimSpaceWeaver::Simulation",
        "AWS::StepFunctions::Activity",
        "AWS::StepFunctions::StateMachine",
        "AWS::SupportApp::AccountAlias",
        "AWS::SupportApp::SlackChannelConfiguration",
        "AWS::SupportApp::SlackWorkspaceConfiguration",
        "AWS::Synthetics::Canary",
        "AWS::Synthetics::Group",
        "AWS::SystemsManagerSAP::Application",
        "AWS::Timestream::Database",
        "AWS::Timestream::ScheduledQuery",
        "AWS::Timestream::Table",
        "AWS::Transfer::Agreement",
        "AWS::Transfer::Certificate",
        "AWS::Transfer::Connector",
        "AWS::Transfer::Profile",
        "AWS::Transfer::Server",
        "AWS::Transfer::User",
        "AWS::Transfer::Workflow",
        "AWS::VoiceID::Domain",
        "AWS::VpcLattice::AccessLogSubscription",
        "AWS::VpcLattice::AuthPolicy",
        "AWS::VpcLattice::Listener",
        "AWS::VpcLattice::ResourcePolicy",
        "AWS::VpcLattice::Rule",
        "AWS::VpcLattice::Service",
        "AWS::VpcLattice::ServiceNetwork",
        "AWS::VpcLattice::ServiceNetworkServiceAssociation",
        "AWS::VpcLattice::ServiceNetworkVpcAssociation",
        "AWS::VpcLattice::TargetGroup",
        "AWS::WAF::ByteMatchSet",
        "AWS::WAF::IPSet",
        "AWS::WAF::Rule",
        "AWS::WAF::SizeConstraintSet",
        "AWS::WAF::SqlInjectionMatchSet",
        "AWS::WAF::WebACL",
        "AWS::WAF::XssMatchSet",
        "AWS::WAFRegional::ByteMatchSet",
        "AWS::WAFRegional::GeoMatchSet",
        "AWS::WAFRegional::IPSet",
        "AWS::WAFRegional::RateBasedRule",
        "AWS::WAFRegional::RegexPatternSet",
        "AWS::WAFRegional::Rule",
        "AWS::WAFRegional::SizeConstraintSet",
        "AWS::WAFRegional::SqlInjectionMatchSet",
        "AWS::WAFRegional::WebACL",
        "AWS::WAFRegional::WebACLAssociation",
        "AWS::WAFRegional::XssMatchSet",
        "AWS::WAFv2::IPSet",
        "AWS::WAFv2::LoggingConfiguration",
        "AWS::WAFv2::RegexPatternSet",
        "AWS::WAFv2::RuleGroup",
        "AWS::WAFv2::WebACL",
        "AWS::WAFv2::WebACLAssociation",
        "AWS::Wisdom::Assistant",
        "AWS::Wisdom::AssistantAssociation",
        "AWS::Wisdom::KnowledgeBase",
        "AWS::WorkSpaces::ConnectionAlias",
        "AWS::WorkSpaces::Workspace",
        "AWS::XRay::Group",
        "AWS::XRay::ResourcePolicy",
        "AWS::XRay::SamplingRule",
        "Alexa::ASK::Skill"
    ];
    CfnSpec.ServiceResourceDictionary = {
        "ACMPCA": {
            "Certificate": "AWS::ACMPCA::Certificate",
            "CertificateAuthority": "AWS::ACMPCA::CertificateAuthority",
            "CertificateAuthorityActivation": "AWS::ACMPCA::CertificateAuthorityActivation",
            "Permission": "AWS::ACMPCA::Permission"
        },
        "APS": {
            "RuleGroupsNamespace": "AWS::APS::RuleGroupsNamespace",
            "Workspace": "AWS::APS::Workspace"
        },
        "AccessAnalyzer": {
            "Analyzer": "AWS::AccessAnalyzer::Analyzer"
        },
        "AmazonMQ": {
            "Broker": "AWS::AmazonMQ::Broker",
            "Configuration": "AWS::AmazonMQ::Configuration",
            "ConfigurationAssociation": "AWS::AmazonMQ::ConfigurationAssociation"
        },
        "Amplify": {
            "App": "AWS::Amplify::App",
            "Branch": "AWS::Amplify::Branch",
            "Domain": "AWS::Amplify::Domain"
        },
        "AmplifyUIBuilder": {
            "Component": "AWS::AmplifyUIBuilder::Component",
            "Form": "AWS::AmplifyUIBuilder::Form",
            "Theme": "AWS::AmplifyUIBuilder::Theme"
        },
        "ApiGateway": {
            "Account": "AWS::ApiGateway::Account",
            "ApiKey": "AWS::ApiGateway::ApiKey",
            "Authorizer": "AWS::ApiGateway::Authorizer",
            "BasePathMapping": "AWS::ApiGateway::BasePathMapping",
            "ClientCertificate": "AWS::ApiGateway::ClientCertificate",
            "Deployment": "AWS::ApiGateway::Deployment",
            "DocumentationPart": "AWS::ApiGateway::DocumentationPart",
            "DocumentationVersion": "AWS::ApiGateway::DocumentationVersion",
            "DomainName": "AWS::ApiGateway::DomainName",
            "GatewayResponse": "AWS::ApiGateway::GatewayResponse",
            "Method": "AWS::ApiGateway::Method",
            "Model": "AWS::ApiGateway::Model",
            "RequestValidator": "AWS::ApiGateway::RequestValidator",
            "Resource": "AWS::ApiGateway::Resource",
            "RestApi": "AWS::ApiGateway::RestApi",
            "Stage": "AWS::ApiGateway::Stage",
            "UsagePlan": "AWS::ApiGateway::UsagePlan",
            "UsagePlanKey": "AWS::ApiGateway::UsagePlanKey",
            "VpcLink": "AWS::ApiGateway::VpcLink"
        },
        "ApiGatewayV2": {
            "Api": "AWS::ApiGatewayV2::Api",
            "ApiGatewayManagedOverrides": "AWS::ApiGatewayV2::ApiGatewayManagedOverrides",
            "ApiMapping": "AWS::ApiGatewayV2::ApiMapping",
            "Authorizer": "AWS::ApiGatewayV2::Authorizer",
            "Deployment": "AWS::ApiGatewayV2::Deployment",
            "DomainName": "AWS::ApiGatewayV2::DomainName",
            "Integration": "AWS::ApiGatewayV2::Integration",
            "IntegrationResponse": "AWS::ApiGatewayV2::IntegrationResponse",
            "Model": "AWS::ApiGatewayV2::Model",
            "Route": "AWS::ApiGatewayV2::Route",
            "RouteResponse": "AWS::ApiGatewayV2::RouteResponse",
            "Stage": "AWS::ApiGatewayV2::Stage",
            "VpcLink": "AWS::ApiGatewayV2::VpcLink"
        },
        "AppConfig": {
            "Application": "AWS::AppConfig::Application",
            "ConfigurationProfile": "AWS::AppConfig::ConfigurationProfile",
            "Deployment": "AWS::AppConfig::Deployment",
            "DeploymentStrategy": "AWS::AppConfig::DeploymentStrategy",
            "Environment": "AWS::AppConfig::Environment",
            "HostedConfigurationVersion": "AWS::AppConfig::HostedConfigurationVersion"
        },
        "AppFlow": {
            "Connector": "AWS::AppFlow::Connector",
            "ConnectorProfile": "AWS::AppFlow::ConnectorProfile",
            "Flow": "AWS::AppFlow::Flow"
        },
        "AppIntegrations": {
            "DataIntegration": "AWS::AppIntegrations::DataIntegration",
            "EventIntegration": "AWS::AppIntegrations::EventIntegration"
        },
        "AppMesh": {
            "GatewayRoute": "AWS::AppMesh::GatewayRoute",
            "Mesh": "AWS::AppMesh::Mesh",
            "Route": "AWS::AppMesh::Route",
            "VirtualGateway": "AWS::AppMesh::VirtualGateway",
            "VirtualNode": "AWS::AppMesh::VirtualNode",
            "VirtualRouter": "AWS::AppMesh::VirtualRouter",
            "VirtualService": "AWS::AppMesh::VirtualService"
        },
        "AppRunner": {
            "ObservabilityConfiguration": "AWS::AppRunner::ObservabilityConfiguration",
            "Service": "AWS::AppRunner::Service",
            "VpcConnector": "AWS::AppRunner::VpcConnector",
            "VpcIngressConnection": "AWS::AppRunner::VpcIngressConnection"
        },
        "AppStream": {
            "AppBlock": "AWS::AppStream::AppBlock",
            "Application": "AWS::AppStream::Application",
            "ApplicationEntitlementAssociation": "AWS::AppStream::ApplicationEntitlementAssociation",
            "ApplicationFleetAssociation": "AWS::AppStream::ApplicationFleetAssociation",
            "DirectoryConfig": "AWS::AppStream::DirectoryConfig",
            "Entitlement": "AWS::AppStream::Entitlement",
            "Fleet": "AWS::AppStream::Fleet",
            "ImageBuilder": "AWS::AppStream::ImageBuilder",
            "Stack": "AWS::AppStream::Stack",
            "StackFleetAssociation": "AWS::AppStream::StackFleetAssociation",
            "StackUserAssociation": "AWS::AppStream::StackUserAssociation",
            "User": "AWS::AppStream::User"
        },
        "AppSync": {
            "ApiCache": "AWS::AppSync::ApiCache",
            "ApiKey": "AWS::AppSync::ApiKey",
            "DataSource": "AWS::AppSync::DataSource",
            "DomainName": "AWS::AppSync::DomainName",
            "DomainNameApiAssociation": "AWS::AppSync::DomainNameApiAssociation",
            "FunctionConfiguration": "AWS::AppSync::FunctionConfiguration",
            "GraphQLApi": "AWS::AppSync::GraphQLApi",
            "GraphQLSchema": "AWS::AppSync::GraphQLSchema",
            "Resolver": "AWS::AppSync::Resolver"
        },
        "ApplicationAutoScaling": {
            "ScalableTarget": "AWS::ApplicationAutoScaling::ScalableTarget",
            "ScalingPolicy": "AWS::ApplicationAutoScaling::ScalingPolicy"
        },
        "ApplicationInsights": {
            "Application": "AWS::ApplicationInsights::Application"
        },
        "Athena": {
            "DataCatalog": "AWS::Athena::DataCatalog",
            "NamedQuery": "AWS::Athena::NamedQuery",
            "PreparedStatement": "AWS::Athena::PreparedStatement",
            "WorkGroup": "AWS::Athena::WorkGroup"
        },
        "AuditManager": {
            "Assessment": "AWS::AuditManager::Assessment"
        },
        "AutoScaling": {
            "AutoScalingGroup": "AWS::AutoScaling::AutoScalingGroup",
            "LaunchConfiguration": "AWS::AutoScaling::LaunchConfiguration",
            "LifecycleHook": "AWS::AutoScaling::LifecycleHook",
            "ScalingPolicy": "AWS::AutoScaling::ScalingPolicy",
            "ScheduledAction": "AWS::AutoScaling::ScheduledAction",
            "WarmPool": "AWS::AutoScaling::WarmPool"
        },
        "AutoScalingPlans": {
            "ScalingPlan": "AWS::AutoScalingPlans::ScalingPlan"
        },
        "Backup": {
            "BackupPlan": "AWS::Backup::BackupPlan",
            "BackupSelection": "AWS::Backup::BackupSelection",
            "BackupVault": "AWS::Backup::BackupVault",
            "Framework": "AWS::Backup::Framework",
            "ReportPlan": "AWS::Backup::ReportPlan"
        },
        "Batch": {
            "ComputeEnvironment": "AWS::Batch::ComputeEnvironment",
            "JobDefinition": "AWS::Batch::JobDefinition",
            "JobQueue": "AWS::Batch::JobQueue",
            "SchedulingPolicy": "AWS::Batch::SchedulingPolicy"
        },
        "BillingConductor": {
            "BillingGroup": "AWS::BillingConductor::BillingGroup",
            "CustomLineItem": "AWS::BillingConductor::CustomLineItem",
            "PricingPlan": "AWS::BillingConductor::PricingPlan",
            "PricingRule": "AWS::BillingConductor::PricingRule"
        },
        "Budgets": {
            "Budget": "AWS::Budgets::Budget",
            "BudgetsAction": "AWS::Budgets::BudgetsAction"
        },
        "CE": {
            "AnomalyMonitor": "AWS::CE::AnomalyMonitor",
            "AnomalySubscription": "AWS::CE::AnomalySubscription",
            "CostCategory": "AWS::CE::CostCategory"
        },
        "CUR": {
            "ReportDefinition": "AWS::CUR::ReportDefinition"
        },
        "Cassandra": {
            "Keyspace": "AWS::Cassandra::Keyspace",
            "Table": "AWS::Cassandra::Table"
        },
        "CertificateManager": {
            "Account": "AWS::CertificateManager::Account",
            "Certificate": "AWS::CertificateManager::Certificate"
        },
        "Chatbot": {
            "MicrosoftTeamsChannelConfiguration": "AWS::Chatbot::MicrosoftTeamsChannelConfiguration",
            "SlackChannelConfiguration": "AWS::Chatbot::SlackChannelConfiguration"
        },
        "Cloud9": {
            "EnvironmentEC2": "AWS::Cloud9::EnvironmentEC2"
        },
        "CloudFormation": {
            "CustomResource": "AWS::CloudFormation::CustomResource",
            "HookDefaultVersion": "AWS::CloudFormation::HookDefaultVersion",
            "HookTypeConfig": "AWS::CloudFormation::HookTypeConfig",
            "HookVersion": "AWS::CloudFormation::HookVersion",
            "Macro": "AWS::CloudFormation::Macro",
            "ModuleDefaultVersion": "AWS::CloudFormation::ModuleDefaultVersion",
            "ModuleVersion": "AWS::CloudFormation::ModuleVersion",
            "PublicTypeVersion": "AWS::CloudFormation::PublicTypeVersion",
            "Publisher": "AWS::CloudFormation::Publisher",
            "ResourceDefaultVersion": "AWS::CloudFormation::ResourceDefaultVersion",
            "ResourceVersion": "AWS::CloudFormation::ResourceVersion",
            "Stack": "AWS::CloudFormation::Stack",
            "StackSet": "AWS::CloudFormation::StackSet",
            "TypeActivation": "AWS::CloudFormation::TypeActivation",
            "WaitCondition": "AWS::CloudFormation::WaitCondition",
            "WaitConditionHandle": "AWS::CloudFormation::WaitConditionHandle"
        },
        "CloudFront": {
            "CachePolicy": "AWS::CloudFront::CachePolicy",
            "CloudFrontOriginAccessIdentity": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "ContinuousDeploymentPolicy": "AWS::CloudFront::ContinuousDeploymentPolicy",
            "Distribution": "AWS::CloudFront::Distribution",
            "Function": "AWS::CloudFront::Function",
            "KeyGroup": "AWS::CloudFront::KeyGroup",
            "MonitoringSubscription": "AWS::CloudFront::MonitoringSubscription",
            "OriginAccessControl": "AWS::CloudFront::OriginAccessControl",
            "OriginRequestPolicy": "AWS::CloudFront::OriginRequestPolicy",
            "PublicKey": "AWS::CloudFront::PublicKey",
            "RealtimeLogConfig": "AWS::CloudFront::RealtimeLogConfig",
            "ResponseHeadersPolicy": "AWS::CloudFront::ResponseHeadersPolicy",
            "StreamingDistribution": "AWS::CloudFront::StreamingDistribution"
        },
        "CloudTrail": {
            "Channel": "AWS::CloudTrail::Channel",
            "EventDataStore": "AWS::CloudTrail::EventDataStore",
            "ResourcePolicy": "AWS::CloudTrail::ResourcePolicy",
            "Trail": "AWS::CloudTrail::Trail"
        },
        "CloudWatch": {
            "Alarm": "AWS::CloudWatch::Alarm",
            "AnomalyDetector": "AWS::CloudWatch::AnomalyDetector",
            "CompositeAlarm": "AWS::CloudWatch::CompositeAlarm",
            "Dashboard": "AWS::CloudWatch::Dashboard",
            "InsightRule": "AWS::CloudWatch::InsightRule",
            "MetricStream": "AWS::CloudWatch::MetricStream"
        },
        "CodeArtifact": {
            "Domain": "AWS::CodeArtifact::Domain",
            "Repository": "AWS::CodeArtifact::Repository"
        },
        "CodeBuild": {
            "Project": "AWS::CodeBuild::Project",
            "ReportGroup": "AWS::CodeBuild::ReportGroup",
            "SourceCredential": "AWS::CodeBuild::SourceCredential"
        },
        "CodeCommit": {
            "Repository": "AWS::CodeCommit::Repository"
        },
        "CodeDeploy": {
            "Application": "AWS::CodeDeploy::Application",
            "DeploymentConfig": "AWS::CodeDeploy::DeploymentConfig",
            "DeploymentGroup": "AWS::CodeDeploy::DeploymentGroup"
        },
        "CodeGuruProfiler": {
            "ProfilingGroup": "AWS::CodeGuruProfiler::ProfilingGroup"
        },
        "CodeGuruReviewer": {
            "RepositoryAssociation": "AWS::CodeGuruReviewer::RepositoryAssociation"
        },
        "CodePipeline": {
            "CustomActionType": "AWS::CodePipeline::CustomActionType",
            "Pipeline": "AWS::CodePipeline::Pipeline",
            "Webhook": "AWS::CodePipeline::Webhook"
        },
        "CodeStar": {
            "GitHubRepository": "AWS::CodeStar::GitHubRepository"
        },
        "CodeStarConnections": {
            "Connection": "AWS::CodeStarConnections::Connection"
        },
        "CodeStarNotifications": {
            "NotificationRule": "AWS::CodeStarNotifications::NotificationRule"
        },
        "Cognito": {
            "IdentityPool": "AWS::Cognito::IdentityPool",
            "IdentityPoolRoleAttachment": "AWS::Cognito::IdentityPoolRoleAttachment",
            "UserPool": "AWS::Cognito::UserPool",
            "UserPoolClient": "AWS::Cognito::UserPoolClient",
            "UserPoolDomain": "AWS::Cognito::UserPoolDomain",
            "UserPoolGroup": "AWS::Cognito::UserPoolGroup",
            "UserPoolIdentityProvider": "AWS::Cognito::UserPoolIdentityProvider",
            "UserPoolResourceServer": "AWS::Cognito::UserPoolResourceServer",
            "UserPoolRiskConfigurationAttachment": "AWS::Cognito::UserPoolRiskConfigurationAttachment",
            "UserPoolUICustomizationAttachment": "AWS::Cognito::UserPoolUICustomizationAttachment",
            "UserPoolUser": "AWS::Cognito::UserPoolUser",
            "UserPoolUserToGroupAttachment": "AWS::Cognito::UserPoolUserToGroupAttachment"
        },
        "Comprehend": {
            "Flywheel": "AWS::Comprehend::Flywheel"
        },
        "Config": {
            "AggregationAuthorization": "AWS::Config::AggregationAuthorization",
            "ConfigRule": "AWS::Config::ConfigRule",
            "ConfigurationAggregator": "AWS::Config::ConfigurationAggregator",
            "ConfigurationRecorder": "AWS::Config::ConfigurationRecorder",
            "ConformancePack": "AWS::Config::ConformancePack",
            "DeliveryChannel": "AWS::Config::DeliveryChannel",
            "OrganizationConfigRule": "AWS::Config::OrganizationConfigRule",
            "OrganizationConformancePack": "AWS::Config::OrganizationConformancePack",
            "RemediationConfiguration": "AWS::Config::RemediationConfiguration",
            "StoredQuery": "AWS::Config::StoredQuery"
        },
        "Connect": {
            "ApprovedOrigin": "AWS::Connect::ApprovedOrigin",
            "ContactFlow": "AWS::Connect::ContactFlow",
            "ContactFlowModule": "AWS::Connect::ContactFlowModule",
            "HoursOfOperation": "AWS::Connect::HoursOfOperation",
            "Instance": "AWS::Connect::Instance",
            "InstanceStorageConfig": "AWS::Connect::InstanceStorageConfig",
            "IntegrationAssociation": "AWS::Connect::IntegrationAssociation",
            "PhoneNumber": "AWS::Connect::PhoneNumber",
            "QuickConnect": "AWS::Connect::QuickConnect",
            "Rule": "AWS::Connect::Rule",
            "SecurityKey": "AWS::Connect::SecurityKey",
            "TaskTemplate": "AWS::Connect::TaskTemplate",
            "User": "AWS::Connect::User",
            "UserHierarchyGroup": "AWS::Connect::UserHierarchyGroup"
        },
        "ConnectCampaigns": {
            "Campaign": "AWS::ConnectCampaigns::Campaign"
        },
        "ControlTower": {
            "EnabledControl": "AWS::ControlTower::EnabledControl"
        },
        "CustomerProfiles": {
            "Domain": "AWS::CustomerProfiles::Domain",
            "Integration": "AWS::CustomerProfiles::Integration",
            "ObjectType": "AWS::CustomerProfiles::ObjectType"
        },
        "DAX": {
            "Cluster": "AWS::DAX::Cluster",
            "ParameterGroup": "AWS::DAX::ParameterGroup",
            "SubnetGroup": "AWS::DAX::SubnetGroup"
        },
        "DLM": {
            "LifecyclePolicy": "AWS::DLM::LifecyclePolicy"
        },
        "DMS": {
            "Certificate": "AWS::DMS::Certificate",
            "Endpoint": "AWS::DMS::Endpoint",
            "EventSubscription": "AWS::DMS::EventSubscription",
            "ReplicationInstance": "AWS::DMS::ReplicationInstance",
            "ReplicationSubnetGroup": "AWS::DMS::ReplicationSubnetGroup",
            "ReplicationTask": "AWS::DMS::ReplicationTask"
        },
        "DataBrew": {
            "Dataset": "AWS::DataBrew::Dataset",
            "Job": "AWS::DataBrew::Job",
            "Project": "AWS::DataBrew::Project",
            "Recipe": "AWS::DataBrew::Recipe",
            "Ruleset": "AWS::DataBrew::Ruleset",
            "Schedule": "AWS::DataBrew::Schedule"
        },
        "DataPipeline": {
            "Pipeline": "AWS::DataPipeline::Pipeline"
        },
        "DataSync": {
            "Agent": "AWS::DataSync::Agent",
            "LocationEFS": "AWS::DataSync::LocationEFS",
            "LocationFSxLustre": "AWS::DataSync::LocationFSxLustre",
            "LocationFSxONTAP": "AWS::DataSync::LocationFSxONTAP",
            "LocationFSxOpenZFS": "AWS::DataSync::LocationFSxOpenZFS",
            "LocationFSxWindows": "AWS::DataSync::LocationFSxWindows",
            "LocationHDFS": "AWS::DataSync::LocationHDFS",
            "LocationNFS": "AWS::DataSync::LocationNFS",
            "LocationObjectStorage": "AWS::DataSync::LocationObjectStorage",
            "LocationS3": "AWS::DataSync::LocationS3",
            "LocationSMB": "AWS::DataSync::LocationSMB",
            "Task": "AWS::DataSync::Task"
        },
        "Detective": {
            "Graph": "AWS::Detective::Graph",
            "MemberInvitation": "AWS::Detective::MemberInvitation"
        },
        "DevOpsGuru": {
            "NotificationChannel": "AWS::DevOpsGuru::NotificationChannel",
            "ResourceCollection": "AWS::DevOpsGuru::ResourceCollection"
        },
        "DeviceFarm": {
            "DevicePool": "AWS::DeviceFarm::DevicePool",
            "InstanceProfile": "AWS::DeviceFarm::InstanceProfile",
            "NetworkProfile": "AWS::DeviceFarm::NetworkProfile",
            "Project": "AWS::DeviceFarm::Project",
            "TestGridProject": "AWS::DeviceFarm::TestGridProject",
            "VPCEConfiguration": "AWS::DeviceFarm::VPCEConfiguration"
        },
        "DirectoryService": {
            "MicrosoftAD": "AWS::DirectoryService::MicrosoftAD",
            "SimpleAD": "AWS::DirectoryService::SimpleAD"
        },
        "DocDB": {
            "DBCluster": "AWS::DocDB::DBCluster",
            "DBClusterParameterGroup": "AWS::DocDB::DBClusterParameterGroup",
            "DBInstance": "AWS::DocDB::DBInstance",
            "DBSubnetGroup": "AWS::DocDB::DBSubnetGroup"
        },
        "DocDBElastic": {
            "Cluster": "AWS::DocDBElastic::Cluster"
        },
        "DynamoDB": {
            "GlobalTable": "AWS::DynamoDB::GlobalTable",
            "Table": "AWS::DynamoDB::Table"
        },
        "EC2": {
            "CapacityReservation": "AWS::EC2::CapacityReservation",
            "CapacityReservationFleet": "AWS::EC2::CapacityReservationFleet",
            "CarrierGateway": "AWS::EC2::CarrierGateway",
            "ClientVpnAuthorizationRule": "AWS::EC2::ClientVpnAuthorizationRule",
            "ClientVpnEndpoint": "AWS::EC2::ClientVpnEndpoint",
            "ClientVpnRoute": "AWS::EC2::ClientVpnRoute",
            "ClientVpnTargetNetworkAssociation": "AWS::EC2::ClientVpnTargetNetworkAssociation",
            "CustomerGateway": "AWS::EC2::CustomerGateway",
            "DHCPOptions": "AWS::EC2::DHCPOptions",
            "EC2Fleet": "AWS::EC2::EC2Fleet",
            "EIP": "AWS::EC2::EIP",
            "EIPAssociation": "AWS::EC2::EIPAssociation",
            "EgressOnlyInternetGateway": "AWS::EC2::EgressOnlyInternetGateway",
            "EnclaveCertificateIamRoleAssociation": "AWS::EC2::EnclaveCertificateIamRoleAssociation",
            "FlowLog": "AWS::EC2::FlowLog",
            "GatewayRouteTableAssociation": "AWS::EC2::GatewayRouteTableAssociation",
            "Host": "AWS::EC2::Host",
            "IPAM": "AWS::EC2::IPAM",
            "IPAMAllocation": "AWS::EC2::IPAMAllocation",
            "IPAMPool": "AWS::EC2::IPAMPool",
            "IPAMPoolCidr": "AWS::EC2::IPAMPoolCidr",
            "IPAMResourceDiscovery": "AWS::EC2::IPAMResourceDiscovery",
            "IPAMResourceDiscoveryAssociation": "AWS::EC2::IPAMResourceDiscoveryAssociation",
            "IPAMScope": "AWS::EC2::IPAMScope",
            "Instance": "AWS::EC2::Instance",
            "InternetGateway": "AWS::EC2::InternetGateway",
            "KeyPair": "AWS::EC2::KeyPair",
            "LaunchTemplate": "AWS::EC2::LaunchTemplate",
            "LocalGatewayRoute": "AWS::EC2::LocalGatewayRoute",
            "LocalGatewayRouteTable": "AWS::EC2::LocalGatewayRouteTable",
            "LocalGatewayRouteTableVPCAssociation": "AWS::EC2::LocalGatewayRouteTableVPCAssociation",
            "LocalGatewayRouteTableVirtualInterfaceGroupAssociation": "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
            "NatGateway": "AWS::EC2::NatGateway",
            "NetworkAcl": "AWS::EC2::NetworkAcl",
            "NetworkAclEntry": "AWS::EC2::NetworkAclEntry",
            "NetworkInsightsAccessScope": "AWS::EC2::NetworkInsightsAccessScope",
            "NetworkInsightsAccessScopeAnalysis": "AWS::EC2::NetworkInsightsAccessScopeAnalysis",
            "NetworkInsightsAnalysis": "AWS::EC2::NetworkInsightsAnalysis",
            "NetworkInsightsPath": "AWS::EC2::NetworkInsightsPath",
            "NetworkInterface": "AWS::EC2::NetworkInterface",
            "NetworkInterfaceAttachment": "AWS::EC2::NetworkInterfaceAttachment",
            "NetworkInterfacePermission": "AWS::EC2::NetworkInterfacePermission",
            "NetworkPerformanceMetricSubscription": "AWS::EC2::NetworkPerformanceMetricSubscription",
            "PlacementGroup": "AWS::EC2::PlacementGroup",
            "PrefixList": "AWS::EC2::PrefixList",
            "Route": "AWS::EC2::Route",
            "RouteTable": "AWS::EC2::RouteTable",
            "SecurityGroup": "AWS::EC2::SecurityGroup",
            "SecurityGroupEgress": "AWS::EC2::SecurityGroupEgress",
            "SecurityGroupIngress": "AWS::EC2::SecurityGroupIngress",
            "SpotFleet": "AWS::EC2::SpotFleet",
            "Subnet": "AWS::EC2::Subnet",
            "SubnetCidrBlock": "AWS::EC2::SubnetCidrBlock",
            "SubnetNetworkAclAssociation": "AWS::EC2::SubnetNetworkAclAssociation",
            "SubnetRouteTableAssociation": "AWS::EC2::SubnetRouteTableAssociation",
            "TrafficMirrorFilter": "AWS::EC2::TrafficMirrorFilter",
            "TrafficMirrorFilterRule": "AWS::EC2::TrafficMirrorFilterRule",
            "TrafficMirrorSession": "AWS::EC2::TrafficMirrorSession",
            "TrafficMirrorTarget": "AWS::EC2::TrafficMirrorTarget",
            "TransitGateway": "AWS::EC2::TransitGateway",
            "TransitGatewayAttachment": "AWS::EC2::TransitGatewayAttachment",
            "TransitGatewayConnect": "AWS::EC2::TransitGatewayConnect",
            "TransitGatewayMulticastDomain": "AWS::EC2::TransitGatewayMulticastDomain",
            "TransitGatewayMulticastDomainAssociation": "AWS::EC2::TransitGatewayMulticastDomainAssociation",
            "TransitGatewayMulticastGroupMember": "AWS::EC2::TransitGatewayMulticastGroupMember",
            "TransitGatewayMulticastGroupSource": "AWS::EC2::TransitGatewayMulticastGroupSource",
            "TransitGatewayPeeringAttachment": "AWS::EC2::TransitGatewayPeeringAttachment",
            "TransitGatewayRoute": "AWS::EC2::TransitGatewayRoute",
            "TransitGatewayRouteTable": "AWS::EC2::TransitGatewayRouteTable",
            "TransitGatewayRouteTableAssociation": "AWS::EC2::TransitGatewayRouteTableAssociation",
            "TransitGatewayRouteTablePropagation": "AWS::EC2::TransitGatewayRouteTablePropagation",
            "TransitGatewayVpcAttachment": "AWS::EC2::TransitGatewayVpcAttachment",
            "VPC": "AWS::EC2::VPC",
            "VPCCidrBlock": "AWS::EC2::VPCCidrBlock",
            "VPCDHCPOptionsAssociation": "AWS::EC2::VPCDHCPOptionsAssociation",
            "VPCEndpoint": "AWS::EC2::VPCEndpoint",
            "VPCEndpointConnectionNotification": "AWS::EC2::VPCEndpointConnectionNotification",
            "VPCEndpointService": "AWS::EC2::VPCEndpointService",
            "VPCEndpointServicePermissions": "AWS::EC2::VPCEndpointServicePermissions",
            "VPCGatewayAttachment": "AWS::EC2::VPCGatewayAttachment",
            "VPCPeeringConnection": "AWS::EC2::VPCPeeringConnection",
            "VPNConnection": "AWS::EC2::VPNConnection",
            "VPNConnectionRoute": "AWS::EC2::VPNConnectionRoute",
            "VPNGateway": "AWS::EC2::VPNGateway",
            "VPNGatewayRoutePropagation": "AWS::EC2::VPNGatewayRoutePropagation",
            "Volume": "AWS::EC2::Volume",
            "VolumeAttachment": "AWS::EC2::VolumeAttachment"
        },
        "ECR": {
            "PublicRepository": "AWS::ECR::PublicRepository",
            "PullThroughCacheRule": "AWS::ECR::PullThroughCacheRule",
            "RegistryPolicy": "AWS::ECR::RegistryPolicy",
            "ReplicationConfiguration": "AWS::ECR::ReplicationConfiguration",
            "Repository": "AWS::ECR::Repository"
        },
        "ECS": {
            "CapacityProvider": "AWS::ECS::CapacityProvider",
            "Cluster": "AWS::ECS::Cluster",
            "ClusterCapacityProviderAssociations": "AWS::ECS::ClusterCapacityProviderAssociations",
            "PrimaryTaskSet": "AWS::ECS::PrimaryTaskSet",
            "Service": "AWS::ECS::Service",
            "TaskDefinition": "AWS::ECS::TaskDefinition",
            "TaskSet": "AWS::ECS::TaskSet"
        },
        "EFS": {
            "AccessPoint": "AWS::EFS::AccessPoint",
            "FileSystem": "AWS::EFS::FileSystem",
            "MountTarget": "AWS::EFS::MountTarget"
        },
        "EKS": {
            "Addon": "AWS::EKS::Addon",
            "Cluster": "AWS::EKS::Cluster",
            "FargateProfile": "AWS::EKS::FargateProfile",
            "IdentityProviderConfig": "AWS::EKS::IdentityProviderConfig",
            "Nodegroup": "AWS::EKS::Nodegroup"
        },
        "EMR": {
            "Cluster": "AWS::EMR::Cluster",
            "InstanceFleetConfig": "AWS::EMR::InstanceFleetConfig",
            "InstanceGroupConfig": "AWS::EMR::InstanceGroupConfig",
            "SecurityConfiguration": "AWS::EMR::SecurityConfiguration",
            "Step": "AWS::EMR::Step",
            "Studio": "AWS::EMR::Studio",
            "StudioSessionMapping": "AWS::EMR::StudioSessionMapping"
        },
        "EMRContainers": {
            "VirtualCluster": "AWS::EMRContainers::VirtualCluster"
        },
        "EMRServerless": {
            "Application": "AWS::EMRServerless::Application"
        },
        "ElastiCache": {
            "CacheCluster": "AWS::ElastiCache::CacheCluster",
            "GlobalReplicationGroup": "AWS::ElastiCache::GlobalReplicationGroup",
            "ParameterGroup": "AWS::ElastiCache::ParameterGroup",
            "ReplicationGroup": "AWS::ElastiCache::ReplicationGroup",
            "SecurityGroup": "AWS::ElastiCache::SecurityGroup",
            "SecurityGroupIngress": "AWS::ElastiCache::SecurityGroupIngress",
            "SubnetGroup": "AWS::ElastiCache::SubnetGroup",
            "User": "AWS::ElastiCache::User",
            "UserGroup": "AWS::ElastiCache::UserGroup"
        },
        "ElasticBeanstalk": {
            "Application": "AWS::ElasticBeanstalk::Application",
            "ApplicationVersion": "AWS::ElasticBeanstalk::ApplicationVersion",
            "ConfigurationTemplate": "AWS::ElasticBeanstalk::ConfigurationTemplate",
            "Environment": "AWS::ElasticBeanstalk::Environment"
        },
        "ElasticLoadBalancing": {
            "LoadBalancer": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "ElasticLoadBalancingV2": {
            "Listener": "AWS::ElasticLoadBalancingV2::Listener",
            "ListenerCertificate": "AWS::ElasticLoadBalancingV2::ListenerCertificate",
            "ListenerRule": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "LoadBalancer": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "TargetGroup": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },
        "Elasticsearch": {
            "Domain": "AWS::Elasticsearch::Domain"
        },
        "EventSchemas": {
            "Discoverer": "AWS::EventSchemas::Discoverer",
            "Registry": "AWS::EventSchemas::Registry",
            "RegistryPolicy": "AWS::EventSchemas::RegistryPolicy",
            "Schema": "AWS::EventSchemas::Schema"
        },
        "Events": {
            "ApiDestination": "AWS::Events::ApiDestination",
            "Archive": "AWS::Events::Archive",
            "Connection": "AWS::Events::Connection",
            "Endpoint": "AWS::Events::Endpoint",
            "EventBus": "AWS::Events::EventBus",
            "EventBusPolicy": "AWS::Events::EventBusPolicy",
            "Rule": "AWS::Events::Rule"
        },
        "Evidently": {
            "Experiment": "AWS::Evidently::Experiment",
            "Feature": "AWS::Evidently::Feature",
            "Launch": "AWS::Evidently::Launch",
            "Project": "AWS::Evidently::Project",
            "Segment": "AWS::Evidently::Segment"
        },
        "FIS": {
            "ExperimentTemplate": "AWS::FIS::ExperimentTemplate"
        },
        "FMS": {
            "NotificationChannel": "AWS::FMS::NotificationChannel",
            "Policy": "AWS::FMS::Policy",
            "ResourceSet": "AWS::FMS::ResourceSet"
        },
        "FSx": {
            "DataRepositoryAssociation": "AWS::FSx::DataRepositoryAssociation",
            "FileSystem": "AWS::FSx::FileSystem",
            "Snapshot": "AWS::FSx::Snapshot",
            "StorageVirtualMachine": "AWS::FSx::StorageVirtualMachine",
            "Volume": "AWS::FSx::Volume"
        },
        "FinSpace": {
            "Environment": "AWS::FinSpace::Environment"
        },
        "Forecast": {
            "Dataset": "AWS::Forecast::Dataset",
            "DatasetGroup": "AWS::Forecast::DatasetGroup"
        },
        "FraudDetector": {
            "Detector": "AWS::FraudDetector::Detector",
            "EntityType": "AWS::FraudDetector::EntityType",
            "EventType": "AWS::FraudDetector::EventType",
            "Label": "AWS::FraudDetector::Label",
            "Outcome": "AWS::FraudDetector::Outcome",
            "Variable": "AWS::FraudDetector::Variable"
        },
        "GameLift": {
            "Alias": "AWS::GameLift::Alias",
            "Build": "AWS::GameLift::Build",
            "Fleet": "AWS::GameLift::Fleet",
            "GameServerGroup": "AWS::GameLift::GameServerGroup",
            "GameSessionQueue": "AWS::GameLift::GameSessionQueue",
            "Location": "AWS::GameLift::Location",
            "MatchmakingConfiguration": "AWS::GameLift::MatchmakingConfiguration",
            "MatchmakingRuleSet": "AWS::GameLift::MatchmakingRuleSet",
            "Script": "AWS::GameLift::Script"
        },
        "GlobalAccelerator": {
            "Accelerator": "AWS::GlobalAccelerator::Accelerator",
            "EndpointGroup": "AWS::GlobalAccelerator::EndpointGroup",
            "Listener": "AWS::GlobalAccelerator::Listener"
        },
        "Glue": {
            "Classifier": "AWS::Glue::Classifier",
            "Connection": "AWS::Glue::Connection",
            "Crawler": "AWS::Glue::Crawler",
            "DataCatalogEncryptionSettings": "AWS::Glue::DataCatalogEncryptionSettings",
            "Database": "AWS::Glue::Database",
            "DevEndpoint": "AWS::Glue::DevEndpoint",
            "Job": "AWS::Glue::Job",
            "MLTransform": "AWS::Glue::MLTransform",
            "Partition": "AWS::Glue::Partition",
            "Registry": "AWS::Glue::Registry",
            "Schema": "AWS::Glue::Schema",
            "SchemaVersion": "AWS::Glue::SchemaVersion",
            "SchemaVersionMetadata": "AWS::Glue::SchemaVersionMetadata",
            "SecurityConfiguration": "AWS::Glue::SecurityConfiguration",
            "Table": "AWS::Glue::Table",
            "Trigger": "AWS::Glue::Trigger",
            "Workflow": "AWS::Glue::Workflow"
        },
        "Grafana": {
            "Workspace": "AWS::Grafana::Workspace"
        },
        "Greengrass": {
            "ConnectorDefinition": "AWS::Greengrass::ConnectorDefinition",
            "ConnectorDefinitionVersion": "AWS::Greengrass::ConnectorDefinitionVersion",
            "CoreDefinition": "AWS::Greengrass::CoreDefinition",
            "CoreDefinitionVersion": "AWS::Greengrass::CoreDefinitionVersion",
            "DeviceDefinition": "AWS::Greengrass::DeviceDefinition",
            "DeviceDefinitionVersion": "AWS::Greengrass::DeviceDefinitionVersion",
            "FunctionDefinition": "AWS::Greengrass::FunctionDefinition",
            "FunctionDefinitionVersion": "AWS::Greengrass::FunctionDefinitionVersion",
            "Group": "AWS::Greengrass::Group",
            "GroupVersion": "AWS::Greengrass::GroupVersion",
            "LoggerDefinition": "AWS::Greengrass::LoggerDefinition",
            "LoggerDefinitionVersion": "AWS::Greengrass::LoggerDefinitionVersion",
            "ResourceDefinition": "AWS::Greengrass::ResourceDefinition",
            "ResourceDefinitionVersion": "AWS::Greengrass::ResourceDefinitionVersion",
            "SubscriptionDefinition": "AWS::Greengrass::SubscriptionDefinition",
            "SubscriptionDefinitionVersion": "AWS::Greengrass::SubscriptionDefinitionVersion"
        },
        "GreengrassV2": {
            "ComponentVersion": "AWS::GreengrassV2::ComponentVersion",
            "Deployment": "AWS::GreengrassV2::Deployment"
        },
        "GroundStation": {
            "Config": "AWS::GroundStation::Config",
            "DataflowEndpointGroup": "AWS::GroundStation::DataflowEndpointGroup",
            "MissionProfile": "AWS::GroundStation::MissionProfile"
        },
        "GuardDuty": {
            "Detector": "AWS::GuardDuty::Detector",
            "Filter": "AWS::GuardDuty::Filter",
            "IPSet": "AWS::GuardDuty::IPSet",
            "Master": "AWS::GuardDuty::Master",
            "Member": "AWS::GuardDuty::Member",
            "ThreatIntelSet": "AWS::GuardDuty::ThreatIntelSet"
        },
        "HealthLake": {
            "FHIRDatastore": "AWS::HealthLake::FHIRDatastore"
        },
        "IAM": {
            "AccessKey": "AWS::IAM::AccessKey",
            "Group": "AWS::IAM::Group",
            "InstanceProfile": "AWS::IAM::InstanceProfile",
            "ManagedPolicy": "AWS::IAM::ManagedPolicy",
            "OIDCProvider": "AWS::IAM::OIDCProvider",
            "Policy": "AWS::IAM::Policy",
            "Role": "AWS::IAM::Role",
            "SAMLProvider": "AWS::IAM::SAMLProvider",
            "ServerCertificate": "AWS::IAM::ServerCertificate",
            "ServiceLinkedRole": "AWS::IAM::ServiceLinkedRole",
            "User": "AWS::IAM::User",
            "UserToGroupAddition": "AWS::IAM::UserToGroupAddition",
            "VirtualMFADevice": "AWS::IAM::VirtualMFADevice"
        },
        "IVS": {
            "Channel": "AWS::IVS::Channel",
            "PlaybackKeyPair": "AWS::IVS::PlaybackKeyPair",
            "RecordingConfiguration": "AWS::IVS::RecordingConfiguration",
            "StreamKey": "AWS::IVS::StreamKey"
        },
        "IVSChat": {
            "LoggingConfiguration": "AWS::IVSChat::LoggingConfiguration",
            "Room": "AWS::IVSChat::Room"
        },
        "IdentityStore": {
            "Group": "AWS::IdentityStore::Group",
            "GroupMembership": "AWS::IdentityStore::GroupMembership"
        },
        "ImageBuilder": {
            "Component": "AWS::ImageBuilder::Component",
            "ContainerRecipe": "AWS::ImageBuilder::ContainerRecipe",
            "DistributionConfiguration": "AWS::ImageBuilder::DistributionConfiguration",
            "Image": "AWS::ImageBuilder::Image",
            "ImagePipeline": "AWS::ImageBuilder::ImagePipeline",
            "ImageRecipe": "AWS::ImageBuilder::ImageRecipe",
            "InfrastructureConfiguration": "AWS::ImageBuilder::InfrastructureConfiguration"
        },
        "Inspector": {
            "AssessmentTarget": "AWS::Inspector::AssessmentTarget",
            "AssessmentTemplate": "AWS::Inspector::AssessmentTemplate",
            "ResourceGroup": "AWS::Inspector::ResourceGroup"
        },
        "InspectorV2": {
            "Filter": "AWS::InspectorV2::Filter"
        },
        "InternetMonitor": {
            "Monitor": "AWS::InternetMonitor::Monitor"
        },
        "IoT1Click": {
            "Device": "AWS::IoT1Click::Device",
            "Placement": "AWS::IoT1Click::Placement",
            "Project": "AWS::IoT1Click::Project"
        },
        "IoT": {
            "AccountAuditConfiguration": "AWS::IoT::AccountAuditConfiguration",
            "Authorizer": "AWS::IoT::Authorizer",
            "CACertificate": "AWS::IoT::CACertificate",
            "Certificate": "AWS::IoT::Certificate",
            "CustomMetric": "AWS::IoT::CustomMetric",
            "Dimension": "AWS::IoT::Dimension",
            "DomainConfiguration": "AWS::IoT::DomainConfiguration",
            "FleetMetric": "AWS::IoT::FleetMetric",
            "JobTemplate": "AWS::IoT::JobTemplate",
            "Logging": "AWS::IoT::Logging",
            "MitigationAction": "AWS::IoT::MitigationAction",
            "Policy": "AWS::IoT::Policy",
            "PolicyPrincipalAttachment": "AWS::IoT::PolicyPrincipalAttachment",
            "ProvisioningTemplate": "AWS::IoT::ProvisioningTemplate",
            "ResourceSpecificLogging": "AWS::IoT::ResourceSpecificLogging",
            "RoleAlias": "AWS::IoT::RoleAlias",
            "ScheduledAudit": "AWS::IoT::ScheduledAudit",
            "SecurityProfile": "AWS::IoT::SecurityProfile",
            "Thing": "AWS::IoT::Thing",
            "ThingPrincipalAttachment": "AWS::IoT::ThingPrincipalAttachment",
            "TopicRule": "AWS::IoT::TopicRule",
            "TopicRuleDestination": "AWS::IoT::TopicRuleDestination"
        },
        "IoTAnalytics": {
            "Channel": "AWS::IoTAnalytics::Channel",
            "Dataset": "AWS::IoTAnalytics::Dataset",
            "Datastore": "AWS::IoTAnalytics::Datastore",
            "Pipeline": "AWS::IoTAnalytics::Pipeline"
        },
        "IoTCoreDeviceAdvisor": {
            "SuiteDefinition": "AWS::IoTCoreDeviceAdvisor::SuiteDefinition"
        },
        "IoTEvents": {
            "AlarmModel": "AWS::IoTEvents::AlarmModel",
            "DetectorModel": "AWS::IoTEvents::DetectorModel",
            "Input": "AWS::IoTEvents::Input"
        },
        "IoTFleetHub": {
            "Application": "AWS::IoTFleetHub::Application"
        },
        "IoTFleetWise": {
            "Campaign": "AWS::IoTFleetWise::Campaign",
            "DecoderManifest": "AWS::IoTFleetWise::DecoderManifest",
            "Fleet": "AWS::IoTFleetWise::Fleet",
            "ModelManifest": "AWS::IoTFleetWise::ModelManifest",
            "SignalCatalog": "AWS::IoTFleetWise::SignalCatalog",
            "Vehicle": "AWS::IoTFleetWise::Vehicle"
        },
        "IoTSiteWise": {
            "AccessPolicy": "AWS::IoTSiteWise::AccessPolicy",
            "Asset": "AWS::IoTSiteWise::Asset",
            "AssetModel": "AWS::IoTSiteWise::AssetModel",
            "Dashboard": "AWS::IoTSiteWise::Dashboard",
            "Gateway": "AWS::IoTSiteWise::Gateway",
            "Portal": "AWS::IoTSiteWise::Portal",
            "Project": "AWS::IoTSiteWise::Project"
        },
        "IoTThingsGraph": {
            "FlowTemplate": "AWS::IoTThingsGraph::FlowTemplate"
        },
        "IoTTwinMaker": {
            "ComponentType": "AWS::IoTTwinMaker::ComponentType",
            "Entity": "AWS::IoTTwinMaker::Entity",
            "Scene": "AWS::IoTTwinMaker::Scene",
            "SyncJob": "AWS::IoTTwinMaker::SyncJob",
            "Workspace": "AWS::IoTTwinMaker::Workspace"
        },
        "IoTWireless": {
            "Destination": "AWS::IoTWireless::Destination",
            "DeviceProfile": "AWS::IoTWireless::DeviceProfile",
            "FuotaTask": "AWS::IoTWireless::FuotaTask",
            "MulticastGroup": "AWS::IoTWireless::MulticastGroup",
            "NetworkAnalyzerConfiguration": "AWS::IoTWireless::NetworkAnalyzerConfiguration",
            "PartnerAccount": "AWS::IoTWireless::PartnerAccount",
            "ServiceProfile": "AWS::IoTWireless::ServiceProfile",
            "TaskDefinition": "AWS::IoTWireless::TaskDefinition",
            "WirelessDevice": "AWS::IoTWireless::WirelessDevice",
            "WirelessGateway": "AWS::IoTWireless::WirelessGateway"
        },
        "KMS": {
            "Alias": "AWS::KMS::Alias",
            "Key": "AWS::KMS::Key",
            "ReplicaKey": "AWS::KMS::ReplicaKey"
        },
        "KafkaConnect": {
            "Connector": "AWS::KafkaConnect::Connector"
        },
        "Kendra": {
            "DataSource": "AWS::Kendra::DataSource",
            "Faq": "AWS::Kendra::Faq",
            "Index": "AWS::Kendra::Index"
        },
        "KendraRanking": {
            "ExecutionPlan": "AWS::KendraRanking::ExecutionPlan"
        },
        "Kinesis": {
            "Stream": "AWS::Kinesis::Stream",
            "StreamConsumer": "AWS::Kinesis::StreamConsumer"
        },
        "KinesisAnalytics": {
            "Application": "AWS::KinesisAnalytics::Application",
            "ApplicationOutput": "AWS::KinesisAnalytics::ApplicationOutput",
            "ApplicationReferenceDataSource": "AWS::KinesisAnalytics::ApplicationReferenceDataSource"
        },
        "KinesisAnalyticsV2": {
            "Application": "AWS::KinesisAnalyticsV2::Application",
            "ApplicationCloudWatchLoggingOption": "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
            "ApplicationOutput": "AWS::KinesisAnalyticsV2::ApplicationOutput",
            "ApplicationReferenceDataSource": "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource"
        },
        "KinesisFirehose": {
            "DeliveryStream": "AWS::KinesisFirehose::DeliveryStream"
        },
        "KinesisVideo": {
            "SignalingChannel": "AWS::KinesisVideo::SignalingChannel",
            "Stream": "AWS::KinesisVideo::Stream"
        },
        "LakeFormation": {
            "DataCellsFilter": "AWS::LakeFormation::DataCellsFilter",
            "DataLakeSettings": "AWS::LakeFormation::DataLakeSettings",
            "Permissions": "AWS::LakeFormation::Permissions",
            "PrincipalPermissions": "AWS::LakeFormation::PrincipalPermissions",
            "Resource": "AWS::LakeFormation::Resource",
            "Tag": "AWS::LakeFormation::Tag",
            "TagAssociation": "AWS::LakeFormation::TagAssociation"
        },
        "Lambda": {
            "Alias": "AWS::Lambda::Alias",
            "CodeSigningConfig": "AWS::Lambda::CodeSigningConfig",
            "EventInvokeConfig": "AWS::Lambda::EventInvokeConfig",
            "EventSourceMapping": "AWS::Lambda::EventSourceMapping",
            "Function": "AWS::Lambda::Function",
            "LayerVersion": "AWS::Lambda::LayerVersion",
            "LayerVersionPermission": "AWS::Lambda::LayerVersionPermission",
            "Permission": "AWS::Lambda::Permission",
            "Url": "AWS::Lambda::Url",
            "Version": "AWS::Lambda::Version"
        },
        "Lex": {
            "Bot": "AWS::Lex::Bot",
            "BotAlias": "AWS::Lex::BotAlias",
            "BotVersion": "AWS::Lex::BotVersion",
            "ResourcePolicy": "AWS::Lex::ResourcePolicy"
        },
        "LicenseManager": {
            "Grant": "AWS::LicenseManager::Grant",
            "License": "AWS::LicenseManager::License"
        },
        "Lightsail": {
            "Alarm": "AWS::Lightsail::Alarm",
            "Bucket": "AWS::Lightsail::Bucket",
            "Certificate": "AWS::Lightsail::Certificate",
            "Container": "AWS::Lightsail::Container",
            "Database": "AWS::Lightsail::Database",
            "Disk": "AWS::Lightsail::Disk",
            "Distribution": "AWS::Lightsail::Distribution",
            "Instance": "AWS::Lightsail::Instance",
            "LoadBalancer": "AWS::Lightsail::LoadBalancer",
            "LoadBalancerTlsCertificate": "AWS::Lightsail::LoadBalancerTlsCertificate",
            "StaticIp": "AWS::Lightsail::StaticIp"
        },
        "Location": {
            "GeofenceCollection": "AWS::Location::GeofenceCollection",
            "Map": "AWS::Location::Map",
            "PlaceIndex": "AWS::Location::PlaceIndex",
            "RouteCalculator": "AWS::Location::RouteCalculator",
            "Tracker": "AWS::Location::Tracker",
            "TrackerConsumer": "AWS::Location::TrackerConsumer"
        },
        "Logs": {
            "Destination": "AWS::Logs::Destination",
            "LogGroup": "AWS::Logs::LogGroup",
            "LogStream": "AWS::Logs::LogStream",
            "MetricFilter": "AWS::Logs::MetricFilter",
            "QueryDefinition": "AWS::Logs::QueryDefinition",
            "ResourcePolicy": "AWS::Logs::ResourcePolicy",
            "SubscriptionFilter": "AWS::Logs::SubscriptionFilter"
        },
        "LookoutEquipment": {
            "InferenceScheduler": "AWS::LookoutEquipment::InferenceScheduler"
        },
        "LookoutMetrics": {
            "Alert": "AWS::LookoutMetrics::Alert",
            "AnomalyDetector": "AWS::LookoutMetrics::AnomalyDetector"
        },
        "LookoutVision": {
            "Project": "AWS::LookoutVision::Project"
        },
        "M2": {
            "Application": "AWS::M2::Application",
            "Environment": "AWS::M2::Environment"
        },
        "MSK": {
            "BatchScramSecret": "AWS::MSK::BatchScramSecret",
            "Cluster": "AWS::MSK::Cluster",
            "Configuration": "AWS::MSK::Configuration",
            "ServerlessCluster": "AWS::MSK::ServerlessCluster"
        },
        "MWAA": {
            "Environment": "AWS::MWAA::Environment"
        },
        "Macie": {
            "AllowList": "AWS::Macie::AllowList",
            "CustomDataIdentifier": "AWS::Macie::CustomDataIdentifier",
            "FindingsFilter": "AWS::Macie::FindingsFilter",
            "Session": "AWS::Macie::Session"
        },
        "ManagedBlockchain": {
            "Accessor": "AWS::ManagedBlockchain::Accessor",
            "Member": "AWS::ManagedBlockchain::Member",
            "Node": "AWS::ManagedBlockchain::Node"
        },
        "MediaConnect": {
            "Flow": "AWS::MediaConnect::Flow",
            "FlowEntitlement": "AWS::MediaConnect::FlowEntitlement",
            "FlowOutput": "AWS::MediaConnect::FlowOutput",
            "FlowSource": "AWS::MediaConnect::FlowSource",
            "FlowVpcInterface": "AWS::MediaConnect::FlowVpcInterface"
        },
        "MediaConvert": {
            "JobTemplate": "AWS::MediaConvert::JobTemplate",
            "Preset": "AWS::MediaConvert::Preset",
            "Queue": "AWS::MediaConvert::Queue"
        },
        "MediaLive": {
            "Channel": "AWS::MediaLive::Channel",
            "Input": "AWS::MediaLive::Input",
            "InputSecurityGroup": "AWS::MediaLive::InputSecurityGroup"
        },
        "MediaPackage": {
            "Asset": "AWS::MediaPackage::Asset",
            "Channel": "AWS::MediaPackage::Channel",
            "OriginEndpoint": "AWS::MediaPackage::OriginEndpoint",
            "PackagingConfiguration": "AWS::MediaPackage::PackagingConfiguration",
            "PackagingGroup": "AWS::MediaPackage::PackagingGroup"
        },
        "MediaStore": {
            "Container": "AWS::MediaStore::Container"
        },
        "MediaTailor": {
            "PlaybackConfiguration": "AWS::MediaTailor::PlaybackConfiguration"
        },
        "MemoryDB": {
            "ACL": "AWS::MemoryDB::ACL",
            "Cluster": "AWS::MemoryDB::Cluster",
            "ParameterGroup": "AWS::MemoryDB::ParameterGroup",
            "SubnetGroup": "AWS::MemoryDB::SubnetGroup",
            "User": "AWS::MemoryDB::User"
        },
        "Neptune": {
            "DBCluster": "AWS::Neptune::DBCluster",
            "DBClusterParameterGroup": "AWS::Neptune::DBClusterParameterGroup",
            "DBInstance": "AWS::Neptune::DBInstance",
            "DBParameterGroup": "AWS::Neptune::DBParameterGroup",
            "DBSubnetGroup": "AWS::Neptune::DBSubnetGroup"
        },
        "NetworkFirewall": {
            "Firewall": "AWS::NetworkFirewall::Firewall",
            "FirewallPolicy": "AWS::NetworkFirewall::FirewallPolicy",
            "LoggingConfiguration": "AWS::NetworkFirewall::LoggingConfiguration",
            "RuleGroup": "AWS::NetworkFirewall::RuleGroup"
        },
        "NetworkManager": {
            "ConnectAttachment": "AWS::NetworkManager::ConnectAttachment",
            "ConnectPeer": "AWS::NetworkManager::ConnectPeer",
            "CoreNetwork": "AWS::NetworkManager::CoreNetwork",
            "CustomerGatewayAssociation": "AWS::NetworkManager::CustomerGatewayAssociation",
            "Device": "AWS::NetworkManager::Device",
            "GlobalNetwork": "AWS::NetworkManager::GlobalNetwork",
            "Link": "AWS::NetworkManager::Link",
            "LinkAssociation": "AWS::NetworkManager::LinkAssociation",
            "Site": "AWS::NetworkManager::Site",
            "SiteToSiteVpnAttachment": "AWS::NetworkManager::SiteToSiteVpnAttachment",
            "TransitGatewayPeering": "AWS::NetworkManager::TransitGatewayPeering",
            "TransitGatewayRegistration": "AWS::NetworkManager::TransitGatewayRegistration",
            "TransitGatewayRouteTableAttachment": "AWS::NetworkManager::TransitGatewayRouteTableAttachment",
            "VpcAttachment": "AWS::NetworkManager::VpcAttachment"
        },
        "NimbleStudio": {
            "LaunchProfile": "AWS::NimbleStudio::LaunchProfile",
            "StreamingImage": "AWS::NimbleStudio::StreamingImage",
            "Studio": "AWS::NimbleStudio::Studio",
            "StudioComponent": "AWS::NimbleStudio::StudioComponent"
        },
        "Oam": {
            "Link": "AWS::Oam::Link",
            "Sink": "AWS::Oam::Sink"
        },
        "Omics": {
            "AnnotationStore": "AWS::Omics::AnnotationStore",
            "ReferenceStore": "AWS::Omics::ReferenceStore",
            "RunGroup": "AWS::Omics::RunGroup",
            "SequenceStore": "AWS::Omics::SequenceStore",
            "VariantStore": "AWS::Omics::VariantStore",
            "Workflow": "AWS::Omics::Workflow"
        },
        "OpenSearchServerless": {
            "AccessPolicy": "AWS::OpenSearchServerless::AccessPolicy",
            "Collection": "AWS::OpenSearchServerless::Collection",
            "SecurityConfig": "AWS::OpenSearchServerless::SecurityConfig",
            "SecurityPolicy": "AWS::OpenSearchServerless::SecurityPolicy",
            "VpcEndpoint": "AWS::OpenSearchServerless::VpcEndpoint"
        },
        "OpenSearchService": {
            "Domain": "AWS::OpenSearchService::Domain"
        },
        "OpsWorks": {
            "App": "AWS::OpsWorks::App",
            "ElasticLoadBalancerAttachment": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
            "Instance": "AWS::OpsWorks::Instance",
            "Layer": "AWS::OpsWorks::Layer",
            "Stack": "AWS::OpsWorks::Stack",
            "UserProfile": "AWS::OpsWorks::UserProfile",
            "Volume": "AWS::OpsWorks::Volume"
        },
        "OpsWorksCM": {
            "Server": "AWS::OpsWorksCM::Server"
        },
        "Organizations": {
            "Account": "AWS::Organizations::Account",
            "OrganizationalUnit": "AWS::Organizations::OrganizationalUnit",
            "Policy": "AWS::Organizations::Policy",
            "ResourcePolicy": "AWS::Organizations::ResourcePolicy"
        },
        "Panorama": {
            "ApplicationInstance": "AWS::Panorama::ApplicationInstance",
            "Package": "AWS::Panorama::Package",
            "PackageVersion": "AWS::Panorama::PackageVersion"
        },
        "Personalize": {
            "Dataset": "AWS::Personalize::Dataset",
            "DatasetGroup": "AWS::Personalize::DatasetGroup",
            "Schema": "AWS::Personalize::Schema",
            "Solution": "AWS::Personalize::Solution"
        },
        "Pinpoint": {
            "ADMChannel": "AWS::Pinpoint::ADMChannel",
            "APNSChannel": "AWS::Pinpoint::APNSChannel",
            "APNSSandboxChannel": "AWS::Pinpoint::APNSSandboxChannel",
            "APNSVoipChannel": "AWS::Pinpoint::APNSVoipChannel",
            "APNSVoipSandboxChannel": "AWS::Pinpoint::APNSVoipSandboxChannel",
            "App": "AWS::Pinpoint::App",
            "ApplicationSettings": "AWS::Pinpoint::ApplicationSettings",
            "BaiduChannel": "AWS::Pinpoint::BaiduChannel",
            "Campaign": "AWS::Pinpoint::Campaign",
            "EmailChannel": "AWS::Pinpoint::EmailChannel",
            "EmailTemplate": "AWS::Pinpoint::EmailTemplate",
            "EventStream": "AWS::Pinpoint::EventStream",
            "GCMChannel": "AWS::Pinpoint::GCMChannel",
            "InAppTemplate": "AWS::Pinpoint::InAppTemplate",
            "PushTemplate": "AWS::Pinpoint::PushTemplate",
            "SMSChannel": "AWS::Pinpoint::SMSChannel",
            "Segment": "AWS::Pinpoint::Segment",
            "SmsTemplate": "AWS::Pinpoint::SmsTemplate",
            "VoiceChannel": "AWS::Pinpoint::VoiceChannel"
        },
        "PinpointEmail": {
            "ConfigurationSet": "AWS::PinpointEmail::ConfigurationSet",
            "ConfigurationSetEventDestination": "AWS::PinpointEmail::ConfigurationSetEventDestination",
            "DedicatedIpPool": "AWS::PinpointEmail::DedicatedIpPool",
            "Identity": "AWS::PinpointEmail::Identity"
        },
        "Pipes": {
            "Pipe": "AWS::Pipes::Pipe"
        },
        "QLDB": {
            "Ledger": "AWS::QLDB::Ledger",
            "Stream": "AWS::QLDB::Stream"
        },
        "QuickSight": {
            "Analysis": "AWS::QuickSight::Analysis",
            "Dashboard": "AWS::QuickSight::Dashboard",
            "DataSet": "AWS::QuickSight::DataSet",
            "DataSource": "AWS::QuickSight::DataSource",
            "Template": "AWS::QuickSight::Template",
            "Theme": "AWS::QuickSight::Theme"
        },
        "RAM": {
            "ResourceShare": "AWS::RAM::ResourceShare"
        },
        "RDS": {
            "DBCluster": "AWS::RDS::DBCluster",
            "DBClusterParameterGroup": "AWS::RDS::DBClusterParameterGroup",
            "DBInstance": "AWS::RDS::DBInstance",
            "DBParameterGroup": "AWS::RDS::DBParameterGroup",
            "DBProxy": "AWS::RDS::DBProxy",
            "DBProxyEndpoint": "AWS::RDS::DBProxyEndpoint",
            "DBProxyTargetGroup": "AWS::RDS::DBProxyTargetGroup",
            "DBSecurityGroup": "AWS::RDS::DBSecurityGroup",
            "DBSecurityGroupIngress": "AWS::RDS::DBSecurityGroupIngress",
            "DBSubnetGroup": "AWS::RDS::DBSubnetGroup",
            "EventSubscription": "AWS::RDS::EventSubscription",
            "GlobalCluster": "AWS::RDS::GlobalCluster",
            "OptionGroup": "AWS::RDS::OptionGroup"
        },
        "RUM": {
            "AppMonitor": "AWS::RUM::AppMonitor"
        },
        "Redshift": {
            "Cluster": "AWS::Redshift::Cluster",
            "ClusterParameterGroup": "AWS::Redshift::ClusterParameterGroup",
            "ClusterSecurityGroup": "AWS::Redshift::ClusterSecurityGroup",
            "ClusterSecurityGroupIngress": "AWS::Redshift::ClusterSecurityGroupIngress",
            "ClusterSubnetGroup": "AWS::Redshift::ClusterSubnetGroup",
            "EndpointAccess": "AWS::Redshift::EndpointAccess",
            "EndpointAuthorization": "AWS::Redshift::EndpointAuthorization",
            "EventSubscription": "AWS::Redshift::EventSubscription",
            "ScheduledAction": "AWS::Redshift::ScheduledAction"
        },
        "RedshiftServerless": {
            "Namespace": "AWS::RedshiftServerless::Namespace",
            "Workgroup": "AWS::RedshiftServerless::Workgroup"
        },
        "RefactorSpaces": {
            "Application": "AWS::RefactorSpaces::Application",
            "Environment": "AWS::RefactorSpaces::Environment",
            "Route": "AWS::RefactorSpaces::Route",
            "Service": "AWS::RefactorSpaces::Service"
        },
        "Rekognition": {
            "Collection": "AWS::Rekognition::Collection",
            "Project": "AWS::Rekognition::Project",
            "StreamProcessor": "AWS::Rekognition::StreamProcessor"
        },
        "ResilienceHub": {
            "App": "AWS::ResilienceHub::App",
            "ResiliencyPolicy": "AWS::ResilienceHub::ResiliencyPolicy"
        },
        "ResourceExplorer2": {
            "DefaultViewAssociation": "AWS::ResourceExplorer2::DefaultViewAssociation",
            "Index": "AWS::ResourceExplorer2::Index",
            "View": "AWS::ResourceExplorer2::View"
        },
        "ResourceGroups": {
            "Group": "AWS::ResourceGroups::Group"
        },
        "RoboMaker": {
            "Fleet": "AWS::RoboMaker::Fleet",
            "Robot": "AWS::RoboMaker::Robot",
            "RobotApplication": "AWS::RoboMaker::RobotApplication",
            "RobotApplicationVersion": "AWS::RoboMaker::RobotApplicationVersion",
            "SimulationApplication": "AWS::RoboMaker::SimulationApplication",
            "SimulationApplicationVersion": "AWS::RoboMaker::SimulationApplicationVersion"
        },
        "RolesAnywhere": {
            "CRL": "AWS::RolesAnywhere::CRL",
            "Profile": "AWS::RolesAnywhere::Profile",
            "TrustAnchor": "AWS::RolesAnywhere::TrustAnchor"
        },
        "Route53": {
            "CidrCollection": "AWS::Route53::CidrCollection",
            "DNSSEC": "AWS::Route53::DNSSEC",
            "HealthCheck": "AWS::Route53::HealthCheck",
            "HostedZone": "AWS::Route53::HostedZone",
            "KeySigningKey": "AWS::Route53::KeySigningKey",
            "RecordSet": "AWS::Route53::RecordSet",
            "RecordSetGroup": "AWS::Route53::RecordSetGroup"
        },
        "Route53RecoveryControl": {
            "Cluster": "AWS::Route53RecoveryControl::Cluster",
            "ControlPanel": "AWS::Route53RecoveryControl::ControlPanel",
            "RoutingControl": "AWS::Route53RecoveryControl::RoutingControl",
            "SafetyRule": "AWS::Route53RecoveryControl::SafetyRule"
        },
        "Route53RecoveryReadiness": {
            "Cell": "AWS::Route53RecoveryReadiness::Cell",
            "ReadinessCheck": "AWS::Route53RecoveryReadiness::ReadinessCheck",
            "RecoveryGroup": "AWS::Route53RecoveryReadiness::RecoveryGroup",
            "ResourceSet": "AWS::Route53RecoveryReadiness::ResourceSet"
        },
        "Route53Resolver": {
            "FirewallDomainList": "AWS::Route53Resolver::FirewallDomainList",
            "FirewallRuleGroup": "AWS::Route53Resolver::FirewallRuleGroup",
            "FirewallRuleGroupAssociation": "AWS::Route53Resolver::FirewallRuleGroupAssociation",
            "ResolverConfig": "AWS::Route53Resolver::ResolverConfig",
            "ResolverDNSSECConfig": "AWS::Route53Resolver::ResolverDNSSECConfig",
            "ResolverEndpoint": "AWS::Route53Resolver::ResolverEndpoint",
            "ResolverQueryLoggingConfig": "AWS::Route53Resolver::ResolverQueryLoggingConfig",
            "ResolverQueryLoggingConfigAssociation": "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
            "ResolverRule": "AWS::Route53Resolver::ResolverRule",
            "ResolverRuleAssociation": "AWS::Route53Resolver::ResolverRuleAssociation"
        },
        "S3": {
            "AccessPoint": "AWS::S3::AccessPoint",
            "Bucket": "AWS::S3::Bucket",
            "BucketPolicy": "AWS::S3::BucketPolicy",
            "MultiRegionAccessPoint": "AWS::S3::MultiRegionAccessPoint",
            "MultiRegionAccessPointPolicy": "AWS::S3::MultiRegionAccessPointPolicy",
            "StorageLens": "AWS::S3::StorageLens"
        },
        "S3ObjectLambda": {
            "AccessPoint": "AWS::S3ObjectLambda::AccessPoint",
            "AccessPointPolicy": "AWS::S3ObjectLambda::AccessPointPolicy"
        },
        "S3Outposts": {
            "AccessPoint": "AWS::S3Outposts::AccessPoint",
            "Bucket": "AWS::S3Outposts::Bucket",
            "BucketPolicy": "AWS::S3Outposts::BucketPolicy",
            "Endpoint": "AWS::S3Outposts::Endpoint"
        },
        "SDB": {
            "Domain": "AWS::SDB::Domain"
        },
        "SES": {
            "ConfigurationSet": "AWS::SES::ConfigurationSet",
            "ConfigurationSetEventDestination": "AWS::SES::ConfigurationSetEventDestination",
            "ContactList": "AWS::SES::ContactList",
            "DedicatedIpPool": "AWS::SES::DedicatedIpPool",
            "EmailIdentity": "AWS::SES::EmailIdentity",
            "ReceiptFilter": "AWS::SES::ReceiptFilter",
            "ReceiptRule": "AWS::SES::ReceiptRule",
            "ReceiptRuleSet": "AWS::SES::ReceiptRuleSet",
            "Template": "AWS::SES::Template",
            "VdmAttributes": "AWS::SES::VdmAttributes"
        },
        "SNS": {
            "Subscription": "AWS::SNS::Subscription",
            "Topic": "AWS::SNS::Topic",
            "TopicPolicy": "AWS::SNS::TopicPolicy"
        },
        "SQS": {
            "Queue": "AWS::SQS::Queue",
            "QueuePolicy": "AWS::SQS::QueuePolicy"
        },
        "SSM": {
            "Association": "AWS::SSM::Association",
            "Document": "AWS::SSM::Document",
            "MaintenanceWindow": "AWS::SSM::MaintenanceWindow",
            "MaintenanceWindowTarget": "AWS::SSM::MaintenanceWindowTarget",
            "MaintenanceWindowTask": "AWS::SSM::MaintenanceWindowTask",
            "Parameter": "AWS::SSM::Parameter",
            "PatchBaseline": "AWS::SSM::PatchBaseline",
            "ResourceDataSync": "AWS::SSM::ResourceDataSync",
            "ResourcePolicy": "AWS::SSM::ResourcePolicy"
        },
        "SSMContacts": {
            "Contact": "AWS::SSMContacts::Contact",
            "ContactChannel": "AWS::SSMContacts::ContactChannel"
        },
        "SSMIncidents": {
            "ReplicationSet": "AWS::SSMIncidents::ReplicationSet",
            "ResponsePlan": "AWS::SSMIncidents::ResponsePlan"
        },
        "SSO": {
            "Assignment": "AWS::SSO::Assignment",
            "InstanceAccessControlAttributeConfiguration": "AWS::SSO::InstanceAccessControlAttributeConfiguration",
            "PermissionSet": "AWS::SSO::PermissionSet"
        },
        "SageMaker": {
            "App": "AWS::SageMaker::App",
            "AppImageConfig": "AWS::SageMaker::AppImageConfig",
            "CodeRepository": "AWS::SageMaker::CodeRepository",
            "DataQualityJobDefinition": "AWS::SageMaker::DataQualityJobDefinition",
            "Device": "AWS::SageMaker::Device",
            "DeviceFleet": "AWS::SageMaker::DeviceFleet",
            "Domain": "AWS::SageMaker::Domain",
            "Endpoint": "AWS::SageMaker::Endpoint",
            "EndpointConfig": "AWS::SageMaker::EndpointConfig",
            "FeatureGroup": "AWS::SageMaker::FeatureGroup",
            "Image": "AWS::SageMaker::Image",
            "ImageVersion": "AWS::SageMaker::ImageVersion",
            "InferenceExperiment": "AWS::SageMaker::InferenceExperiment",
            "Model": "AWS::SageMaker::Model",
            "ModelBiasJobDefinition": "AWS::SageMaker::ModelBiasJobDefinition",
            "ModelCard": "AWS::SageMaker::ModelCard",
            "ModelExplainabilityJobDefinition": "AWS::SageMaker::ModelExplainabilityJobDefinition",
            "ModelPackage": "AWS::SageMaker::ModelPackage",
            "ModelPackageGroup": "AWS::SageMaker::ModelPackageGroup",
            "ModelQualityJobDefinition": "AWS::SageMaker::ModelQualityJobDefinition",
            "MonitoringSchedule": "AWS::SageMaker::MonitoringSchedule",
            "NotebookInstance": "AWS::SageMaker::NotebookInstance",
            "NotebookInstanceLifecycleConfig": "AWS::SageMaker::NotebookInstanceLifecycleConfig",
            "Pipeline": "AWS::SageMaker::Pipeline",
            "Project": "AWS::SageMaker::Project",
            "Space": "AWS::SageMaker::Space",
            "UserProfile": "AWS::SageMaker::UserProfile",
            "Workteam": "AWS::SageMaker::Workteam"
        },
        "Scheduler": {
            "Schedule": "AWS::Scheduler::Schedule",
            "ScheduleGroup": "AWS::Scheduler::ScheduleGroup"
        },
        "SecretsManager": {
            "ResourcePolicy": "AWS::SecretsManager::ResourcePolicy",
            "RotationSchedule": "AWS::SecretsManager::RotationSchedule",
            "Secret": "AWS::SecretsManager::Secret",
            "SecretTargetAttachment": "AWS::SecretsManager::SecretTargetAttachment"
        },
        "SecurityHub": {
            "Hub": "AWS::SecurityHub::Hub"
        },
        "Serverless": {
            "Api": "AWS::Serverless::Api",
            "Application": "AWS::Serverless::Application",
            "Function": "AWS::Serverless::Function",
            "HttpApi": "AWS::Serverless::HttpApi",
            "LayerVersion": "AWS::Serverless::LayerVersion",
            "SimpleTable": "AWS::Serverless::SimpleTable",
            "StateMachine": "AWS::Serverless::StateMachine"
        },
        "ServiceCatalog": {
            "AcceptedPortfolioShare": "AWS::ServiceCatalog::AcceptedPortfolioShare",
            "CloudFormationProduct": "AWS::ServiceCatalog::CloudFormationProduct",
            "CloudFormationProvisionedProduct": "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
            "LaunchNotificationConstraint": "AWS::ServiceCatalog::LaunchNotificationConstraint",
            "LaunchRoleConstraint": "AWS::ServiceCatalog::LaunchRoleConstraint",
            "LaunchTemplateConstraint": "AWS::ServiceCatalog::LaunchTemplateConstraint",
            "Portfolio": "AWS::ServiceCatalog::Portfolio",
            "PortfolioPrincipalAssociation": "AWS::ServiceCatalog::PortfolioPrincipalAssociation",
            "PortfolioProductAssociation": "AWS::ServiceCatalog::PortfolioProductAssociation",
            "PortfolioShare": "AWS::ServiceCatalog::PortfolioShare",
            "ResourceUpdateConstraint": "AWS::ServiceCatalog::ResourceUpdateConstraint",
            "ServiceAction": "AWS::ServiceCatalog::ServiceAction",
            "ServiceActionAssociation": "AWS::ServiceCatalog::ServiceActionAssociation",
            "StackSetConstraint": "AWS::ServiceCatalog::StackSetConstraint",
            "TagOption": "AWS::ServiceCatalog::TagOption",
            "TagOptionAssociation": "AWS::ServiceCatalog::TagOptionAssociation"
        },
        "ServiceCatalogAppRegistry": {
            "Application": "AWS::ServiceCatalogAppRegistry::Application",
            "AttributeGroup": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
            "AttributeGroupAssociation": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
            "ResourceAssociation": "AWS::ServiceCatalogAppRegistry::ResourceAssociation"
        },
        "ServiceDiscovery": {
            "HttpNamespace": "AWS::ServiceDiscovery::HttpNamespace",
            "Instance": "AWS::ServiceDiscovery::Instance",
            "PrivateDnsNamespace": "AWS::ServiceDiscovery::PrivateDnsNamespace",
            "PublicDnsNamespace": "AWS::ServiceDiscovery::PublicDnsNamespace",
            "Service": "AWS::ServiceDiscovery::Service"
        },
        "Signer": {
            "ProfilePermission": "AWS::Signer::ProfilePermission",
            "SigningProfile": "AWS::Signer::SigningProfile"
        },
        "SimSpaceWeaver": {
            "Simulation": "AWS::SimSpaceWeaver::Simulation"
        },
        "StepFunctions": {
            "Activity": "AWS::StepFunctions::Activity",
            "StateMachine": "AWS::StepFunctions::StateMachine"
        },
        "SupportApp": {
            "AccountAlias": "AWS::SupportApp::AccountAlias",
            "SlackChannelConfiguration": "AWS::SupportApp::SlackChannelConfiguration",
            "SlackWorkspaceConfiguration": "AWS::SupportApp::SlackWorkspaceConfiguration"
        },
        "Synthetics": {
            "Canary": "AWS::Synthetics::Canary",
            "Group": "AWS::Synthetics::Group"
        },
        "SystemsManagerSAP": {
            "Application": "AWS::SystemsManagerSAP::Application"
        },
        "Timestream": {
            "Database": "AWS::Timestream::Database",
            "ScheduledQuery": "AWS::Timestream::ScheduledQuery",
            "Table": "AWS::Timestream::Table"
        },
        "Transfer": {
            "Agreement": "AWS::Transfer::Agreement",
            "Certificate": "AWS::Transfer::Certificate",
            "Connector": "AWS::Transfer::Connector",
            "Profile": "AWS::Transfer::Profile",
            "Server": "AWS::Transfer::Server",
            "User": "AWS::Transfer::User",
            "Workflow": "AWS::Transfer::Workflow"
        },
        "VoiceID": {
            "Domain": "AWS::VoiceID::Domain"
        },
        "VpcLattice": {
            "AccessLogSubscription": "AWS::VpcLattice::AccessLogSubscription",
            "AuthPolicy": "AWS::VpcLattice::AuthPolicy",
            "Listener": "AWS::VpcLattice::Listener",
            "ResourcePolicy": "AWS::VpcLattice::ResourcePolicy",
            "Rule": "AWS::VpcLattice::Rule",
            "Service": "AWS::VpcLattice::Service",
            "ServiceNetwork": "AWS::VpcLattice::ServiceNetwork",
            "ServiceNetworkServiceAssociation": "AWS::VpcLattice::ServiceNetworkServiceAssociation",
            "ServiceNetworkVpcAssociation": "AWS::VpcLattice::ServiceNetworkVpcAssociation",
            "TargetGroup": "AWS::VpcLattice::TargetGroup"
        },
        "WAF": {
            "ByteMatchSet": "AWS::WAF::ByteMatchSet",
            "IPSet": "AWS::WAF::IPSet",
            "Rule": "AWS::WAF::Rule",
            "SizeConstraintSet": "AWS::WAF::SizeConstraintSet",
            "SqlInjectionMatchSet": "AWS::WAF::SqlInjectionMatchSet",
            "WebACL": "AWS::WAF::WebACL",
            "XssMatchSet": "AWS::WAF::XssMatchSet"
        },
        "WAFRegional": {
            "ByteMatchSet": "AWS::WAFRegional::ByteMatchSet",
            "GeoMatchSet": "AWS::WAFRegional::GeoMatchSet",
            "IPSet": "AWS::WAFRegional::IPSet",
            "RateBasedRule": "AWS::WAFRegional::RateBasedRule",
            "RegexPatternSet": "AWS::WAFRegional::RegexPatternSet",
            "Rule": "AWS::WAFRegional::Rule",
            "SizeConstraintSet": "AWS::WAFRegional::SizeConstraintSet",
            "SqlInjectionMatchSet": "AWS::WAFRegional::SqlInjectionMatchSet",
            "WebACL": "AWS::WAFRegional::WebACL",
            "WebACLAssociation": "AWS::WAFRegional::WebACLAssociation",
            "XssMatchSet": "AWS::WAFRegional::XssMatchSet"
        },
        "WAFv2": {
            "IPSet": "AWS::WAFv2::IPSet",
            "LoggingConfiguration": "AWS::WAFv2::LoggingConfiguration",
            "RegexPatternSet": "AWS::WAFv2::RegexPatternSet",
            "RuleGroup": "AWS::WAFv2::RuleGroup",
            "WebACL": "AWS::WAFv2::WebACL",
            "WebACLAssociation": "AWS::WAFv2::WebACLAssociation"
        },
        "Wisdom": {
            "Assistant": "AWS::Wisdom::Assistant",
            "AssistantAssociation": "AWS::Wisdom::AssistantAssociation",
            "KnowledgeBase": "AWS::Wisdom::KnowledgeBase"
        },
        "WorkSpaces": {
            "ConnectionAlias": "AWS::WorkSpaces::ConnectionAlias",
            "Workspace": "AWS::WorkSpaces::Workspace"
        },
        "XRay": {
            "Group": "AWS::XRay::Group",
            "ResourcePolicy": "AWS::XRay::ResourcePolicy",
            "SamplingRule": "AWS::XRay::SamplingRule"
        },
        "ASK": {
            "Skill": "Alexa::ASK::Skill"
        }
    };
})(CfnSpec || (exports.CfnSpec = CfnSpec = {}));
//# sourceMappingURL=data:application/json;base64,