"use strict";
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nx = void 0;
var Nx;
(function (Nx) {
    /**
     * Supported enums for a TargetDependency.
     */
    let TargetDependencyProject;
    (function (TargetDependencyProject) {
        /**
         * Only rely on the package where the target is called.
         *
         * This is usually done for test like targets where you only want to run unit
         * tests on the target packages without testing all dependent packages.
         */
        TargetDependencyProject["SELF"] = "self";
        /**
         * Target relies on executing the target against all dependencies first.
         *
         * This is usually done for build like targets where you want to build all
         * dependant projects first.
         */
        TargetDependencyProject["DEPENDENCIES"] = "dependencies";
    })(TargetDependencyProject = Nx.TargetDependencyProject || (Nx.TargetDependencyProject = {}));
})(Nx || (exports.Nx = Nx = {}));
//# sourceMappingURL=data:application/json;base64,