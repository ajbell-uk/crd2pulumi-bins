"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonorepoTsProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0 */
const path = require("path");
const projen_1 = require("projen");
const javascript_1 = require("projen/lib/javascript");
const typescript_1 = require("projen/lib/typescript");
const syncpack_options_1 = require("./syncpack-options");
const nx_configurator_1 = require("../../components/nx-configurator");
const nx_project_1 = require("../../components/nx-project");
const projen_dependency_1 = require("../../components/projen-dependency");
const utils_1 = require("../../utils");
/**
 * This project type will bootstrap a monorepo with support for polygot
 * builds, build caching, dependency graph visualization and much more.
 *
 * @pjid monorepo-ts
 */
class MonorepoTsProject extends typescript_1.TypeScriptProject {
    constructor(options) {
        const defaultReleaseBranch = options.defaultReleaseBranch ?? "main";
        super({
            ...options,
            github: options.github ?? false,
            package: options.package ?? false,
            projenCommand: options.packageManager
                ? utils_1.NodePackageUtils.command.projen(options.packageManager)
                : undefined,
            prettier: options.prettier ?? true,
            projenrcTs: true,
            release: options.release ?? false,
            jest: options.jest ?? false,
            sampleCode: false, // root should never have sample code,
            gitignore: [".tmp", ...(options.gitignore ?? [])],
            defaultReleaseBranch,
            eslintOptions: options.eslintOptions ?? {
                dirs: ["."],
                ignorePatterns: ["packages/**/*.*"],
            },
            tsconfig: options.tsconfig ?? {
                compilerOptions: {
                    rootDir: ".",
                },
                include: ["**/*.ts", ".projenrc.ts"],
            },
            peerDeps: ["nx@^19", ...(options.peerDeps || [])],
            devDeps: ["nx@^19", "@aws/pdk@^0", ...(options.devDeps || [])],
            deps: [
                "aws-cdk-lib",
                "cdk-nag",
                "@aws-cdk/aws-cognito-identitypool-alpha@latest",
                ...(options.deps || []),
            ],
            projenVersion: options.projenVersion ?? projen_dependency_1.DEFAULT_PROJEN_VERSION,
        });
        this.subNodeProjectResolves = [];
        this.projenVersion = options.projenVersion ?? projen_dependency_1.DEFAULT_PROJEN_VERSION;
        this.nxConfigurator = new nx_configurator_1.NxConfigurator(this, {
            defaultReleaseBranch,
            licenseOptions: options.licenseOptions,
        });
        this._options = options;
        // engines
        this.package.addEngine("node", ">=16");
        this.package.setScript("install:ci", !this.ejected
            ? utils_1.NodePackageUtils.command.exec(this.package.packageManager, "projen install:ci")
            : "scripts/run-task install:ci");
        switch (this.package.packageManager) {
            case javascript_1.NodePackageManager.BUN: {
                this.package.addEngine("bun", ">=1");
                break;
            }
            case javascript_1.NodePackageManager.PNPM: {
                // https://pnpm.io/package_json
                this.package.addEngine("pnpm", ">=8");
                break;
            }
            case javascript_1.NodePackageManager.YARN_CLASSIC:
            case javascript_1.NodePackageManager.YARN: {
                this.package.addEngine("yarn", ">=1 <2");
                break;
            }
            case javascript_1.NodePackageManager.YARN_BERRY:
            case javascript_1.NodePackageManager.YARN2: {
                this.package.addEngine("yarn", ">=2");
                // Yarn Berry cannot call yarn exec without an install first! Use NPX instead.
                this.package.setScript("install:ci", !this.ejected
                    ? utils_1.NodePackageUtils.command.exec(javascript_1.NodePackageManager.NPM, "projen install:ci")
                    : "scripts/run-task install:ci");
                this.package.setScript("install", !this.ejected
                    ? utils_1.NodePackageUtils.command.exec(javascript_1.NodePackageManager.NPM, "projen install")
                    : "scripts/run-task install");
                this.gitignore.addPatterns(".yarn/*", ".pnp.cjs", "!.yarn/releases", "!.yarn/plugins");
                break;
            }
            case javascript_1.NodePackageManager.NPM: {
                // Allow older versions of peer deps to resolv compatibility issues
                this.tasks.tryFind("install")?.reset("npm install --legacy-peer-deps");
                this.tasks.tryFind("install:ci")?.reset("npm ci --legacy-peer-deps");
                break;
            }
        }
        this.workspaceConfig = options.workspaceConfig;
        this.workspacePackages = options.workspaceConfig?.additionalPackages ?? [];
        // Never publish a monorepo root package.
        this.package.addField("private", true);
        // Add alias task for "projen" to synthesize workspace
        !this.ejected &&
            this.package.setScript("synth-workspace", utils_1.NodePackageUtils.command.projen(this.package.packageManager));
        // Map tasks to nx run-many
        if (options.scripts == null || options.scripts.build == null) {
            this.nxConfigurator._overrideNxBuildTask(this.buildTask, { target: "build" }, { force: true });
        }
        if (options.scripts == null || options.scripts["pre-compile"] == null) {
            this.nxConfigurator._overrideNxBuildTask(this.preCompileTask, {
                target: "pre-compile",
            });
        }
        if (options.scripts == null || options.scripts.compile == null) {
            this.nxConfigurator._overrideNxBuildTask(this.compileTask, {
                target: "compile",
            });
        }
        if (options.scripts == null || options.scripts["post-compile"] == null) {
            this.nxConfigurator._overrideNxBuildTask(this.postCompileTask, {
                target: "post-compile",
            });
        }
        if (options.scripts == null || options.scripts.test == null) {
            this.nxConfigurator._overrideNxBuildTask(this.testTask, {
                target: "test",
            });
        }
        if (options.scripts == null || options.scripts.eslint == null) {
            // The Projenrc component of TypeScriptProject resets the eslint task as part of preSynthesize which would undo
            // our changes, so we disable further resets.
            this.nxConfigurator._overrideNxBuildTask(this.eslint?.eslintTask, { target: "eslint" }, { disableReset: true });
        }
        if (options.scripts == null || options.scripts.package == null) {
            this.nxConfigurator._overrideNxBuildTask(this.packageTask, {
                target: "package",
            });
        }
        if (options.scripts == null || options.scripts.prepare == null) {
            this.nxConfigurator._overrideNxBuildTask("prepare", {
                target: "prepare",
            });
        }
        if (options.scripts == null || options.scripts.watch == null) {
            this.nxConfigurator._overrideNxBuildTask(this.watchTask, {
                target: "watch",
                noBail: false,
                ignoreCycles: true,
                skipCache: true,
                outputStyle: "stream",
            });
        }
        this.package.addPackageResolutions("@types/babel__traverse@7.18.2", "wrap-ansi@^7.0.0");
        if (this.package.packageManager !== javascript_1.NodePackageManager.BUN) {
            this.package.addPackageResolutions("@zkochan/js-yaml@npm:js-yaml@4.1.0");
        }
    }
    /**
     * @inheritdoc
     */
    get nx() {
        return this.nxConfigurator.nx;
    }
    /**
     * @inheritdoc
     */
    execNxRunManyCommand(options) {
        return this.nxConfigurator.execNxRunManyCommand(options);
    }
    /**
     * @inheritdoc
     */
    composeNxRunManyCommand(options) {
        return this.nxConfigurator.composeNxRunManyCommand(options);
    }
    /**
     * @inheritdoc
     */
    addNxRunManyTask(name, options) {
        return this.nxConfigurator.addNxRunManyTask(name, options);
    }
    /**
     * @inheritdoc
     */
    addImplicitDependency(dependent, dependee) {
        this.nxConfigurator.addImplicitDependency(dependent, dependee);
    }
    /**
     * @inheritdoc
     */
    addJavaDependency(dependent, dependee) {
        this.nxConfigurator.addJavaDependency(dependent, dependee);
    }
    /**
     * @inheritdoc
     */
    addPythonPoetryDependency(dependent, dependee) {
        this.nxConfigurator.addPythonPoetryDependency(dependent, dependee);
    }
    /**
     * Add one or more additional package globs to the workspace.
     * @param packageGlobs paths to the package to include in the workspace (for example packages/my-package)
     */
    addWorkspacePackages(...packageGlobs) {
        // Any subprojects that were added since the last call to this method need to be added first, in order to ensure
        // we add the workspace packages in a sane order.
        const relativeSubProjectWorkspacePackages = this.sortedSubProjects
            .filter((s) => utils_1.ProjectUtils.isNamedInstanceOf(s, javascript_1.NodeProject))
            .map((project) => path.relative(this.outdir, project.outdir));
        const existingWorkspacePackages = new Set(this.workspacePackages);
        this.workspacePackages.push(...relativeSubProjectWorkspacePackages.filter((pkg) => !existingWorkspacePackages.has(pkg)));
        // Add the additional packages next
        this.workspacePackages.push(...packageGlobs);
    }
    /** Get consistently sorted list of subprojects */
    get sortedSubProjects() {
        return this.subprojects
            .slice()
            .sort((a, b) => a.name.localeCompare(b.name));
    }
    /**
     * Create symbolic links to all local workspace bins. This enables the usage of bins the same
     * way as consumers of the packages have when installing from the registry.
     */
    linkLocalWorkspaceBins() {
        const bins = [];
        this.subprojects.forEach((subProject) => {
            if (utils_1.ProjectUtils.isNamedInstanceOf(subProject, javascript_1.NodeProject) &&
                subProject.name !== "@aws/pdk") {
                const pkgBins = subProject.package.manifest.bin() || {};
                bins.push(...Object.entries(pkgBins).map(([cmd, bin]) => {
                    const resolvedBin = path.join("$PWD", path.relative(this.outdir, subProject.outdir), bin);
                    return [cmd, resolvedBin];
                }));
            }
        });
        const linkTask = this.addTask("workspace:bin:link", {
            steps: bins.map(([cmd, bin]) => ({
                exec: `ln -s ${bin} ${utils_1.NodePackageUtils.command.bin(this.package.packageManager, cmd)} &>/dev/null; exit 0;`,
            })),
        });
        (this.tasks.tryFind("prepare") || this.addTask("prepare")).spawn(linkTask);
    }
    addUpgradeDepsTask() {
        if (this._options.monorepoUpgradeDeps !== false) {
            this.addDevDeps("npm-check-updates", "syncpack@^13");
            const upgradeDepsTask = this.addTask(this._options.monorepoUpgradeDepsOptions?.taskName || "upgrade-deps", {
                description: "Upgrade dependencies in the monorepo",
            });
            // Run the upgrade task for any non-node subprojects
            const nonNodeSubprojects = this.subprojects.filter((p) => !utils_1.NodePackageUtils.isNodeProject(p));
            if (nonNodeSubprojects.length > 0) {
                this.nxConfigurator._overrideNxBuildTask(upgradeDepsTask, {
                    target: "upgrade",
                    projects: nonNodeSubprojects.map((p) => p.name),
                });
            }
            this.nxConfigurator._configurePythonSubprojectUpgradeDeps(this, upgradeDepsTask);
            // Upgrade node subprojects together
            upgradeDepsTask.exec(utils_1.NodePackageUtils.command.exec(this.package.packageManager, "npm-check-updates", "--reject projen", "--deep", "--rejectVersion", "0.0.0", "-u", "--dep", "prod,dev,peer,optional,bundle", "--target=minor"));
            // Sync dependency versions across node subprojects
            upgradeDepsTask.exec(utils_1.NodePackageUtils.command.exec(this.package.packageManager, "syncpack", "fix-mismatches"));
            upgradeDepsTask.exec(`rm ${this.package.lockFile}`);
            upgradeDepsTask.exec(utils_1.NodePackageUtils.command.install(this.package.packageManager));
            !this.ejected &&
                upgradeDepsTask.exec(utils_1.NodePackageUtils.command.exec(this.package.packageManager, "projen"));
            new projen_1.JsonFile(this, ".syncpackrc.json", {
                obj: this._options.monorepoUpgradeDepsOptions?.syncpackConfig ||
                    syncpack_options_1.Syncpack.DEFAULT_CONFIG,
                readonly: true,
            });
        }
    }
    preSynthesize() {
        this.addUpgradeDepsTask();
        utils_1.NodePackageUtils.removeProjenScript(this);
        this.nxConfigurator.preSynthesize();
        super.preSynthesize();
        if (this._options.workspaceConfig?.linkLocalWorkspaceBins === true) {
            this.linkLocalWorkspaceBins();
        }
        this.subprojects.forEach((subProject) => {
            if (utils_1.NodePackageUtils.isNodeProject(subProject)) {
                // Remove any subproject .npmrc files since only the root one matters
                subProject.tryRemoveFile(".npmrc");
                utils_1.NodePackageUtils.removeProjenScript(subProject);
            }
        });
        (0, projen_dependency_1.syncProjenVersions)(this.subprojects, this.projenVersion);
    }
    /**
     * @inheritDoc
     */
    synth() {
        this.validateSubProjects();
        this.updateWorkspace();
        this.installNonNodeDependencies();
        this.resolveLocalBunDependencies();
        // Disable node warnings if configured
        if (this._options.disableNodeWarnings) {
            this.disableNodeWarnings();
        }
        // Prevent sub NodeProject packages from `postSynthesis` which will cause individual/extraneous installs.
        // The workspace package install will handle all the sub NodeProject packages automatically.
        this.subprojects.forEach((subProject) => {
            if (utils_1.NodePackageUtils.isNodeProject(subProject)) {
                const subNodeProject = subProject;
                const subNodeProjectResolver = 
                // @ts-ignore - `resolveDepsAndWritePackageJson` is private
                subNodeProject.package.resolveDepsAndWritePackageJson;
                // @ts-ignore - `installDependencies` is private
                subNodeProject.package.installDependencies = () => {
                    this.subNodeProjectResolves.push(() => subNodeProjectResolver.apply(subNodeProject.package));
                };
                // @ts-ignore - `resolveDepsAndWritePackageJson` is private
                subNodeProject.package.resolveDepsAndWritePackageJson = () => { };
            }
        });
        this.nxConfigurator.synth();
        super.synth();
    }
    /**
     * @inheritDoc
     */
    postSynthesize() {
        super.postSynthesize();
        this.resolveSubNodeProjects();
    }
    /**
     * Resolve sub `NodePackage` dependencies.
     */
    resolveSubNodeProjects() {
        if (this.subNodeProjectResolves.length) {
            if (!this.package.file.changed) {
                // Force workspace install deps since it would not have been invoked during `postSynthesis`.
                // @ts-ignore - `installDependencies` is private
                this.package.installDependencies();
            }
            const completedResolves = this.subNodeProjectResolves.map((resolve) => resolve());
            if (completedResolves.some(Boolean)) {
                // Indicates that a subproject dependency has been resolved from '*', so update the lockfile.
                // @ts-ignore - `installDependencies` is private
                this.package.installDependencies();
            }
        }
        this.subNodeProjectResolves = [];
    }
    /**
     * Ensures subprojects don't have a default task and that all packages use the same package manager.
     */
    validateSubProjects() {
        this.subprojects.forEach((subProject) => {
            // Disable default task on subprojects as this isn't supported in a monorepo
            subProject.defaultTask?.reset();
            if (utils_1.NodePackageUtils.isNodeProject(subProject) &&
                subProject.package.packageManager !== this.package.packageManager) {
                throw new Error(`${subProject.name} packageManager does not match the monorepo packageManager: ${this.package.packageManager}.`);
            }
        });
    }
    /**
     * Add a submodule entry to the appropriate workspace file.
     */
    updateWorkspace() {
        // A final call to addWorkspacePackages will update the list of workspace packages with any subprojects that have
        // not yet been added, in the correct order
        this.addWorkspacePackages();
        let noHoist = this.workspaceConfig?.yarn?.noHoist;
        // Automatically add all sub-project "bundledDependencies" to workspace "hohoist", otherwise they are not bundled in npm package
        if (this.workspaceConfig?.yarn?.disableNoHoistBundled !== true &&
            [
                javascript_1.NodePackageManager.YARN,
                javascript_1.NodePackageManager.YARN2,
                javascript_1.NodePackageManager.YARN_BERRY,
                javascript_1.NodePackageManager.YARN_CLASSIC,
            ].includes(this.package.packageManager)) {
            const noHoistBundled = this.subprojects.flatMap((sub) => {
                if (utils_1.ProjectUtils.isNamedInstanceOf(sub, javascript_1.NodeProject)) {
                    return getBundledDeps(sub).flatMap((dep) => [
                        `${sub.name}/${dep.name}`,
                        `${sub.name}/${dep.name}/*`,
                    ]);
                }
                return [];
            });
            if (noHoistBundled.length) {
                noHoist = [...(noHoist || []), ...noHoistBundled];
            }
        }
        // Add workspaces for each subproject
        if (this.package.packageManager === javascript_1.NodePackageManager.PNPM) {
            new projen_1.YamlFile(this, "pnpm-workspace.yaml", {
                readonly: true,
                obj: {
                    packages: this.workspacePackages,
                },
            });
        }
        this.package.addField("workspaces", {
            packages: this.workspacePackages,
            nohoist: noHoist,
        });
    }
    /**
     * Ensures the install task for non-node projects is executed postinstall.
     *
     * @private
     */
    installNonNodeDependencies() {
        const installProjects = this.subprojects.filter((project) => !utils_1.ProjectUtils.isNamedInstanceOf(project, javascript_1.NodeProject) &&
            project.tasks.tryFind("install"));
        if (installProjects.length > 0) {
            // TODO: Install error on clean repo for postinstall (https://cloud.nx.app/runs/MptQr0BxgF) (https://github.com/nrwl/nx/issues/11210)
            const postinstallTask = this.tasks.tryFind("postinstall") ?? this.addTask("postinstall");
            const nxRunManyInstall = this.composeNxRunManyCommand({
                target: "install",
                projects: installProjects.map((project) => project.name),
                parallel: 1,
            });
            postinstallTask.exec(utils_1.NodePackageUtils.command.exec(this.package.packageManager, ...nxRunManyInstall));
            // Ensure that install-py follows dependency order
            installProjects.forEach((p) => {
                nx_project_1.NxProject.ensure(p).setTarget("install", {
                    dependsOn: ["^install"],
                });
            });
        }
    }
    /**
     * Suppress Node warnings from being presented in the console when running builds.
     */
    disableNodeWarnings() {
        this.tasks.addEnvironment("NODE_NO_WARNINGS", "1");
        this.subprojects.forEach((subProject) => subProject.tasks.addEnvironment("NODE_NO_WARNINGS", "1"));
    }
    /**
     * Resolve all local workspace dependencies to keep bun happy.
     */
    resolveLocalBunDependencies() {
        if (this.package.packageManager !== javascript_1.NodePackageManager.BUN) {
            return;
        }
        const nodeSubProjectNames = new Set(this.subprojects
            .filter((s) => utils_1.NodePackageUtils.isNodeProject(s))
            .map((s) => s.package.packageName));
        this.subprojects.forEach((subProject) => {
            if (utils_1.NodePackageUtils.isNodeProject(subProject)) {
                subProject.deps.all
                    .filter((dep) => nodeSubProjectNames.has(dep.name))
                    .forEach((d) => {
                    switch (d.type) {
                        case projen_1.DependencyType.RUNTIME:
                            subProject.addDeps(`${d.name}@workspace:*`);
                            break;
                        case projen_1.DependencyType.BUILD:
                            subProject.addDevDeps(`${d.name}@workspace:*`);
                            break;
                        case projen_1.DependencyType.PEER:
                            subProject.addPeerDeps(`${d.name}@workspace:*`);
                            break;
                        default:
                            console.warn(`Cannot update local dependency due to unsupported type: ${d.type}`);
                    }
                });
            }
        });
    }
}
exports.MonorepoTsProject = MonorepoTsProject;
_a = JSII_RTTI_SYMBOL_1;
MonorepoTsProject[_a] = { fqn: "@aws/pdk.monorepo.MonorepoTsProject", version: "0.26.14" };
/**
 * Gets bundled dependencies for a given project
 */
function getBundledDeps(project) {
    return project.deps.all.filter((dep) => dep.type === projen_1.DependencyType.BUNDLED);
}
//# sourceMappingURL=data:application/json;base64,