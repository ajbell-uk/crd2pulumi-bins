"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObjectContainingFieldExactly = exports.Circleci = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("../component");
const util_1 = require("../util");
const yaml_1 = require("../yaml");
/**
 * Circleci Class to manage `.circleci/config.yml`.
 * Check projen's docs for more information.
 *
 * @see https://circleci.com/docs/2.0/configuration-reference/
 */
class Circleci extends component_1.Component {
    constructor(project, options = {}) {
        super(project);
        /**
         * reduce objects with `identifier` field for WorkflowJobs.
         * A workflow job can contain `orbParameter` which are passed to orbs.
         * This map is directly added as `Record<string,any>` to job.
         * So we gonna add those after the default field of WorkflowJob.
         * @see https://circleci.com/developer/orbs/orb/circleci/node#usage-install_nodejs
         * @param jobs
         */
        this.renderJobs = (jobs = []) => {
            let result = [];
            for (const job of jobs ?? []) {
                const { identifier, orbParameters, ...reduced } = job;
                if ((0, exports.isObjectContainingFieldExactly)(job, "identifier")) {
                    result = [...result, identifier];
                }
                else {
                    result = [
                        ...result,
                        { [identifier]: { ...reduced, ...orbParameters } },
                    ];
                }
            }
            return result;
        };
        /**
         * Snake case for listed keys. There are too many exceptions needed to do it recursive without a whitelist.
         * This list needs to be updated once we add field with snake case like `aws_auth`.
         * @param input
         */
        this.snakeCase = (input) => {
            const snakeCaseKeyWords = [
                "awsAuth",
                "workingDirectory",
                "resourceClass",
                "dockerLayerCaching",
                "noOutputTimeout",
                "circleciIpRanges",
            ];
            return (0, util_1.snakeCaseKeys)(input, true, snakeCaseKeyWords);
        };
        this.options = options;
        this.orbs = options.orbs ?? {};
        this.workflows = options.workflows ?? [];
        this.jobs = options.jobs ?? [];
        this.file = new yaml_1.YamlFile(project, ".circleci/config.yml", {
            obj: () => this.renderCircleCi(),
        });
    }
    /**
     * function to prepare the rendering of the yaml file.
     * Objects with dynamic keys like workflows and jobs required the field `identifier` to be set.
     * Those object will be reduced by `identifier` field before rendering
     * @private
     */
    renderCircleCi() {
        // render dynamic keys for workflow
        const workflowRecords = {};
        for (const workflow of this.workflows) {
            const { identifier, ...reduced } = workflow;
            reduced.jobs = this.renderJobs(workflow.jobs);
            workflowRecords[identifier] = this.snakeCase(reduced);
        }
        // render dynamic keys for jobs
        const jobRecords = {};
        for (const job of this.jobs) {
            const { identifier, ...reduced } = job;
            jobRecords[identifier] = this.snakeCase(reduced);
        }
        return {
            version: this.options.version || 2.1,
            setup: this.options.setup,
            orbs: this.orbs,
            jobs: Object.keys(jobRecords).length > 0 ? jobRecords : undefined,
            workflows: workflowRecords,
        };
    }
    /**
     * add new workflow to existing pipeline
     * @param workflow
     */
    addWorkflow(workflow) {
        this.workflows = [...this.workflows, workflow];
    }
    /**
     * Add a Circleci Orb to pipeline. Will throw error if the orb already exists
     * @param name
     * @param orb
     */
    addOrb(name, orb) {
        if (this.orbs[name] !== undefined) {
            throw new Error(`Circleci Config already contains an orb named ${name}.`);
        }
        this.orbs[name] = orb;
    }
}
exports.Circleci = Circleci;
_a = JSII_RTTI_SYMBOL_1;
Circleci[_a] = { fqn: "projen.circleci.Circleci", version: "0.95.4" };
const isObjectContainingFieldExactly = (obj, field) => {
    return Object.keys(obj).length == 1 && Object.keys(obj).includes(field);
};
exports.isObjectContainingFieldExactly = isObjectContainingFieldExactly;
//# sourceMappingURL=data:application/json;base64,